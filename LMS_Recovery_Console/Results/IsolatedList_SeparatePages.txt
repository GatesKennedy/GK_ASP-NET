$$$
^G^ Module 1.  Introduction to HTML and CSS
^G^ Learning objectives:
%%^G^ Explain basic web development terms
^G^ SUBMODULE A. An Introduction to the HTML Course
^G^ Estimated Course Completion Time:
^G^ 80 hours of study
$$$
Instructions:
The courses in this program are designed on an increasing gradient of difficulty, with easier concepts placed toward the beginning and advanced concepts at the end. Later steps assume the student has completed all prior steps. Courses sometimes refer back to earlier content. The courses must be done in sequence, with each step fully completed before moving on to the next. Please do not skip around in courses.
$$$
Purpose of this course
To learn the basics of HTML5 and CSS3 and to use these skills to design and code a basic website.
$$$
Assignment
Create two new repositories (repository: a central location in which data is stored and managed) to store coding projects in from this course — one for small projects and one for large projects.
For example, you could name your repositories “Basic HTML-CSS Projects” and “HTML-CSS Coding Projects”.
As you progress through the coursework, keep these repositories up to date with the changes you make to your projects. This is a vital action in creating your online portfolio and is an extremely valuable tool for your job search.
Once these two repositories are created, email your Instructor the URL for each.
$$$
Watch the following video in full:
VIDEO~~An Introduction to the HTML and CSS Course~~https://ttamediaservices-uswe.streaming.media.azure.net/e922e6b7-5f34-4c41-94cc-83035292f5eb/introduction%20to%20the%20HTML%20and%20CSS%20course(revised).mp4
$$$
A key technology term is “state”. It basically means, “the condition or status of a thing at a specific point in time”.
This concept of state is used in various ways in technology, and it has more precise meanings in those contexts - but it usually means, “what’s the state of this thing at this exact time?”.
We’re going to examine the way this concept applies to the Web and web development.
To start, let’s review some basic elements that apply to communication between connected computers, or networks.
One reason to create computer networks in the first place is to allow for the design and operation of what is called a distributed system. This is a computing system in which the various elements of the system are located on different computers on a network. In this system, the various computers communicate and coordinate their actions by passing messages to each other.
$$$
STATE Continued
A computer program that runs within one of these distributed systems is called a distributed program or a distributed application. In this type of application, there are usually several individual computer programs installed on the various computers in the network. These programs are designed to work together. Each program will perform some function that relates to the overall purpose of the distributed application. Together, this system of networked computers and programs will accomplish the overall purpose of the distributed application.
The use of the term “state” that we will examine here revolves around a distributed application structure called “client/server”. In this structure, one or more of the computers in the network are arbitrarily designated as the servers, and one or more other computers are designated as clients.
A server acts as the provider of a resource or a service; a client acts as a requester of that resource or service. The server can do things like sending files and images or processing some data the client gave it.
The primary factor that applies when computers are communicating and passing data is the concept of a protocol - a precise description of how to structure, send, receive and process data of a specific type.
Distributed applications need a protocol that governs how the various elements in the system communicate and coordinate their actions.
$$$
STATE Continued
When we look at the Web, the protocol at work is the Hypertext Transfer Protocol (HTTP).
When a client establishes a connection to a server using this protocol, a “session” is begun. Here, a session is a temporary and interactive exchange of information between two computers using HTTP. Once the server sends the requested data, the session is ended.
This illustration sets the stage for examining the use of the term “state” in the web and web development.
Often, the server is the central place used to store information that can change over time. An example might be a list of customers. This list could change at any moment, as new customers are added to the list, or existing customers are removed. The contents of that list at any given point in time are called the “state” of the list.
$$$
STATE Continued
How does this work? Like this:
When a client computer wants to get a list of all customers, it will send a request for that information to the server. The server will gather together the list of customers AS IT EXISTS AT THAT EXACT POINT IN TIME and send that list back to the client computer.
If, moments after the server sends that list to the client computer, a customer is added to or removed from the server, that data will not be accounted for in the list the client now has. How could it? The server didn’t have that data at the time it formatted and sent the response to the client.
Meanwhile, the client computer could be modifying the information related to one or more of the customers in the list it got - and the server will have no way of knowing that the information has changed on the client.
$$$
STATE Continued
This situation comes about because of the nature of the Hypertext Transfer Protocol. HTTP is what is called a “stateless” protocol. More precisely, this means that neither the client nor the server are aware of the state of the other at any particular point in time.
When the Web was first being created and used, this wasn’t much of an issue, because the various web pages that were stored on servers didn’t change based on which client was accessing the web page. Now, however, the web pages that are served up to clients often need to be stateful - that is, the web page content needs to be modified to reflect the state of the client and/or the server. The “list of customers” example above should illustrate this.
Because of this fact, various systems have been devised that seek to keep the state of the client and the server synchronized. In other words, they try to make the HTTP protocol, which is inherently stateless, into a “stateful” protocol - meaning, the various actions that take place on the server and the client are remembered and accounted for.
One approach, for instance, is to create a persistent connection from the client to the server, so that changes in one can be immediately communicated to the other.
In our example above, this could mean that, in the event a customer is deleted from the server after a client has been given a list of customers, then the client is notified of the change and changes its list to reflect the change.
As you work in web development (and other development where a client/server system is in place), you will see various tools and systems in use that revolve around this concept of state.
$$$
^^HTTP is a(n) _____________ protocol.
##Stateless CORRECT
##Stateful
##Outdated
##All of the above
$$$
Tutorials
This course contains many video tutorials. In these tutorials, the Instructor performs various actions on his computer. You are expected to follow along, performing the same actions on your computer.
Do not just watch the tutorials. Copy what the Instructor is doing on your own screen.
Example: If the Instructor is writing code in HTML, you are write and execute that code on your machine.
This is typically done as follows:
<img src="cid:IMAGE_0.png" />
You don’t have to have an external monitor – this is just an example. You gain skills by doing. A chef masters preparing meals through cooking. A pilot learns to fly an aircraft by flying. As a coder, you will only become skilled through writing more code.
$$$
Knowledge Check
^^During code tutorial videos, which one of the following should you do?
##Write and execute all code on your own computer CORRECT
##Memorize all code written
##Just watch the video
##Prepare for upcoming tests
$$$
^G^ SUBMODULE B. Learning the Language of Developers
Parse: To break something up into its parts and analyze it. In computing, it means that the program code is analyzed and read.
Example: If you write code for a website, the web server (computer that gives and receives data over the Internet) parses the code and then outputs the correct HTML (popular programming language for websites) code to the browser (program one uses to display the Internet).
“Parsing” can also refer to breaking up ordinary text.
Example: Search engines (programs used to search the web) typically parse search phrases entered by users so that they can more accurately search for each word.
$$$
Character encoding: A system where numbers, letters, etc. are represented by codes. The codes used are in a form that computers can easily understand. The system used for each type of code depends on how that code is going to be used.
Example: The letter “A” could be represented by the code “65.”
Usually, the actual codes for a letter, number, etc. are in binary (a number system that uses only 1s and 0s). Every letter or symbol has a unique number so that the computer knows what letter or symbol is represented;  this is called “character encoding.”
Example: The letter “B” might have 1000010 as its character encoding.
$$$
Real time: The transmission of data or signal as soon as it is generated.
This is best illustrated by the concept of watching a sporting event on TV. The cameras at the event are capturing the game play and broadcasting it to televisions around the country. There is little to no time lag between when an event occurs and when the viewers at home see that event. This is "real time."
In contrast, if the events of the game are recorded and then viewed at another time, this is called "delayed playback." The delay can be a few seconds, an hour, a day or any other length of time.
This applies in any situation where the stream of information that is produced can be accessed as it is produced — that is, in "real time."
Example: If you watch the Super Bowl as it happens, that is real time. If, instead, you record the game and watch it later, that is delayed playback.
$$$
Static website: “Static” in this sense means “rigid; unchanging." Static websites are delivered to the browser exactly how they were stored originally on the web server. Static web pages don't change. No matter who is accessing the website, it looks the same.
Dynamic website: Most websites nowadays are dynamic, meaning that the appearance and content of the web pages can be changed on the web server before the web page is sent back to the browser, or it can be changed by the browser on the user’s computer before being displayed on the screen.
Example: In the 1990s, most websites were static.
$$$
AJAX: Stands for Asynchronous JavaScript and XML. “XML” is an abbreviation for “extensible markup language.” Computer programmers can create their own document structure, and then use XML to specify markup instructions for the data in those documents.
“Asynchronous” means “broken down into separate pieces/occurrences without a set pattern.”
AJAX is a set of tools that can be used in creating asynchronous functions for websites.
AJAX is best understood by relating it to the way a normal web page is accessed by a user. With a web browser, a user issues a request to see a specific web page. That request is sent to the web server. That server gathers those requested files and sends them to the user's computer as a response to the request, and the browser then converts them to a visual form and displays them for the user.
If the creator of that web page wants to enable some content on the web page to change based on a user action, they have a number of different options:
One method is to just send a new request for the web page, along with some instruction to provide the new content that is desired. This can take a long time, though, as every file needed to display that web page has to be sent back to the user's computer by the web server.
This is where AJAX comes in. Instead of requesting that the entire page be recreated, the creator of the website can make it so that only the new content is requested from the web server. The way this works is that user action triggers an asynchronous request to the web server for JUST a specific section of the web page. It is asynchronous in that it is not tied to the full request - response - page display process used for a full web page.
The technologies used to accomplish this feature are JavaScript and XML — hence the name "AJAX," or Asynchronous JavaScript And XML.
Example: If you are viewing a web page, AJAX can make it so that when you click on a video, only the video is sent over from the server, not the video and the rest of the entire web page.
$$$
Knowledge Check
^G^ <MCSA>
^^What does AJAX stand for?
##Auxiliary jQuery And XOR gate
##Asynchronous jQuery and XNOR gate
##Asynchronous JavaScript and XML CORRECT
##Action JavaScript Auxiliary
^G^ SUBMODULE C. Additional Web Development Terminology
$$$
XHR: Stands for “XML Http Request.” XHR is a set of APIs that can be used by some scripting languages (such as JavaScript). It is used to transfer XML (and other such data) to and from a web server using HTTP.
XHR works by establishing a communication path between a web page's client-side and the server-side and can be used to transmit many different types of data accurately, including HTML, XML, JSON, etc.
Example: Google Maps uses XHR to transmit data (maps, directions, etc.) to and from your computer.
$$$
Ruby: Ruby is a popular programming language. Some of the main features of the language are the fact that it is suitable for writing scripts as well as robust object-oriented programs. It was created in the early 1990's in Japan, and started to become popular in the U.S. in the late 2000's.
Example: Sass, a popular set of technologies for beautifying websites, was created in Ruby.
$$$
Ruby on Rails: Ruby on Rails is a web application framework (set of tools for making web-based programs) that is written in Ruby (a popular programming language). It is popular and has been used to create many different websites and a lot of web-based software.
Example: Groupon, Shopify and Airbnb are built on the Ruby on Rails framework.
$$$
Knowledge Check
^^What does XHR stand for?
##XML Http Request CORRECT
##XHTML Https Reset
##XML HTML Recertification
##XHTML Htm Readjustment
^^What does DOM stand for?
##Delimiting Oscillation Modal
##Document Object Model CORRECT
##Documentation Operating Metadata
##Distinguishing Orientation Marker
$$$
THE DOCUMENT OBJECT MODEL (DOM)
In this article, we will cover an element of the Web that can help a developer greatly in their web development tasks.
First, let’s review some fundamentals of the Web. You will have learned much of this already.
The Web is a collection of linked electronic documents. These documents, called “web pages”, are precisely formatted text documents that define the content and appearance of a visual display of the web page.
These web page documents are written in a specialized type of computer language called a “markup language”. This is a computer language whose instructions are used to tell the computer how to display and format visual elements.
One aspect of markup language instructions is that they reside in the same document as the content that they affect, and the instructions can be differentiated from that content.
There are several markup languages in use in computer programming. The one used in web development is Hyper Text Markup Language.
$$$
DOM Continued
HTML uses instructions called “tags” to alter the format and appearance of displayed content.
The combination of a tag and its associated content is called an “element”.
Here is an example of HTML:
<html>
<head>
<title>
My title
</title>
</head>
<body>
<h1>A heading</h1>
<a href="http://www.learncodinganywhere.com">Link text</a>
</body>
</html>
$$$
DOM Continued
The basic operation of the Web is this:
~~A person uses a computer program on their computer called a web browser.
~~They instruct their browser to request a specific web page.
~~The browser sends a request to the web server where that web page is stored. Again, the web page is an HTML file.
~~The web server sends the web page back to the browser.
~~The browser processes the HTML in the web page and renders a visual display based on the HTML.
Usually, HTML documents are created by hand by programmers. Often, though, programmers have a need to change these HTML files programatically - that is, to change the markup instructions and/or the content based on logic contained in a computer program.
$$$
DOM Continued
In order to facilitate this, programmers need an interface that can expose the form and content of any given HTML document in such a way that a computer program can analyze and modify the document as needed.
In other words, they need an API - an Application Programming Interface - for the web page.
In simple terms, an API is a system that allows one program to talk to another. Here, what is needed is a tool that can scan an HTML document and then create a representation of that document that other programs can interact with.
This interface for HTML documents exists. It is called the Document Object Model, or the DOM. It is pronounced “dom” rather than “dee-oh-em”.
$$$
DOM Continued
In order to understand the DOM well, we should review what an “object” is. In its simplest form, an object is just “something the computer is keeping track of”. Usually it’s a variable, or a data structure, or similar item. It’s essentially a value stored in computer memory, so it has a location and an identifier that can be used to identify and use it.
So the DOM is a model of the various objects in the HTML document - a document object model.
The DOM presents the HTML document as a tree structure, where each node in the tree is an object representing a part of the HTML document.
Here is an example of a Document Object Model for the HTML example above:
<img src="cid:IMAGE_0.png" />
$$$
DOM Continued
A DOM for an HTML page is generated by specialized computer programs. These programs scan through an HTML file, locating the various elements in the page described by that file, and then they create the tree structure that represents the unique arrangement of elements on that page. That tree structure, the DOM, is itself then held in computer memory.
Once the DOM is generated for a particular HTML document, other programs can access the Object Model and the various parts of the document that are represented in it. They can get data about the various elements on the page, and can even modify the page.
Let’s look at some examples of how this could be done, using pseudocode.
Suppose you wanted to find all paragraph elements in an HTML document. You might use code like this:
var foo = document.getElementsByTagName("p");
The variable called “foo” would now contain a collection of all the paragraph tags in the document.
Many different programming languages can be used to work with the DOM. One of the most common is JavaScript; in fact, the code example above is actually JavaScript.
$$$
DOM Continued
The DOM allows you to locate elements in an HTML document in several ways. You can search for elements by their class name or their id. You can locate elements that are organized in a collection, such as those inside a <form> element. Many other parts of the HTML webpage are accessible as DOM objects, such as:
~~body
~~head
~~anchors
~~images
~~title
~~scripts
~~and more
Having the DOM also opens up the ability to change the HTML for a web page, or to generate HTML entirely from scratch. In fact, an entire web page could be created by a program, only coming into existence after a DOM for it is constructed.
Most browsers generate a DOM for the web pages they display, and most browsers allow you to look at that DOM. Most browsers have built-in tools to help web developers; they are generally called “developer tools.”
$$$
DOM Continued
The DOM can be accessed by opening up these developer tools in your browser.
Let’s look at an example of this, using the web browser Chrome. You can open Developer Tools in Chrome by right-clicking on a web page and clicking “Inspect”. A second window will open up, showing a great deal of information about the web page and the browser. There are tabs in this window that let you select what you’d like to view. The DOM is viewable in the “Elements” tab.
For our HTML above, the DOM would look like this from within those Developer Tools in Chrome:
<img src="cid:IMAGE_0.png" />
This looks much like the actual HTML from the web page file itself - but it’s actually a tree structure that represents the structure of the various objects that make up the web page. The “down arrows” in the display of the DOM are a graphical interface that lets you expand and collapse the individual nodes on the tree structure of the DOM.
Many browsers even let you edit the DOM from within these tools and see those changes reflected immediately in the displayed web page - but it’s important to know that those changes aren’t being made to the actual stored HTML files that were given to the browser - you’re only changing the DOM that the browser is creating and using to create the display. In order to permanently change the web page, you’ll need to change the actual files that will be given to the browser.
There is a lot more to know about the DOM, and as you do more web development, you’ll pick up a lot more knowledge and skill. Here, though, you have the basic principles and application of the DOM.
$$$
QUIZ
^^The DOM is a __________ of the various objects in the HTML document.
##Model CORRECT
##Diagram
##Browser
##Web Page
$$$
Character Sets
In the written form of a language, a character is a written symbol that represents one of the various parts of that language — the various letters, punctuation marks and symbols that are used to lay out that language in written form. For example, the English phrase “Speed limit 65 MPH!” uses upper-case letters such as “S” and “M,” lower-case letters such as “p” and “t,” the punctuation mark “!,” and the numbers “6” and “5”.
Character sets are fixed collections of these various symbols, usually containing all the needed symbols for a specific language. If we took the English alphabet as an example, it is a character set containing almost 100 symbols. This includes 26 upper-case letters of the English alphabet, 26 lower-case characters of the English alphabet, the numeric digits 0 through 9, and a collection of punctuation marks.
$$$
American Standard Code For Information Interchange
As computers are often used to represent data in written form, they must be configured to represent the various characters for written languages. Early computers were primarily created by engineers whose primary language was English, so their efforts in this direction concerned the representation of English characters using computers — specifically, representing the nearly 100 characters described earlier.
In the 1960s, the ASCII (American Standard Code for Information Interchange) was created in order to standardize a system to represent English characters using computers. It contains 127 symbols, including numbers and letters. ASCII was designed for languages that use the English alphabet only.
In simple terms, each character in the ASCII character set has an associated unique number. When that number is sent to a device meant to use written characters — such as a monitor or a printer — the computer can look that number up in the ASCII tables, get the specific symbol it represents from that table, and then print or display that character.
For example, the ASCII code for upper-case “S” is the number 83, while the code for lower-case “s” is 115.
This website contains the full ASCII table:
<a href="http://www.asciitable.com/
" rel="nofollow">http://www.asciitable.com/
</a>
$$$
ASCII
In addition to the nearly 100 symbols used to represent the letters, numbers and punctuation of the language, ASCII also includes control characters — symbols that aren’t meant to represent printable characters, but instead represent instructions to control the various pieces of electronic equipment that would use the ASCII characters, such as printers and monitors. These are instructions such as “backspace” (to delete the character immediately to the left of the current position of the printing mechanism) and “carriage return” (to move down to the next line of printing and return to the far left of the page).
Since computers operate in binary, the characters in character sets must each be translated into binary. This is done through character encoding, typically through this process:
Character  (CONVERTED TO →)  Hexadecimal  (CONVERTED TO →)  Binary
$$$
ASCII (continued)
Using the ASCII codes, the phrase “Speed limit 65 MPH!” would be represented in decimal numbers in this manner:
83 112 101 101 100 32 108 105 109 105 116 32 54 53 32 77 80 72 33
Using the ASCII codes, that same sentence would be represented in binary numbers in this manner:
01010011 01110000 01100101 01100101 01100100 00100000 01101100 01101001 01101101 01101001 01110100 00100000 00110110 00110101 00100000 01001101 01010000 01001000 00100001
Those binary numbers are the actual data that would be sent to the computer in order to create the phrase “Speed limit 65 MPH!”
ASCII does not contain symbols or characters like è, ñ, ü, ©, or characters from other languages like Chinese or Arabic. Another system called Unicode was developed to accommodate languages other than English.
As a developer, you will utilize various character sets and character encoding to create software and websites, so it is important that you understand these.
$$$
Unicode
Unicode is another standard (in addition to ASCII) for representing letters and symbols in computers. Unicode is intended to represent all languages, not just English. Each letter and symbol of the various languages of the world has a specific number in the Unicode system.
This is important because computers are much more useful if they can display data in the language of the user.
Unicode was created because developers needed a way to clarify what letters or symbols to use in their programs if the user wanted the data displayed in a language other than English. It was necessary that all computer manufacturers agree on this system so that computers could be used globally.
Example: In Unicode the letter “A” could be represented as 0041.
$$$
ASCII vs. Unicode
Whereas the standard ASCII character set can only support 128 characters, Unicode can support about 1,000,000 characters.
Another difference between Unicode and ASCII is that ASCII utilizes one byte (8 binary digits) to represent each character. Unicode utilizes between one and four bytes to represent characters.
$$$
Code Point
In character encoding, the numerical value assigned to a specific character or format is called a “code point.”
Example: ASCII has 128 code points.
In the chart below, you can see some of the code points in the ASCII character set:
<img src="cid:IMAGE_0.png" />
$$$
UTF
“UTF” stands for “Unicode Transformation Format.” UTF is a pre-defined mapping of the code points. This is needed to allow for encoding of languages other than English, and interoperability between computer systems.
The most popular type of Unicode encoding is UTF-8. The “8” means that each Unicode character is represented by one or more 8-bit binary numbers (a set of 8 binary digits is called a “byte”). Other UTF encodings exist, such as UTF-16, where each Unicode character is represented by one or more 16-bit binary numbers.
Example: In UTF-8, only one byte is used to represent common English characters.  Hebrew, European, and Arabic characters are represented with two bytes. Three bytes are used to represent Chinese, Korean, Japanese, and other Asian characters. There are other Unicode characters that are represented with four bytes.
Another useful aspect of UTF-8 is that it is backwards compatible (able to be used with an older piece of hardware or software without special adaptation or changes) with ASCII.
UTF-8 is used in the operating system Linux by default, and is commonly used for the exchange of data on the internet. Over half of all websites in existence utilize UTF-8.
This website that shows the full character list for UTF-8:
https://www.fileformat.info/info/charset/UTF-8/list.htm
$$$
UTF-16
UTF-16 is another Unicode encoding.
UTF-8 is used far more on the web; UTF-16 is used by fewer than 0.01% of web pages. The main reason UTF-16 is used less in websites is due to the fact that the official documentation on HTML5 strongly discourages the use of UTF-16 for websites. This is mainly because UTF-16 wasn’t originally created with web use in mind (like UTF-8) and it is considered less secure for online use.
UTF-16 is used by Microsoft Windows and Mac OS X's file systems. It’s also used in the programming language Java.
UTF-16 is capable of utilizing all 1,112,064 code points of Unicode.
This website shows the full character list for UTF-16:
https://www.fileformat.info/info/charset/UTF-16/list.htm~~https://www.fileformat.info/info/charset/UTF-16/list.htm
$$$
Universal Coded Character Set (UCS)
UCS is a standard set of characters defined by the International Organization for Standardization (ISO), an organization composed of representatives from various standards organizations across the world. The ISO exists to monitor and promote international industrial and commercial standards.
Under the umbrella of the UCS, the ISO created the UTF character encoding systems,  including UTF-8 and UTF-16.
UCS-2 is a character encoding standard where characters are represented by a fixed length of 16 bits (2 bytes). UCS-2 allows for a maximum of 65,536 characters.
Example: In UCS-2, an uppercase A is represented by 0041.
It should be noted that in 2017 the ISO stated, “UCS-2 should now be considered obsolete. It no longer refers to an encoding form in … the Unicode Standard.”
UTF-16 is an extension of (improvement upon) UCS-2.
$$$
Character Sets vs. Encoding Systems
A character set (called “char set” for short) is a standardized set of characters.
An encoding system is a standardized way to translate characters into binary.
Therefore, character sets and encoding systems are different things.
Char sets are transformed into binary by encoding systems.
Unicode primarily defines two things:
1.   	A character set (Unicode includes the characters needed for nearly all languages)
2.   	Several encoding systems (as covered earlier, the most popular are UTF-8 and UTF-16)
$$$
Decoding
Have you ever opened a file and the document was displayed incorrectly?
In order to properly display characters when opening a file, a program (like a text editor) must know which encoding system was used.
In most browsers and programs, you can choose which encoding system to use.
You can also typically specify the encoding type when saving a file.
Example: One of the encoding options for Notepad documents is UTF-8. This can be seen in the picture below:
<img src="cid:IMAGE_0.png" />
$$$
Using Encoding as a Developer
As a developer, you can assign which encoding system to use.
Example: The default encoding system for HTML5 is UTF-8.
Understanding char sets and encoding is also useful in debugging data that isn’t displaying correctly.
$$$
Knowledge Check
^^Which of the following encoding systems is utilized the most in HTML documents?
##UTF-16
##ASCII
##UTF-8 CORRECT
##JPEG
^^True or false? An encoding system is a standardized digital instruction set or mapping, from an input signal to a machine readable form.
##True CORRECT
##False
$$$
^G^ MODULE 2.  HTML Fundamentals
^G^ Learning objectives:
%%^G^ Understand HTML elements
%%^G^ Create basic HTML templates
%%^G^ Describe the basic anatomy of HTML
^G^ SUBMODULE A. HTML Anatomy
Anatomy of HTML
Hypertext Markup Language (HTML) is used to instruct browsers on how to present content to the user’s screen. The open and closed tags used in HTML denote web elements. Each element works together to form a web document, and a web browser like Chrome or Firefox is required to parse and display the HTML and JavaScript as intended by the author.
HTML can be further enhanced when teamed with other web-related languages — most commonly, Cascading Style Sheets and JavaScript.
The standards of HTML are governed by The World Wide Web Consortium (W3C) which is a group of individuals and organizations that work together to create standards for the World Wide Web.
Tags
HTML utilizes tags. Tags are how the markup of the content in an HTML document is specified.
Tags are special instructions placed before and after the content. Using tags, another program can tell the difference between the instruction and the content, and can then present the content in the manner specified by these tags.
Tags usually have two parts: an opening tag and a closing tag. The content goes between these two tags.
Opening tags are written as a “less than” angle bracket (<), followed by the markup instruction, followed by a “greater than” angle bracket (>).
An example would be the tag used to make text bold. The actual instruction is the word “strong,” meaning “make the text controlled by this tag stand out,” usually by making it bold. The opening “strong” tag looks like this:
Of course, you need to specify a closing tag, so the computer program knows when to stop making text bold. That’s where the closing tag comes in. Closing tags use the same instruction as the opening tag, but with a forward slash (/) placed before the instruction.
The closing “strong” tag looks like this:
Putting all the parts together, if you wanted to emphasize the word “best” in the sentence “The best football team is the New Orleans Saints,” you would write the HTML like this:
The best football team is the New Orleans Saints
The output looks something like this:
<img src="cid:IMAGE_0.png" />
Since there is often a need to format content within other tags, the tags can be "nested," meaning one tag can include other tags.
Here’s an example of HTML where tags are nested within other tags:
<div>
<h1>Nested divs</h1>
<p>Nested divs are a common feature in HTML</p>
<p>In this example, the heading and paragraph elements are nested within the div element.</p>
</div>
Nested tags are used extensively to achieve very specific formatting goals. For a real example, inspect Google. If you’re using Chrome, go to google.com, right-click anywhere on the page, click Inspect and make sure you’re on the Elements tab. You’ll be able to view the HTML source code for this page and see several examples of nested elements, especially divs.
$$$
Elements
The tags and the code written between them are called “elements.” Here is a diagram that shows this:
<img src="cid:IMAGE_0.png" />
$$$
Clearing the Browser Cache
Sometimes when you are using the web browser to view web pages the content may not appear or function as it was intended. In these instances, your browser does have some features that can try to correct these errors. But first, let's try to understand what is occurring “under the hood.”
Whenever you enter a Uniform Resource Locator (URL) into the browser's address bar, you are essentially making a request for a specific file to the web server that is hosting the website. This file may be a Hypertext Markup Language (HTML) document, image, video file, or even a combination of files.
Unfortunately, this process often takes time because while a browser is loading content, it often downloads many other files to reconstruct the web page. To reduce the loading time for future visits, the browser may store these pages in its memory as snapshots. This action is called "caching" and each snapshot is a "cache" file. The next time you visit the same website, your browser may attempt to load up the cached files and skip some of the file downloading, effectively reducing the loading time.
Sometimes, however, the browser's cache files may become corrupted or non-functional. Fortunately, most browsers provide a method to clear the cache. This will force the browser to download a new version of the file and this will often correct the error.
$$$
Please Watch the Following Video
VIDEO~~Clearing the Browser Cache~~https://thetechacademy.azureedge.net/htmlandcss/clear_browser_cache.mp4
$$$
Creating an Element
To define an element in an HTML document, we need to use an opening and closing tag. For example: to create a paragraph, we would write:
<p> This is a paragraph. </p>
Which would simply display:
This is a paragraph.
If we fail to include either the opening or the closing tag for our element, we will create errors within the document. There are exceptions to this rule; there are a few elements that do not require closing tags. However, for the sake of simplicity, we will assume all tags require a closing tag.
$$$
Knowledge Check
^^Which of the following is an element?
##<p>This is a paragraph.</p> CORRECT
##<p>
##</p>
##This is a paragraph.
$$$
^G^ SUBMODULE B. Understanding HTML Elements
HTML Structure
The first thing you will need to understand in the HTML structure is the <!DOCTYPE html> declaration. This is an instruction to the browser that states the version of HTML being used. As of October 2018, HTML5 is the latest version. In the HTML document, the code <!DOCTYPE html> tells the browser that the code that follows is written in HTML5.
Please note that in HTML5 there is no need to specify the version number explicitly. Also, the <!DOCTYPE html> declaration is not a tag — it is an instruction to the browser.
There are different doctype declarations for earlier versions of HTML and for other web development languages.
$$$
Using Elements to Create an HTML Page
The first tag contained in an HTML document is the <html> tag. The document is closed with the closing html tag </html>. These tags are required to produce a web page — the text and markup tags placed between the <html> and </html> tags form the overall web page.
Note: you can specify the language being used in your code within the <html> tag. For English, you would write: <html lang= “en”>
Virtually any language can be specified this way. For example: Spanish is abbreviated “es” and French is abbreviated “fr.”
To apply what we’ve covered so far, we’d write our HTML code as follows:
<!DOCTYPE html>
<html lang=”en”>
<p>This is a paragraph.</p>
</html>
$$$
Metadata
“Meta” comes from the word “beyond.”
Metadata is data that gives information about, or describes, other data. Simply put, metadata means: data about data.
In HTML, the <meta> tag is usually used to convey data to browsers and search engines; this metadata isn’t displayed to the user.
Meta elements can be used to describe pages, provide keywords to help categorize the type of information in the content of the page, note the author of the document, and more.
$$$
Body and Title Elements
The <body> element is used to house all of the content (text, images, links, videos, etc.) in an HTML document. The body of an HTML document is contained within the <body> and </body> tags.
The title element is where you write the title of the document (between the <title> and </title> tags).
Example:
The following  HTML code:
<!DOCTYPE html>
<html>
<title>This is the title</title>
<body>This is the body</body>
</html>
would be displayed as follows in a browser:
<img src="cid:IMAGE_0.png" />
$$$
Head Elements
The <head> element is a container for metadata pertaining to the HTML document itself, and should be placed between the opening <html> tag and the opening <body> tag.
Head elements can contain:
^^Titles
^^Scripts (code that automates a task, so that a multi-part task can occur without the developer’s involvement)
^^File attachments (such as CSS, JavaScript or even custom fonts)
^^Character encoding
^^Metadata
$$$
Body Elements
The content placed between <body> and </body> make up all of the page content. This can consist of nearly anything the developer can dream of, such as embedded video, images, text, animation, table of data, advertisements, and even music. The sky’s the limit, but within the body tag is where you'll place it.
Example:
<img src="cid:IMAGE_0.png" />
$$$
^G^ SUBMODULE C. The HTML Template
The Basic HTML Template
<img src="cid:IMAGE_0.png" />
Glancing at the basic html example structure, you will notice that there are opening tags and, further down the page on the same indentation level, there are the corresponding closing tags.
As you develop your HTML skills, it is good practice to use indentation.
Although an HTML document does not require any indentation, it will certainly make your code easier to read and more manageable to work with.
$$$
Header
The <header> element represents a container for introductory content or a set of navigational links. A header element typically contains: one or more heading elements (<h1> - <h6>), a logo, an icon, etc.
<img src="cid:IMAGE_0.png" />
The example above shows a very simple HTML document with a header element containing all the heading elements. There are six possible heading tags — h1 through h6, with lower numbers indicating higher emphasis and larger default font size.
$$$
Footer
The <footer> tag defines a footer for a document or section. A footer element should contain information about its containing element. A footer element typically contains: authorship information, copyright information, contact information, etc. It is located towards the bottom of a webpage as in the image below:
<img src="cid:IMAGE_0.png" />
The footer is one of the most important parts of a web page. Its purpose is usually to provide users the contact information of the primary owner or manager of the website.
$$$
Main
The HTML <main> element represents the dominant content of the <body> of a document or portion of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document.
Note: The <p> element in the picture below stands for paragraph. It’s used to make a paragraph in the content on a web page.
Example:
<img src="cid:IMAGE_0.png" />
The “main” element designates a single containing element to enclose the main content of the page. For instance, for a blog page the main element could have the main text for a blog posting. Please note that there should be only one “main” element per HTML page.
$$$
Nav
The <nav> tags bound a set of navigation-related functionality or content. As a principle, these should link to key web pages within the overall website.
Example:
<nav>
<a href="/yellow/">yellow</a> |
<a href="/green/">green</a> |
<a href="/red/">red</a> |
<a href="/blue/">blue</a>
</nav>
The code above is a basic nav element with four “navigation links” pointing to other pages that are located on the same computer/server.
In HTML, a link is enclosed within opening and closing tags known as anchor tags. In this example, the pages or links are given the names “yellow,” “green,” “red” and “blue.” The link address is inside the opening anchor tag, while the link names (yellow, green, red and blue) are between the opening and closing anchor tags.
In the final rendered form on the browser, the anchor tags will be displayed as links that the user may click on to navigate to another page.
$$$
Div
The <div> tag defines a division or a section in an HTML document. The div element is often used as a container for other HTML elements to style them or make specific changes to the content within that particular div tag.
Example:
<img src="cid:IMAGE_0.png" />
In the above picture, the div tag encloses a heading (h2) and a paragraph (p). The “style” inside the opening div tag is telling the browser that all text within this div should be red.
$$$
Class Attribute
The class attribute specifies one or more class names for an HTML element. The class name can be used by CSS and JavaScript to target elements and manipulate them as needed. In CSS, to select elements with a specific class name, write a period (.) character, followed by the name of the class.
Example:
<img src="cid:IMAGE_0.png" />
CSS classes allow you to name a selection of code in an HTML document and then change its properties however you’d like without affecting all the code.
To target elements by tag name, e.g. p, h1, div, etc. the period is not required.
$$$
Script SRC
First let’s define “script.” A script in HTML is a separate program/collection of code than the HTML document you are writing. The script tag commonly points to JavaScript code. The src attribute is equated to the name and location of that JavaScript file.
Instead of repeating code for each web page, you can use the script src tag to have that program/code run whenever you want for that specific web page. The script may produce HTML itself when it runs, and that HTML will be used to create and format content on the web page.
Example:
<script src="myscripts.js"></script>
The code written in “myscripts.js” will run wherever you put in your code, resulting in the creation of HTML, which is then used by the browser to create the display for the user.
$$$
Anchor Tags
The <a> tag is the HTML code used to create a link to another page. It instructs the browser to display content that links to another document (typically a web page).
The “href” is an attribute of the anchor tag — it’s short for “hyperlink reference.” This attribute contains the name of the resource or document that the author intends to link to.
There two kinds of href tags. One is implicit and the other is explicit. Implicit href tags are used to create a link to another web page in the same file folder as the page the <a> tag is in.
Example:
<a href=”example.html”> Click this link to see an example</a>
If you have a file called example.html, when the user clicks on the text “Click this link to see an example” on your page, it takes them to that “example” page.
An explicit href tag is used to create a link to a web page that is not located in the same folder or is on another computer altogether.
Example:
< a href=”https://www.google.com”>This is a link to Google’s search engine</a>
This takes the user out of the site they are on and onto google.com.
$$$
Rel Attribute
The rel attribute specifies the relationship between the current document and the linked document. It is only used if the href attribute is present.
Example:
<html>
<head>
<link rel=”stylesheet” href=”style.css”>
</head>
<body>
<h1> This is a sentence </h1>
</body>
</html>
In this example, the rel tag tells the browser that the link in this code is a stylesheet (code used to style HTML). It’ll therefore style all of the code below it.
$$$
Knowledge Check
^^Which of the following is the correct definition for “script” in HTML?
##A script is a separate program/collection of code from the HTML document you are writing. CORRECT
##A script is a series of code that interacts with the user through other programs.
##A script is a long written document consisting of a story, usually with dialogue and separate scenes.
##A script is a separate program that utilizes the background data of HTML to write code for your website.
$$$
^G^ Module 3. Writing Code in HTML
^G^ Learning objectives:
%%^G^ Write basic HTML code
%%^G^ Install and utilize Notepad ++
^G^ SUBMODULE A. Creating Your First HTML Page
^G^ <Template-blank>
Assignment
In the upcoming tutorials, you will need the project files associated with the videos. Download and unzip (extract) the files here:
NOT_VIDEO
PROJECT~~Project Files ~~https://techacademystorage.blob.core.windows.net/htmlandcss/basic%20html%20template.zip
This zip includes all files discussed throughout this entire tutorial and should automatically unpack to their correct directories.
$$$
Watch this video in full, following along with the Instructor and performing the same actions on your computer:
VIDEO~~Setting Up Our Working Environment~~https://ttamediaservices-uswe.streaming.media.azure.net/1fde1002-f3a5-4e3f-95ee-6f94afbdf169/Basic%20HTML_CSS%20Series_IDE.mp4
$$$
Knowledge Check
^^Which of the following statements is correct?
##All of the above are correct CORRECT
##There can only be one body element — otherwise the page will not load and display properly
##Notepad++ is an IDE
##The CSS file does not have to be located in the same directory as the HTML file
$$$
^G^ SUBMODULE B. The HTML Template
Basic HTML
Watch this video in full, following along with the Instructor and performing the same actions on your computer:
VIDEO~~Basic HTML_CSS Series_HTML Template~~https://ttamediaservices-uswe.streaming.media.azure.net/01c6f45a-361f-4939-a7a7-c00d3e639eda/Basic%20HTML_CSS%20Series_HTML%20template.mp4
$$$
Knowledge Check
^^Which of the following tags requires a closing tag?
##All of the above CORRECT
##A Body tag.
##A Header tag.
##An HTML tag.
$$$
^G^ Module 4.  Hyperlinks, Tags and Elements
^G^ Learning objectives:
%%^G^ Use links in HTML
%%^G^ Use elements in creating dynamic websites
^G^ SUBMODULE A. Creating Hyperlinks
^G^ <Template-blank>
More on HTML
In previous sections of this tutorial, we completed the basic design of our website, but it is boring and not very aesthetically pleasing. This is because HTML is only useful for creating the basic scaffolding for a website. Rest assured, we will be making our content beautiful by leveraging CSS later in this tutorial series. For now we will concentrate on enhancing our basic design with functionality, like anchor tags and images.
As previously discussed, HTML stands for “Hypertext Markup Language” — or “Markup” for short. Markup is merely the language a programmer can use to instruct browsers how to display web content to a user's screen.
Typically, HTML documents are stored on public-facing servers. When a browser makes a query (a request) to access a web page, the host server delivers the requested document to the user's browser. The browser follows the instructions in the HTML to represent the content on the user's screen.
$$$
Linking to Internal/External Resources
We can link our pages together by using a built-in HTML syntax: the anchor element. Anchor elements provide the user with an indication that there are other pages to visit and, at the same time, provide the browser with another URL to query the host server with.
We can generate an anchor element by using the open and closing anchor tags surrounding some key information, as in the following example:
<img src="cid:IMAGE_0.png" />
In this example, we have the open <a, the href="">, and the closing </a> anchor tag surrounding https://learncodinganywhere.com as the special URL for the browser to query the server for, should the audience elect to follow the hypertext link. Most browsers have incorporated the ability to open additional browser tabs. By placing some additional code, target="_new", we can instruct our browsers to open the URL in an additional tab. The complete code to make this happen would be:
<img src="cid:IMAGE_0.png" />
$$$
Adding Images into Our Markup
Our content remains a little bland, so we can spice it up with images. The syntax to add images will look like the following:
<img src="cid:IMAGE_0.png" />
In this example, we have the open <img tag, the src="" which tells the browser that there will be a file path to follow to retrieve the image. Note that this is a self-closing tag, i.e. there is no additional closing tag to denote end of element.
In this case (and a few other tags), the characters “/>” tell the browser that the tag ends there. The exact location of the image that this element is pointing to is defined by the src attribute, similar to the script tag.
As mentioned in an earlier section of this series, sometimes there are exceptions to the rules, and an image tag is one of these exceptions. According to the standard set by the W3C, image tags are not required to be accompanied by closing element tags. This means that the image tag is considered a self-voiding tag and will open and automatically close without the "/" part of the tag. However, according to the W3C documentation, including the "/" is perfectly acceptable. Some developers prefer to stay consistent with all of their code and include the "/" in their image tags.
The key thing to take away from this, is that it is important to take the time to research how to properly use the tag with the appropriate language authority so that you’re sure you are using the syntax correctly. Avoid cutting corners and failing to research, as technology evolves swiftly in this industry.
$$$
^G^ SUBMODULE B. Exploring the Most Common HTML Tags
Other Elements
In addition to the image and anchor elements, HTML also has many other useful elements. Let’s review a few of the common ones.
Heading elements are tags that provide a way to make heading text stand out from other content text. There are 6 levels within the heading element, and the greater the number, the smaller the font size.
Example:
<img src="cid:IMAGE_0.png" />
For creating lists, there are the unordered () and ordered () elements.
Example:
<img src="cid:IMAGE_0.png" />
For calling the reader’s attention, there are the emphasis and strong tags. Emphasis italicizes the text while strong applies bold to the text.
Example:
<img src="cid:IMAGE_0.png" />
$$$
New HTML5 Semantic Content Sectioning Elements
In the past, web developers were forced to section their code by using the <div> </div> and <span> </span> elements, and then providing a class name so they could be selected with CSS. Now HTML5 has created Semantic Content Elements that come pre-named for easy use. It also serves to assist with search engines and screen readers.
<img src="cid:IMAGE_0.png" />
HTML5 includes elements for displaying video and playing audio content. This tutorial series has used the HTML5 video element frequently.
Example:
<img src="cid:IMAGE_0.png" />
There are so many useful elements and tags that can be leveraged in HTML5. We encourage you to read more about them.
$$$
^G^ SUBMODULE C. Implementing Essential HTML Elements
<Template-blank>
Relative vs. Absolute Paths
In HTML and CSS the path of any given resource may be specified as either its absolute or relative path.
As a very simple example to demonstrate the use of relative paths, suppose you have a website called ilovejavascript.com, and your server has the folder structure shown below:
<img src="cid:IMAGE_0.jpg" />
Folder 1 has a sub-folder, Folder 2, which has a sub-folder, Folder 3. If you were coding index.html, which is in Folder 2, and you needed to reference styleSheet.css in the link tag, you would use the following code:
<link href="../Folder 1/styleSheet.css" rel="stylesheet">
The “../” notation is an instruction to go up one level in the folder structure. To request the scripts.js file in a scripts tag, you would use the following code:
<script src = “./Folder 3/scripts.js”></ script>
This is an instruction to start in the current folder (“./”), then go to Folder 3, then retrieve the file called scripts.js.
As another example, if you were linking to about.html using an anchor tag, you would use the following code:
<a href = “./about.html”>About</ a>
This instruction can be read as “start in current folder (./) then retrieve about.html.” So, relative paths refer to files using the folder structure between the file that is making the reference or request and the file that is being referenced or requested. Relative paths do not include any URLs.
If you were using an absolute path instead, you would use its URL to locate it. For example, you could use the following code to reference the scripts.js file from Folder 2/index.html:
<script src = “https://ilovejavascript.com/{Folder_3}/scripts.js”></ script>
Folder 3 is in brackets to highlight an important point — since you’re referencing a resource in another folder and using a URL, the folder name has to comply with a valid URL name. Unfortunately, since URLs cannot have spaces in them, “Folder 3” would make the URL invalid. The obvious workaround is to use an underscore; Folder_3.
$$$
Knowledge Check
^^True or false? Using the new semantic HTML5 tags, developers may section code with more descriptive tag names without having to use classes or IDs.
##True CORRECT
##False
$$$
^G^ MODULE 5.  Creating a Basic Website
^G^ Learning objectives:
%%^G^ Link HTML pages together
%%^G^ Produce a functioning website
SUBMODULE A. Create Multiple HTML Pages
^G^ <Template-blank>
Watch this video in full:
VIDEO~~Using the Anchor Element~~https://ttamediaservices-uswe.streaming.media.azure.net/076043ea-8692-4319-9ce0-50f631982b75/Basic%20HTML_CSS_Series_Anchor%20tag.mp4
$$$
Knowledge Check
True or false? A div tag cannot be wrapped by an anchor tag.
False
$$$
^G^ SUBMODULE B. Linking HTML Pages
Watch this video in full:
VIDEO~~Using the Image Element~~https://ttamediaservices-uswe.streaming.media.azure.net/abb2476a-83d6-4b77-8b2b-4c9c1fdb7d09/Basic%20HTML_CSS%20Series_IMG%20tag.mp4
$$$
Knowledge Check
^^Assuming the links and paths are correct, which of the following pieces of code will fail to display properly?
##<img src="cellphone.jpg" alt="Image of cell-phone">
##<img url="https://via.placeholder.com/150/0000FF" alt="Placeholder"> CORRECT
##<img src="https://via.placeholder.com/150/0000FF" alt="Placeholder">
##<img src="https://via.placeholder.com/150/0000FF" alt="Placeholder" style=”border: 1px solid black”>
$$$
Watch this video in full:
VIDEO~~How to Link Our HTML Pages Together Part 1~~https://ttamediaservices-uswe.streaming.media.azure.net/d0ca85ea-8ea3-4700-8627-8a7ffa3254c1/linkingHTML_pt1.mp4
$$$
Knowledge Check
^^Which of the following will yield a result that is different from the other two?
##<img src="cid:IMAGE_0.png" />
##<img src="cid:IMAGE_0.png" />
##<img src="cid:IMAGE_0.png" />
##All will have the same result. CORRECT
$$$
^G^ SUBMODULE C. A Preview of Cascading Style Sheets (CSS)
Watch this video in full:
VIDEO~~How to Link Our HTML Pages Together Part 2~~https://ttamediaservices-uswe.streaming.media.azure.net/d4ed0419-a7af-4c3a-8cae-55e3c3afacce/linkingHTML_pt2.mp4
$$$
Knowledge Check
^^True or false? Specifying a background color for the body element will result in all elements nested inside it to also have the same property, even if the inside elements specify a different background color.
##False CORRECT
##True
$$$
Watch this video in full:
VIDEO~~How to Link Our HTML Pages Together Part 3~~https://ttamediaservices-uswe.streaming.media.azure.net/62ca9237-893a-45b9-9f5f-630283712097/linkingHTML_pt3.mp4
$$$
Knowledge Check
^^The goal is to set the font color of all text in the div with class name “container” to red. Which of the following CSS codes is incorrect?
##None of the above. They are all correct. CORRECT
##<img src="cid:IMAGE_0.png" />
##<img src="cid:IMAGE_0.png" />
##<img src="cid:IMAGE_0.png" />
$$$
Planning and Executing a Web Application
As covered earlier in your training, it’s important to take the time to organize your thoughts and decide on the important elements of your project before starting to code.
Earlier we mentioned that to visualize logical workflows, you should use a flowchart. However, for web pages a different tool can be used. Web pages aren’t technically computer programs — they are instead precisely formatted electronic documents that are meant to be consumed (utilized) by an actual computer program: the web browser.
Essentially, a website is a collection of interlinked electronic documents. In creating a website, your planning should include two major elements:
~~The overall structure of the collection — that is, which pages connect to other pages; and
~~The graphical layout of each page
A common tool used to present these elements is a “website wireframe.” This is a visual guide that represents the skeletal form of a website, including page layout, navigation inside and between pages, etc.
There are many tools available for creating website wireframes. To begin, though, simple pencil and paper or typing it out should suffice. Later, you can try some other tools to see what works best for you. You can find these online by searching “website wireframe tool” or similar.
The point is: know what you’re intending to do before taking action. As the saying goes, “Weeks of coding can save you hours of planning.”
In the next assignment you’ll be coding a website yourself. You will be given basic guidance on how to plan and build the site. Some of the site will require you to come up with your own ideas, and some of it will be dictated for you so the site can be used in later drills in the CSS portion of this course and in the JavaScript course.
Later in your program you will create a portfolio website to display your work as a developer, so for this assignment, do not spend an excessive amount of time on the project. Work as quickly as you can and don’t get caught up in too many details; this is not the website you’ll be using as a developer.
$$$
One-Page Site
In the interest of keeping this HTML assignment short, you will create a one-page website – a homepage with a form for user input that presents an “account creation” page. Later, you will add functionality to this page as part of your training in JavaScript.
The purpose of this assignment is:
1)     To learn to plan a basic coding project.
2)     To gain further experience in writing HTML code.
Background For The Project
You are a web developer and you have been given the following rough requirements for the design of a web page:
The page is intended to be an “Account Creation” page for a site that lets people view photos.
The page you create should have some content that describes the site, and should have a form that allows a user to enter in data needed to create an account for them.
The minimum data the user will need to enter in order to create an account is:
^^First and Last name
^^Email address
^^Preference for the type of photos they like to see. The available types are:
##Space photos
##Sports photos
##Wildlife photos
##Plant photos
This means that your form must contain inputs for this data. You can include other inputs if you wish, but you have to allow for this data at a minimum.
$$$
Assignment
Create a sketch of your page. It should include, at a minimum, these elements:
^^General page info
^^The account creation form
^^A footer
You can have other elements to the page if you wish; it must have these elements, however.
During your planning of this page, try to account for using the following HTML tags. If you don’t understand any of the following tags, research them online:
a.      <h> tag
b.      <p> tag
c.      <em> tag
d.      <a> tag
e.       tag
f.        tag
g.       tag
h.      <div> tag
i.       <img> tag
j.       <hr> tag
k.      <blockquote> tag
m.     <meta> tag
n.      <input> tag
Send a photo of your sketch to your Instructor.
$$$
Assignment (Continued)
Following your plan, create a basic one-page HTML website that includes the data and form from the first part of the assignment, and which makes use of the HTML tags mentioned in the first part of the assignment (at a minimum; you will of course have other tags).
IMPORTANT NOTE: Keep all of your files and code because you will be enhancing your site with CSS and JavaScript later on in the program.
Push the HTML code from your website to your GitHub account and send the GitHub link containing all your HTML code to your Instructor.
86. <Final Exam>
Final Exam
^^     Assuming the links and paths are correct, which of the following pieces of code will fail to display properly?
##   <img url="https://via.placeholder.com/150/0000FF" alt="Placeholder">
CORRECT
##<img src="cellphone.jpg" alt="Image
of cell-phone">
##<img src="https://via.placeholder.com/150/0000FF" alt="Placeholder">
##<img src="https://via.placeholder.com/150/0000FF" alt="Placeholder" style=”border: 1px solid black”>
^^True or false? Specifying a background color for the body element will result in all elements nested inside it to also have the same property, even if the inside elements specify a different background color.
##False CORRECT
##True
^^An unordered list, or a  element, is employed to randomize a list each time the page is loaded. True or false?
##False CORRECT
##True
^^All divs, by default, are inline elements unless otherwise specified in the display property. True or false?
##False CORRECT
##True
^^  In HTML5, the built-in nav and footer tags can be used to replace div tags with class names “wrap” and “footer.” True or false?
##True CORRECT
##False
^^In form elements, what does the action attribute defines?
##The HTTP request type or action verb
##The server-side script that will handle the form input CORRECT
##A description of the form that is only visible to developers
##All of the above
^^Two spaces (keystrokes of the spacebar) are equivalent to “&nbsp;&nbsp;” in the HTML document. True or false?
##False CORRECT
##True
^^Implementing a font stack allows the end-user to select a font family from the stack. True
or false?
##False CORRECT
##True
^^   It is considered best practice to use HTML as much as possible to style a web page; CSS should be used sparingly.  True or false?
##False CORRECT
##True
^^  What does AJAX stand for?
##Asynchronous JavaScript and XML CORRECT
##Asynchronous jQuery and XNOR gate
##Action JavaScript Auxiliary
##Auxiliary jQuery And XOR gate
^^  What does XHR stand for?
## XML Http Request CORRECT
##XHTML Https Reset
##XML HTML Recertification
##XHTML Htm Readjustment
^^  What does DOM stand for?
##Delimiting Oscillation Modal
##Document Object Model CORRECT
##Documentation Operating Metadata
##Distinguishing Orientation Marker
^^  Which one of the following encoding systems is the most-utilized
in HTML documents?
##UTF-16
##ASCII
##UTF-8 CORRECT
##JPEG
^^  True or false? An encoding system is a standardized digital instruction set or mapping, from an input signal to a machine readable form.
##True CORRECT
##False
^^  Which one of the following is an element?
##<p>This is a paragraph.</p> CORRECT
##<p>
##</p>
##This is a paragraph.
^^ Which of the following is the correct definition for “script” in HTML?
##A script is a separate program/collection of code than the HTML document you are writing. CORRECT
##A script is a series of code that interacts with the user through other programs.
##A script is a long written document consisting of a story, usually with dialogue and separate scenes.
##A script is a separate program that utilizes the background data of HTML to write code for your website.
^^Which of the following statements is correct?
##All of the above are true CORRECT
##The CSS file does not have to be located in the same directory as the HTML file
##Notepad++ is an IDE
##There can only be one body element — otherwise the page will not load and display properly
^^Which of the following statements is/are correct?
## All of the above are correct CORRECT
##An anchor tag may be used to link to a sub-section within the same HTML document
##An anchor tag may be given a class or ID for CSS targeting
##An  anchor tag may be used to link to an HTML file or other resource located on a different server
^^Which of the following software may be used to compose HTML code?
##All of the above CORRECT
##Visual Studio Code
##Notepad++
##Windows Notepad
^^True or false? A div tag cannot be wrapped by an anchor tag.
##False CORRECT
##True
