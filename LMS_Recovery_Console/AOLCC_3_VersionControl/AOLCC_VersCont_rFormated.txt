Module~1~An Introduction to Version Control.
OBJECTIVE~Learning Objectives:~Describe basic version control terms~Explain what version control systems are~Differentiate Git and GitHub
Submodule~A~Course Overview.
LESSON~Estimated Course Completion Time:~24 hours of study
LESSON~Instructions:~Tech Academy courses are designed on an increasing gradient of difficulty, with easier concepts placed toward the beginning and advanced concepts at the end. Later steps assume the student has completed all prior steps. Courses sometimes refer back to earlier content. The courses must be done in sequence, with each step fully completed before moving on to the next. Please do not skip around on courses.
LESSON~Purpose of This Course:~Keeping track of the various stages of a software program as it is created is vital, if only so that if you find that you’re taking the wrong approach to a programming task, you will want a way to get rid of the changes you made by reverting to an earlier version so you can go back to before you tried that approach. Version control allows this, as well as other valuable actions related to managing the sometimes lengthy and complex process of making software.~The purpose of this course is to teach students the basics of version control. It is a vital tool for software developers, particularly when they’re involved in a coding project that includes multiple developers. The ability to utilize version control is a skill that every developer must have and you will obtain that skill on this course.
QUESTION~Knowledge Check #1~Which one of the following points is not an attribute of version control?~Upload code to a server~Keep track of the various stages of software development~Get rid of changes made to software and revert to an earlier version~Manage code with multiple developers
LESSON~Source code: The set of computer instructions that make up a computer program, in such a form that a computer programmer can modify the instructions.~Source code is the version of a computer program as it is originally written (i.e., typed into a computer in a programming language) by the designer of the program. Normally, when the programmer is done making the program, he has the computer convert the code he wrote the program in (the “source code”) to another format that is easier and faster for the computer to use. In that new format, the program can't be easily understood by people – but it is very useful to the computer. It also can't be modified by other developers at that point.~Example: Open-source software means developers can access and customize the source code of the software.
LESSON~Version Control: Also called source control or revision control. Version control is the tools and processes that are used to manage multiple versions of computer files as the files change over time.~A version control system, or VCS, provides two primary data management capabilities. It allows users to 1) lock files so they can only be edited by one person at a time, and 2) track changes to files.~When you create things using your computer you often revise them over time. This can mean the creation of documents, graphic images, computer programs and other items. Keeping track of the changes to these items over time is called “version control." It also includes the control of changes to items like this when more than one person can make changes to the items.~A version is an exact snapshot of something at a specific point in time. If you wrote a song, that would be Version 1. If you later added bagpipes over the top of the song, that would be Version 2. Version control is managing different versions of things on a computer. This is used a lot when you are creating computer programs.~Example: If a team of writers were preparing a large textbook, and each writer could add, edit and remove content to the textbook at any time, they would find a version control system valuable to keep track of all changes as the textbook was written.
Submodule~B~An Introduction to Git and GitHub.
LESSON~Git: A specific example of version control. Git is a popular version control system. You can use Git to manage the versions of your computer programs and work on programs in conjunction with other developers.~Git is itself a computer program. A computer programmer can install the Git program on their computers, and then use that program while creating software and websites.~Example: Git is free software, and is used by millions of computer programmers around the world.
LESSON~GitHub: GitHub is a popular web site owned by Microsoft. It can be used to store source code, accomplish version control on that source code, track defects in that source code and manage work tasks for the computer programmers working on that source code.~Example: As of 2018, GitHub was the largest host of source code in the world.
QUESTION~Knowledge Check #2~“Source control,” “revision control” and “version control” do not mean the same thing.~False~True
Submodule~C~Welcome to the Course.
LESSON~Watch this video in full:~Welcome to the Course!
VIDEO~Welcome to the Course!~https://ttamediaservices-uswe.streaming.media.azure.net/612bb07c-1b36-4a3d-8824-f8c0862a6909/Introduction%20to%20The%20Version%20Control%20Course.mp4
QUESTION~Knowledge Check #3~Which one of the following terms best filled the blank?: _____ is tools and software that are used to monitor and manage the various versions of electronic files, as they’re being worked on.~Version control~Registry~SQL~Command line
LESSON~Software suite: A collection of computer programs that typically perform similar functions. These computer programs usually share a similar user interface.~Example: One of the most popular software suites is Microsoft Office 365. It includes several programs, including Word and Excel.
LESSON~Repository: A main location where data can be kept and handled.~A repository is the central location where code for a particular program is stored.~Example: There are online repositories to store one’s code.
LESSON~Project: An undertaking that typically has exact requirements and specifications. Projects are usually created following a plan.~Within code editors (programs that developers use to write their code) websites and programs are typically saved as projects.~Example: If you were creating a portfolio website to showcase your accomplishments as a developer, the code for this site would be referred to as, and saved as, a project.
LESSON~Branch: A duplication of code or a portion of it, so that changes can be made to it without affecting the original code.~The purpose of branching is to allow a developer to edit a copy of the code without affecting the original code. Typically the developer later “merges” the branch – which means they integrate their edited code back into the original code.~This is as opposed to simply editing the original version of the code.~One of the benefits of branching is that it allows one to explore a different approach to solving a computing problem through writing code, while not stopping development work on the original code.~Example: If a developer wanted to explore an alternate method for sorting a large collection of financial records, they could create a branch of the original code and work on that alternative sorting approach while they, or other developers, continued to do other work on the original code. Then, when they had perfected the new approach to sorting the data, they could merge the changes they made back into the original code, which now had additional functions due to the continued work on that original code.
QUESTION~Knowledge Check #4~GitHub has repositories.~True~False
Submodule~D~A Primer to Version Control Systems.
LESSON~Version Control Systems~On this course you will learn about various Version Control Systems (VCSs).~A VCS is a specialized software suite that is used to maintain and track multiple versions of project files, also known as "source control" or "revision control.”~VCSs consists of a repository where all of the project files are stored. This repository may be stored on the user’s hard drive. Whenever this is so, these files are considered to be on a “LOCAL” repository. The original project files that are stored on another server’s hard drive (such as online storage) so that others can also access the files are considered to be on a “REMOTE” repository.
LESSON~Version Control Systems~While a team of developers are working on a project together, it is important that no two team members are editing the same content at the same time. If this happens, it is possible for one person to accidentally overwrite the changes made by someone else. For this reason, version control allows users to "check out" files for editing.~When a file has been checked out from a shared file server, it cannot be edited by other users. When the developer finishes editing the file, he can save the changes and "check in" the file, effectively releasing that file so that other team members can edit the file once more.
LESSON~Version Control Systems~A typical business scenario for a team of developers working together on a particular project would be for the main project files, known as “MASTER” repository files to be cloned (copied) to a developer’s local hard drive so that they may work with these files whether they are connected to the remote hard drive or not. Before a developer will make any changes to their copied files, they typically will make a new “BRANCH” of all the copied files in the local repository.~This creates all new versions of the original copied repository files. Essentially, these may be thought of as new instances of the files. Developers make new branches of the project files so that any new changes are not actually affecting the original state of these files on the original branch. The original branch containing the original master file is referred to as the “Master Branch” while any additional branches are considered, “Sub Branches”.
LESSON~Version Control Systems~After the developer has created a sub-branch which is named uniquely from the master branch to ensure differentially, the files may be altered and improved. In a version control system, each file in the local repository will have an associated file history attached to it. This history is updated with a short description and timestamp each and every time the file undergoes changes in which the developer has committed these changes to their local repository. If the developer feels there are mistakes in a particular file, they may pick a save point on the file’s history timeline and revert this file back to the condition as it was at that exact moment of time.
LESSON~A file on one particular branch may be modified and thus it will contain different data than that very same file on another branch since they are no longer on the same plane of reality. Think about those popular science fiction novels or films concerning time travel. The time traveler may have gone back to a special point in time and made an alteration but the new future is not the previous future to the time traveler anymore as there was a new branch in time generated as soon as the time traveler had made their alteration in the timeline. Every successive change they may make will also make new branches in their reality accordingly.~Luckily for developers, the VCS software will remember each and every change for them and associate a brief but concise description, explaining each change made so that all the developer has to do is read through these brief descriptions to help them determine the point in time they would like to revert the file back to.
QUESTION~Knowledge Check #5~What is the difference between “local” and “remote” repositories?~“Local” refers to files stored on your hard drive, whereas “remote” refers to files stored elsewhere.~“Remote” refers to files stored on your hard drive, whereas “local” refers to files stored elsewhere.
Module~2~n/a
OBJECTIVE~Learning Objectives:~Describe the uses of version control~Explain the fundamentals of the Linux operating system and its history
Submodule~A~Basic Terminology
LESSON~Check in/out: "Checking in" code refers to adding the changes you made to a set of computer code into the code that is being managed by a version control system.~Conversely, "checking out" code mean marking a certain part of the code that is being managed by a version control as being subject to modification. That section of code can then be managed by the version control system in such a manner that the system acts to prevent conflicts that could be caused if another person wanted to work on that exact same section of code simultaneously to your work on it.~Checking in is sometimes referred to as “committing” code.~Example: If you were working wit/h a team of two other developers on a computer program that tracked the students in a school, and you wanted to work on the part of the code that calculated grade point averages, you might "check out" that section of code. The version control system would then mark that section of code in some way, and could notify the other two developers that the section of code has been checked out should they attempt to change it.
LESSON~Network backbone: A backbone is a part of computer network that interconnects various pieces of network, providing a path for the exchange of information between different subnetworks.~This is part of a computer network that connects various sections of the network. It provides a path for information exchange between the various networks integrated into it.~It is essentially a "senior" network containing a high capacity connection that forms the main link to various "junior" networks.~Example: If several offices were connected to a network, the network backbone would be the main link connecting all of the offices. If this connection was a wireless connection, one would say, “Our company uses a wireless network backbone.”
LESSON~Overhead: The cost associated with something.~In computers, overheads refers to the amount of work required of the computer to perform an action (such as running certain software). Overhead includes how much bandwidth is utilized, how much processing power is required, the amount of memory is taken up, etc. by a particular website, program, etc.~Example: In running a business, overhead includes rent cost, marketing expenses and payroll.~Software-wise, Microsoft Word takes more overhead than Notepad.
LESSON~Iteration: To iterate means to say or do something again; to repeat something. An iteration is the act of repeating. Iteration means to go through a defined series of actions, repeating a certain number of times. Usually this defined series of actions is repeated a certain number of times, or until a condition is met.~Example: Computer programs are usually created in iterations: Coming up with a basic working version, reviewing the program for mistakes to correct and improvements to make, doing that work, and repeating. This can be continued indefinitely.
LESSON~Shell: A type of program that provides a user interface between the user and the operating system. You can use the shell to locate files, start and stop other programs, etc.~Some shells provide a graphical interface, where visual objects on the screen are used to represent the files and programs on the computer. Other shells provide a text-only interface.~Example: You might use a shell to look at all the files in one section of your computer.
QUESTION~Knowledge Check #6~Checking in code and committing code mean different things.~False~True
Submodule~B~The Uses of Version Control.
LESSON~The Uses of Version Control~Sometimes it is beneficial to save different versions of the same document.~Anyone familiar with Microsoft Word has probably seen or been involved in document names such as CollegeEssay_1.docx or CollegeEssay_2.docx or Essay15FINALVERSION.docx.~When you get into software development, where there may be hundreds or thousands of changes in a software’s lifecycle (the creative process of software from start to finish – planning, development, testing, etc.), this quickly becomes unsustainable.~A Version Control System (VCS) solves this problem, among many others.
LESSON~Version Control Systems~A VCS doesn’t work by saving complete copies of each new version: it works by saving only the changes. This is useful for getting the latest version of a document, as well as getting any version in the document’s history.~Software developers often have the need to revert a program’s code to the “last working version.” Comparing this “working version” to the current “broken” version makes bug-fixing easier.
LESSON~Version Control Systems~A Version Control System also makes team development possible, even with remote team members. With a centralized “repository” of document changes, developers can easily download the “latest” version and edit it. Once done, they just “check it in” to this main repository for the other team members to view and edit.~Of course, having two developers work on the same document can cause problems. Version Control Systems utilize two distinct methods for enabling this type of collaboration. The first solution is to enable a developer to “lock” a file being edited. In other words, while the file is being edited, no other team member can edit it. Others can download it and view it, but none can make changes.
LESSON~Version Control Systems~The obvious problem with this solution is it slows development. Some programs have one file that is bigger and heavier trafficked than others. To stop production while one developer edits it seems a waste. Also, as has happened, what if the developer forgets to unlock the file or takes a long weekend?~This is solved by the copy-modify-merge method. Any number of developers can download a file and edit it. When sending the edited file back to the server, the server checks if the file being sent is “up-to-date” with any changes that were sent before it. If it’s “out-of-date”, the server shows the developer which changes were made and forces the developer to integrate those changes into the current document. Usually developers aren’t working on the same portion of the same document, so these are typically easy to integrate.~The VCS known as Git, utilized through the Github interface, follows the copy-modify-merge method and has made it possible for software development to occur amongst hundreds of developers simultaneously. It has opened the door to “open-source software development” projects that have helped revolutionize the world of technology.
QUESTION~Knowledge Check #7~Which of the following does version control make copies of?~Only the changes that were made~Complete copies of each version
Submodule~C~Working with the Linux Operating System.
LESSON~Watch this video in full:~Linux
VIDEO~Linux~https://ttamediaservices-uswe.streaming.media.azure.net/8ce74c80-1e03-4548-975e-2968ced8a318/linux.mp4
QUESTION~Knowledge Check #8~What does GNU stand for?~GNU's Not Unix~Git Not Unix~GitHub Not Unix~Graphics Not Unix
LESSON~A Note About The Videos In This Course:~On the Computer and Technology Basics Course and Overview of Software Development Course, Erik Gross (Co-Founder of The Tech Academy) acted as the Instructor in most of the videos - covering topics contained in scripts written by Jack Stanley (the other Co-Founder of The Tech Academy) and him.~On this course, Daniel Christie is the Instructor in the videos. All of the videos on this course follow scripts written by Jack Stanley and Erik Gross, the authors of The Tech Academy’s curriculum. Daniel is an experienced developer, a graduate of the Software Developer Boot Camp, and a long-time Tech Academy employee. Enjoy!
=
Module~3~n/a
OBJECTIVE~Learning Objectives:~Explain the fundamentals of version control systems~Describe Git

~Install Git~Write basic Git commands
Submodule~A~Different Types of Version Control Systems
VIDEO~Version Control Systems Animated~https://ttamediaservices-uswe.streaming.media.azure.net/5495fc8e-dd91-4eae-ae88-3cd59c21a23d/1_Intro%20to%20VCS.mp4
QUESTION~Knowledge Check #9~What is the difference between a centralized vs distributed VCS?~A centralized VCS has one master repository, whereas as a distributed VCS is housed on developers’ local hard drives~A distributed VCS has one master repository, whereas as a centralized VCS is housed on developers’ local hard drives
LESSON~Git and GitHub~Unix is an open-source and extremely popular operating system created in the early 1970s by the technology company AT&T.~GIT is a Unix-based version control system software that uses special commands typed into a command line module. GIT provides the tools necessary for the developer to manage local repository of files on their local hard drive.~GitHub is a file repository hosting service that provides tools to share project files with other registered members of the community. GitHub also provides automated solutions to assist with file versions being committed by several users occurring at the same time.~The GitHub Desktop Application is a version control system that bridges the gap between the tools already built-in to the GitHub website and provides the user with a visual solution to easily manage their repository files on both their local hard drive and the remote GitHub server.
LESSON~Bash~Bash is short for “Bourne Again SHell.”  A command-line user interface for Unix.~A command language is a programming language made up mostly of commands that are mainly used for communicating with operating system of a computer. Bash is a shell and a command language. Users can type commands that cause actions in the bash.
QUESTION~Knowledge Check #10~Which one of the following points is a benefit of the GitHub Desktop Application?~It allows users to manage their repository files on both their hard drive and the remote GitHub server~It is easier to use than Git~It installs faster than Git and takes up less storage space on your hard drive~It is the most robust version control system in existence
LESSON~Watch this video in full:~Understanding VCS Basics
VIDEO~Understanding VCS Basics~https://ttamediaservices-uswe.streaming.media.azure.net/46e208ef-a068-4ad9-b0d3-eadadde9117d/2_Understanding%20VCS%20Concepts.mp4
QUESTION~Knowledge Check #11~Which one of the following terms is defined as: “The current state of locally stored project files not yet added to the master repository.”~Working set~Repository~Commit~Add~u don’t have to have an external monitor - this is just an example.
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Installing Git
VIDEO~Install Git for Windows~https://ttamediaservices-uswe.streaming.media.azure.net/2c6b8846-39de-4de0-ae6c-1d0426a81240/Install%20Git%20for%20Windows.mp4
=
SubModule~C~Becoming Familiar with Git Terminology
LESSON~Directory: A directory is something (such as a book) which contains listings of information in an organized manner.~Technically, a folder and directory are the same thing. The only difference is that folder refers to a visual representation of a directory. Meaning, folders are icons representing a directory in the computer.~Example: Your written documents could be stored in one directory while your pictures could be stored in another.~The root directory is the first or top directory in your computer. The root directory for Windows is: C:/Windows
LESSON~OneDrive: A service provided by Microsoft for storing files online.~Example: You could back up your hard drive on OneDrive and share the data with other people.
LESSON~INI file format: “INI” is short for initialization. INI files are used by the Windows operating system, typically to lay out operating instructions for the OS and some programs.~Example: Usually the instructions to the computer that enables the use of a mouse are stored .ini files.
LESSON~.docx file format. “Docx” is short for “document XML.” XML is extensible markup language. This means that developer can create their own document structure, and then use XML to specify markup instructions for the data in those documents. Tags are the markup language words that usually has two parts, a start tag and an end tag. They have these symbols before and after them: < and >.  XML is similar to HTML except that the code itself can be customized (i.e. the developer can create their own tags).~The .docx file format is what Microsoft Word documents are typically saved as (previously, Word used .doc).~Example: If you attempted to open a .docx file in a program that doesn’t support Word document formats, you would either get an error message or a scrambled document.
LESSON~Touch: A command-line interface program for Unix that is used to update date information - such as: changing the date that a file or directory was modified or accessed. Touch can also be used to create or open a file.~Example: You could type “touch dogstory.docx” in the Git command line to create a blank Microsoft Word document entitled “dogstory.”
LESSON~Tilde: The <!!!> symbol. Pronounced “tilda.”~Example: The tilde is placed over certain letters in some Spanish words as an accent, such as the word: señor.
LESSON~Command-line option: A command-line option or simply option (also known as a flag or switch) modifies the operation of a command; the effect is determined by the command's program. In many CLIs, these options are written by typing a hyphen, followed by the desired option (or switch).~Example: the command "ls" tells the computer to list the files in the current directory. Adding the switch "-lS" will modify the command so that the list of files is sorted from largest file size to smallest. That command and switch would look like this:~ls -lS
QUESTION~Knowledge Check #12~Folder and directory mean virtually the same thing~True~False
Submodule~D~Getting To Know Git Bash
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Working with Git and Bash Part One
VIDEO~Learning to Use Git pt1~https://ttamediaservices-uswe.streaming.media.azure.net/c83e49ca-cc3c-44cc-a731-d9841962f0f3/Learning%20to%20Use%20Git_pt1.mp4
QUESTION~Knowledge Check #13~Which of the following commands do you type to list a directory?~ls~list_dir~ldir~ld
LESSON~Working directory: Also called “current working directory (CWD),” “current directory” and “working tree.” The directory you are currently working in as a developer.~Example: In the following file path, the working directory would be “Docs”:~C:WindowsDocsLetter.docx
LESSON~Staging: The step prior to the commit process in Git. A staged file means that you have marked the file to be included in your next commit. Staging is basically a loading dock where you can determine which changes you will commit. You can perform actions in the staging area, such as temporarily storing your changes.~Example: The following diagram shows the staging area:~<Template-Quiz>
Module~4~n/a
OBJECTIVE~Learning Objectives:~Utilize the Git bash~Create branches in Git~Merge branches in Git~Utilize Git Hub
Submodule~A~Using Git And The Bash  
LESSON~Parse: To break something up into its parts and analyze it. In computing, it means that the program code is analyzed and read.~Example: If you write code for a web site, the web server parses the code and then outputs the correct HTML code to the browser.~Parsing can also refer to breaking up ordinary text. For Example: Search engines typically parse search phrases entered by users so that they can more accurately search for each word.
QUESTION~Knowledge Check #14~What is the working directory in the following file path?:~Users~C:~Code.txt
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Working with Git and Bash Part Two
QUESTION~Knowledge Check #15~What does the “clear” command do?
LESSON~Case-sensitive: This refers to a programming language where capital and lowercase letters affect the syntax. Some languages allow you to write code no attention given to capitalization or lowercase letters, while others won’t operate unless you write the code exactly.~Example: Python is a case-sensitive programming language.~In Python, the following code would print Hello, World! on the screen (note: the only “code” in the following line would be print() - the text within the quotation marks is not code):~print(“Hello, World!”)~But if you wrote your code as follows, there would be a syntax error and the text wouldn’t be displayed. This is because, in Python, the print command does not begin with a capital P:~Print(“Hello, World!”)
Submodule~B~Branching.
LESSON~When you use the command, "git init", the current location within your file system will be assigned as a local git repository. So you will want to be sure to use this command with a project folder you have created specifically for your project files.~If you have created and initialized the "myResume" project folder while you were following along with this tutorial series. (Step 60 at about 3:34) Then this is your project folder.~In this video, we will create and initialize another Git project folder and named it "myProjects" just as a review. You should not actually need to create and initialize multiple folders as local Git repositories, this was just a review so that you would have more practice with the process.~We realize that you have not had much practice yet using Git so it is perfectly understandable if you are still a little confused. Please discuss this with your instructor if you are still feeling a little confused about what Git repositories are or need a little assistance navigating to your Git initialized folder.
LESSON~Watch the following video:~Working with Git and Bash Part 3
VIDEO~Working with Git and Bash Part 3~https://ttamediaservices-uswe.streaming.media.azure.net/982de5c2-cbe2-449c-b29f-fb55952d4b3d/Learning%20to%20Use%20Git_pt2.mp4
QUESTION~Knowledge Check #16~Git is case sensitive~False
LESSON~Hash: An operation that converts one value to another. It is usually used to mask data with different data.~Example: The original file name could be orangepants.docx and the hash could be absdfmoijgfsdnsadf. Both would point to the file.
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Branches
QUESTION~Knowledge Check #17~What does the git log command do~Commits code to the git log~Change the master repository~Delete a file
Submodule~C~Merging.
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Merging
VIDEO~Learning to Use Git Part 4~https://ttamediaservices-uswe.streaming.media.azure.net/2b08f51b-05bb-46e6-984c-83c7fe240083/Learning%20to%20Use%20Git_pt4.mp4
QUESTION~Knowledge Check #18~What does the git checkout command do?~Switch branches or restore working tree files~Remove a branch from the repository~Clear the entire repository~Create a new branch


LESSON~Best Practices~“Imperative” means “relating to a command or a request.” Imperative mood refers to a verb (word describing action or state of being) which gives a command or makes a request.~In the sentence: carry the wood to the pile, “carry” is given in an imperative mood. But if we said: I am carrying the wood to the pile, “carrying” would not be in an imperative mood.~It is recommended that commit messages are written with an imperative mood and with explanatory text.~For example, the following would be a good commit message: “Fix bug.” “Fixes bug” or “fixed bugs" would not be.~Writing clear commit messages in the imperative mood is considered the best practice because it matches up with commit message generated by commands like git merge and git revert.
QUESTION~Knowledge Check #19~Which one of the following commit messages is written according to what is considered best practice?:~Correct typo~Correcting typo~Correction typo
Submodule~D~Using Git Hub.
LESSON~GitHub~Later on in the program, you will be adding various code and projects to GitHub, which is why the Version Control Course comes before the main coding courses on the program.~One of the primary benefits of maintaining a GitHub profile is to create a sort of development portfolio for yourself that other developers and potential employers can view. Though it’s not common, some Tech Academy graduates have even been offered employment opportunities by people who happened upon their GitHub profile. It is wise to list one’s GitHub profile on their résumé.
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Creating Your GitHub Account
VIDEO~Using Git with GitHub Part 2~https://ttamediaservices-uswe.streaming.media.azure.net/eb92627b-5ae0-46ea-8f7c-b08ac9e7bdc0/Using%20Git_with_GitHub_pt2.mp4
LESSON~ASSIGNMENT:~Provide an Instructor with the link to your personal GitHub account.~To send in your assignment, you can use the message system within this LMS, or email an Instructor at:~Tech Academy students:                instructor@learncodinganywhere.com~Concordia University students:         concordiaprofessor@learncodinganywhere.com~Academy of Learning students:         academyoflearncoding@learncodinganywhere.com
VIDEO~Provide an Instructor with the link to your personal GitHub account.~https://ttamediaservices-uswe.streaming.media.azure.net/72c7dd42-df4e-434c-9c40-5e17a0dd4686/Setup_your_GitHub_Account.mp4
LESSON~Fork: A copy of a repository. You can fork a repository and make changes to it without affecting the original project. Forks are commonly used to recommend changes to projects belonging to someone else or to utilize someone else’s project as a starting point for your own.~Example: You can fork a repository on GitHub.
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Pushing to GitHub Part One
QUESTION~Knowledge Check #20~What does the git clone command do?
LESSON~Watch this video in full, following along with the Instructor and performing the same actions on your computer:~Installing the GitHub Desktop Application
QUESTION~Knowledge Check #21~How do you download a project from GitHub onto your local hard drive?~Clone the repository~Pull the repository
LESSON~Final Drill:~We are going to pretend that you work for a small software firm. The firm has written a piece of software using Small Basic and it currently has an error. Your company has requested that you make the appropriate correction.~You will need to fork the project files from the remote repository to your own GitHub account, clone the forked files onto your local hard drive, make your changes, commit your changes back up to your GitHub account, and create a pull request, which will effectively notify your employer that your changes are ready for review.~1.) Sign in or create your own personal GitHub profile.~Sign in to GitHub here~2.) From inside of your account profile, use the search field for and open the, “the-tech-academy/office_hours”, The Tech Academy’s GitHub repository.~3.) With the-tech-academy/office_hours repository open, click the “Fork” button and create a fork that will be attached to your own GitHub account.~4.Now that you have the fork of the project attached to your own profile, click on the “Clone or download” button.~6.) From GitHub’s Desktop application, enter the local directory where you would like to paste the cloned repository into.~7.) Navigate into the local directory of the repository you just created to begin editing the "officeHours.sb" file.~8.) Using the Microsoft’s Small Basic Editor or a text editor, open “officeHours.sb” and on line 24, there is a typo. It currently reflects “Office Hour” but Your company has requested that you change “Office Hour” to “Office Hours” so that it is plural.~9.) That’s it! Just be sure to commit your changes to your local repository so as to not lose any vital work.~10.) Now that you have committed your changes into your own local cloned repository, you next will need to push your changes back up to your forked remote repository on your GitHub profile.~11.) When all of your edits have been completed and pushed back up to your forked-remote repository, you will need to send your contributions to the original master branch of the “the-tech-academy/office_hours” repository. Select the “New Pull Request” button.~12.) Once you've created a pull request, you will effectively be making your changes available for the project leader to see and verify and ultimately accept or deny your proposed changes into the master branch. (Since this project is hypothetical, no one will actually be merging your changes)~13.) To complete the drill, copy your applicable GitHub link for the project into the box below and click submit.
VIDEO~4.Now that you have the fork of the project attached to your own profile, click on the “Clone or download” button.~https://github.com/login
QUESTION~Knowledge Check #22~Which ones of the following terms doesn’t mean the same thing as the rest?:~Directory control~Source control~Version control~Revision control
LESSON~ASSIGNMENT:~Write an essay that answers the following questions:~What benefits are there in understanding Git, GitHub and version control?~How can you use these tools as a software developer?
QUESTION~Knowledge Check #23~What does “VCS” stand for?~Version Control System~Visual Computer Software~Video Communication Systems~Version of Conveyance Software
QUESTION~Knowledge Check #24~Which one of the following terms best fill the blank?: ___ be used to store source code, accomplish version control on that source code, track defects in that source code and manage work tasks for the computer programmers working on that source code.~GitHub~Git~Source code~Database
QUESTION~Knowledge Check #25~Which one of the following terms properly fills the blank?: “Before a developer will make any changes to their copied files, they typically will make a new _____ of all the copied files in the local repository. This creates all new versions of the original copied repository files. Essentially, these may be thought of as new instances of the files. Developers make new _____es of the project files so that any new changes are not actually affecting the original state of these files on the original branch.~Branch~Source code~Instantiation~Repository
QUESTION~Knowledge Check #26~Which one of the following terms does not mean the same thing as the others?:~File control~Version control~Source control~Revision control
QUESTION~Knowledge Check #27~Which of the following is a version control tool that can ensure multiple developers don’t change the same code?~Lock the file being edited~Delete folders in the repository~Saving data~Checking in code
QUESTION~Knowledge Check #28~What does the .ini extension short for?~Initialization~Initial~Initialize~Initializing
QUESTION~Knowledge Check #29~How do you pronounce the symbol “~”?~Tilda~Tilday~Tildoe~Tildee
QUESTION~Knowledge Check #30~What does the command “cd” stand when entered in the command line?~Change directory~Compact disk~Channel directory~Compact directory
QUESTION~Knowledge Check #31~Which of the following commands creates a new directory?~mkdir~crdir~cd~md
QUESTION~Knowledge Check #32~Which one of the following terms means something different than the rest?~Branch~Working directory~CWD~Current directory~Working tree
QUESTION~Knowledge Check #33~What does the “clear” command do?~Clear the console screen of cluttered text~Go back one directory level~List a chart of support options
QUESTION~Knowledge Check #34~What does the “git init” command do?~Initializes or assigns a directory to now become a Git local repository~Displays the observed differences for a file~Removes the specified files to the Git staging area~Merges a branch
QUESTION~Knowledge Check #35~How do you move a file from the staging area to the repository so that changes are recorded?~git commit~git add~git status~git save
QUESTION~Knowledge Check #36~Which of the following commands is used to list all of the branches in your repository and tell you which branch you’re currently in?~git branch~git current~git list~git repo
QUESTION~Knowledge Check #37~What does the git checkout command do?~Switch branches or restore working tree files~Clear the entire repository~Create a new branch
QUESTION~Knowledge Check #38~Which one of the following commands joins two or more branches together?~git merge~git combine~git branch~git join
QUESTION~Knowledge Check #39~What does the git add command do?~Add file contents to the staging area~Add file contents to the directory~Add file contents to the repository~Add file contents to a branch
QUESTION~Knowledge Check #40~What does the git clone command do?~Clone a repository into a new directory~Make a copy of all files in a particular folder~Make a duplicate copy of the operating system
QUESTION~Knowledge Check #41~Which one of the following defines “fork”?~A copy of a repository.~Splitting documents into multiple parts.~A branch.~Transitioning into a new directory.
QUESTION~Knowledge Check #42~A folder named /.git would mean?~You have initialized the repository~You have yet to initialize the repository~Git has not been downloaded properly~You have a useless folder in your file tree
QUESTION~Knowledge Check #43~What does the git add -a command do?~Add the most recent changes to the staging area~Upload changes to Github~Overwrite all changes, which is irreversible~Upload changes to the live site
QUESTION~Knowledge Check #44~You have committed changes on your local machine. How would you then update the project on GitHub?~Push the changes~Pull the changes~Switch the changes~Transpose the changes
QUESTION~Knowledge Check #45~Using GitHub, how many developers can simultaneously work on a project?~Unlimited~0, Github is not designed for team projects~1~4
QUESTION~Knowledge Check #46~Which one of the following is the correct definition of “branch”?:~A duplication of code or a portion of it, so that changes can be made to it without affecting the original code.~A main location where data can be kept and handled.~An undertaking that typically has exact requirements and specifications.~A collection of computer programs that typically perform similar functions.
QUESTION~Knowledge Check #47~Which one of the following terms means something different than the rest?~Storage unit~Directory~Folder
QUESTION~Knowledge Check #48~What does the ls command do?~Lists a directory~Leaves off a file extension~Displays the language structure~Deletes a list from memory
QUESTION~Knowledge Check #49~How is the command “change directory” abbreviated?~cd~chdir~chd~changedir
QUESTION~Knowledge Check #50~What does the mkdir command do?~Creates a new directory~Marks a directive~Marks a file for deletion~Moves a directory to a new location
QUESTION~Knowledge Check #51~Working directory, CWD, current directory and working tree are interchangeable terms.~True~False
QUESTION~Knowledge Check #52~What does the git commit command do?~Moves a file from the staging area to the repository so that changes are recorded.~Pushes code to GitHub.~Moves a file into the staging area.~Creates a new directory.
QUESTION~Knowledge Check #53~What does the git merge command do?~Joins two or more branches together.~Merges changes into the repository.~Moves a file into the staging area.~Merges two directories together.
QUESTION~Knowledge Check #54~Which one of the following terms is defined as: “A copy of a repository.”~Fork~Merge~Directory~Folder
QUESTION~Knowledge Check #55~What is Version Control?~Version control is the tools and processes that are used to manage multiple versions of computer files as the files change over time.~Version control is any program used to update software.~Version control is the tools and processes that are used to test new software.~Version control is a method of debugging code within a project.
QUESTION~Knowledge Check #56~Git is a programming language.~False~True
QUESTION~Knowledge Check #57~What is the purpose of branching?~It allows one to explore a different approach to solving a computing problem through writing code while not stopping.~To create an open source repository for anyone to use with their own projects that is open to the public~To clone a repository.~It can connect to remote databases via git.
QUESTION~Knowledge Check #58~What is the primary branch of a repository called?~Master Branch~The First branch~VIP branch~Top Branch
QUESTION~Knowledge Check #59~Git status is a useful command that should be used frequently.~True~False
QUESTION~Knowledge Check #60~Git and Github utilize the copy-modify-merge method of version control systems.~True~False
QUESTION~Knowledge Check #61~Git is based on what operating system?~UNIX~Windows~MS-DOS~Ubuntu
QUESTION~Knowledge Check #62~What is the working directory?~The directory you are currently working in as a developer.~Your remote repository in git.~Any uncorrupt directory in the C drive.~The directory that handles most of the data flow between your repositories.
QUESTION~Knowledge Check #63~What is a staged file?~A committed file.~A file that has been pushed to your remote repository.~A file that could be corrupt and needs to be repaired.~A file that has been marked to be included in your next commit.
QUESTION~Knowledge Check #64~What is an untracked file in git?~Any files in your working directory that were not saved and are not in your staging area.~Any files that have been committed already and have no changes~Any files that are not inside any of your local repositories~Any files that are in the staging area
QUESTION~Knowledge Check #65~How should Git commit comments be formatted?~Present imperative mood~Past indicative~Present interrogative~Present conditional
QUESTION~Knowledge Check #66~Choose the proper Git commit comment:~Add update to nav bar styling~Added update to nav bar styling~Adding update to nav bar styling~This will add update to nav bar styling
QUESTION~Knowledge Check #67~Fill in the blank: ____ ajax request from ‘post’ to ‘get’~Change~I changed~This will change~Fixed
QUESTION~Knowledge Check #68~Fill in the blank: ____ new C# card game application~Update~Making a~Here is a~Fixed
QUESTION~Knowledge Check #69~Fill in the blank: ____ rendering behaviors on 300px or smaller screens.~Fix~Created~Edited~Imagine
QUESTION~Knowledge Check #70~When you edit a forked repository it will make changes to the original project.~False~True
QUESTION~Knowledge Check #71~In GitBash, how do you view hidden files and folders?~ls -a~ls -mv~ls -ls~ls -h
QUESTION~Knowledge Check #72~In Gitbash it is a best practice to nest repositories (have a repository within a repository~False~True
QUESTION~Knowledge Check #73~In gitbash, what command would you use to remove a .git folder?~rm -rf .git~rmdir .git~cd .git~mkdir .git
QUESTION~Knowledge Check #74~When uploading a project, you should include all supporting files for it,~True~False
