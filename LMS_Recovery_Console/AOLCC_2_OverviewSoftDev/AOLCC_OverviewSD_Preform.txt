$$$ <Learning Objectives List, 1.5-second interval>##EndNum
<p>^G^ MODULE 1. The Elements of a Computer Program</p>
<p>^G^ Learning objectives: </p>
~~^G^ Describe the basic elements of a computer program
~~^G^ Discuss the fundamentals of coding##EndBull

<p>^G^ SUBMODULE A. Introduction to the Course</p>


<p>ESTIMATED COURSE COMPLETION TIME:</p>
<p>32 hours of study</p>
 
$$$^G^ <Template-blank>##EndNum

<p>INSTRUCTIONS:</p>
<p>Tech Academy courses are designed on an increasing gradient of difficulty, with easier concepts placed toward the beginning and advanced concepts towards the end. Later steps assume the student has completed all prior steps. Courses sometimes refer back to earlier content. The courses must be done in sequence, with each step fully completed before moving on to the next. Please do not skip around on courses.</p>

$$$^G^ <Template-blank & Transition List>##EndNum

<p>PURPOSES OF THIS COURSE:</p>

<p>1. To teach a student what to expect as a software developer in the real world. This course covers information that applies to learning any programming language and is meant to orient students to software development. This course covers the fundamentals of coding and what to expect in the day-to-day life of a developer.</p>

<p>2. To train a student how to think like a computer programmer, which is a vital and prerequisite skill in learning to write code. Computers do not “think” per se, but a developer must learn to “think like a computer” nonetheless - an ability that one gains on this course. </p>

<p>3. To provide a student with what may be their first experience in writing code through utilization of the programming language Small Basic. Small Basic is a valuable learner’s tool provided by Microsoft, and is an excellent undercut to future languages covered on this program.</p>

$$$^G^ <MCSA>##EndNum

<p>QUIZ: (0 points)</p>
~~Which of the following is not one of the purposes of this course?
~~To teach a student what to expect as a software developer in the real world.
~~To train students on where to find technical positions. CORRECT
~~To train a student how to think like a computer programmer. 
~~To provide a student with what may be their first experience in writing code through utilization of the programming language Small Basic.  ##EndNum


$$$^G^ <Template-blank & Transition List>##EndNum

<p>WHAT TO EXPECT ON THIS COURSE</p>

<p>This course is similar to the Computer and Technology Basics Course in that there are many definitions and videos. Whereas the Computer and Technology Basics Course focuses more on general technology terms, this course covers the basic vocabulary required of a software developer. Common computer programming terms are covered on this course because failure to understand these makes it virtually impossible to write code effectively. </p>

<p>Here are some of the differences between this course and the Computer and Technology Basics Course:</p>
~~This course focuses on information that applies to every programming language.
~~While there is a substantial amount of content on this course, the Computer and Technology Basics Course has more definitions and videos.
~~This course is more challenging.
~~At the end of this course, you will write code!##EndNum

$$$^G^ <Template-blank>##EndNum

<p>A NOTE ABOUT THIS COURSE:</p>

<p>The Overview of Software Development Course is offered as the second course on The Tech Academy’s boot camps. Throughout videos and articles on our courses, you will occasionally come across statements like, “Later on in the boot camp,” and, “In your career as a software developer.” </p>

<p>Please keep in mind that while this course was originally created for aspiring software developers, it can also be taken outside of our boot camp programs and is valuable for everyone, even those not interested in a tech career path. Whether or not you intend to code in the future, it’s important to understand how computer programming works. Learning to code is the best way to really understand the technology that influences every area of life and puts one in better control of tech in general. </p>

<p>As Steve Jobs said, “I think everybody in this country should learn how to program a computer - should learn a computer language - because it teaches you how to think... It should be something that everybody learns.” </p>

$$$^G^ <Template-video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Welcome to the Overview of Software Development Course~~https://ttamediaservices-uswe.streaming.media.azure.net/f922d3b2-8482-443d-8608-73237af73b27/2018%20Welcome%20to%20the%20Overview%20of%20Software%20Development%20Course.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ: 
~~Which of the following is both a vital skill covered on this course and necessary for success as a computer programmer? 
~~Ability to think like a software developer CORRECT
~~Ability to set up a computer network 
~~Full knowledge of computer and technology history 
~~Mastering computer hardware ##EndNum

$$$^G^ <Template-video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~What is Computer Programming?~~https://ttamediaservices-uswe.streaming.media.azure.net/39d2552c-4172-40d9-bdad-a81eb15ffd6b/2018%20What%20is%20Computer%20Programming.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ: 
~~Which of the following terms is best defined as: “Sets of instructions that can be entered into a computer that make it accomplish specific tasks.”
~~Formatting 
~~Buffers 
~~Programs CORRECT
~~Websites ##EndNum

~~##EndNum
<p>ASSIGNMENT:</p>

<p>Type your answers to the following questions and email them to a Tech Academy Instructor:</p>

~~What is your purpose in taking this course?##EndNum

~~What are the reasons you’re interested in learning to code?##EndNum

<p>NOTE:</p>
<p>To send in your assignment, you can use the message system within this LMS, or email an Instructor at:</p>

~~Academy of Learning students: 	academyoflearning@learncodinganywhere.com ##EndBull

$$$^G^ <Template-blank>##EndNum
<p>Variable: In math, a variable is a symbol used to represent an unknown quantity or a quantity that may change. In computers, a variable is a construct (an idea formed from simpler elements) used to store data that may change as the computer performs its tasks. </p>
<p>Computers often have to keep track of various pieces of information. These can be things like the name of a computer user, the color of the background shown on the computer screen, an order number for something a user ordered from a company, etc.</p>
<p>The computer usually gives each of these pieces of data a NAME and a VALUE. The NAME is used to identify the exact piece of data, and the VALUE is used to show the actual data we need to keep track of.</p>
<p>These things the computer is keeping track of are usually called “variables." This is because the VALUE part of it can change when you tell the computer to change it. The fact that the value can vary is why it’s called a “variable” - its value is not permanent or constant.</p>
<p>Usually the “=” symbol is used to set the VALUE of a variable.</p>
<p>When the “=” symbol is used to set the value of a variable, it is usually used like this:</p>
<p>[NAME of the variable] = [VALUE that is being assigned to that variable]</p>
<p>EXAMPLE: fabricColor = “blue."</p>
<p>Here, there is a piece of information that the computer is keeping track of that has been given the name “fabricColor." By using the “=” symbol, we can set the value of the piece of information called “fabricColor." In this case, we are setting that value to the series of letters in the word “blue." </p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Assignment: This is the action of giving a value (description, amount, etc.) to a variable. A variable is something used to represent an unknown quantity/quality or a quantity/quality that may change; it is used to store data for later use. In some programming languages, you assign a value to a variable using an equal sign (=). You are stating that that variable now has a certain characteristic. </p>
<p>EXAMPLE: You could write a computer instruction that looked like this:</p>
<p>WeeklySalary = $1000.00</p>
<p>AnnualSalary = WeeklySalary x 52</p>
<p>There are two assignments here. In the first line, we are assigning the value "$1000" to the variable named "WeeklySalary." In the second line, we are multiplying the value of the variable "WeeklySalary" ($1000) by the number 52, and assigning that number ($52,000) to the variable named "AnnualSalary."</p>

<p>In beginning programming, it is very common to assign letters values, such as: A = 10. </p>

$$$^G^ <Template-blank & Image>##EndNum

<p>^G^ Pointer: A variable whose value is the address of another variable. The pointer “points to” another value stored somewhere else. Basically, it is a link.</p>

<p>^G^ EXAMPLE: Let’s say that Y has the address “0003” in memory. Then we assign X the value 0003. X would “point” to Y’s address (0003). In this case, X is the pointer. </p>

<img src="cid:Image_0.png" />

$$$^G^ <Template-blank>##EndNum
<p>Constant: The name given to a location in a computer's memory that a program has set aside for use in storing data, a situation where the value of the data stored in that memory location will NOT change over time.</p>
<p>EXAMPLE: You could program a video game character to always have the same height (6’ 0” tall) by creating a constant. It would not make sense to use a constant for the game character’s “health” rating, as the character would likely see its health decrease and increase as the video game is played.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>Call: To “call” means to demand or direct something. In normal English this could be used like, “This calls for celebration!” In computers, a call is a direction by a main computer program to execute the tasks of a subprogram. </p>
<p>A subprogram is a small program that is often used repeatedly to perform specific tasks.</p>
<p>More specifically, a “call” happens when a main program temporarily transfers control of the computer to a subprogram. Once the subprogram is done executing, control of the computer is returned to the main program. A program could make many “calls” to multiple subprograms as the program performs its sequence of tasks. </p>
<p>EXAMPLE: If you were playing a video game, the video game program could call a “high score” subprogram after every game ended in order to make the words “High Score” pop up on the screen. </p>


$$$^G^ <MCSA>##EndNum
QUIZ: 
~~Which of the following statements is false:
~~Variables have a name and a value.
~~Variables are permanent and cannot change. CORRECT
~~Variables are so named because the value can vary - its value is not permanent or constant. 
~~Variables are typically assigned using the symbol “=” ##EndNum

<p>^G^ SUBMODULE B. Coding Fundamentals</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>WHAT IS CODING?</p>

<p>Coding is computer programming. Computer programming is the act of creating computer programs, which are prepared sets of computer instructions designed to accomplish certain tasks. Programming consists of typing exact commands and instructions into a computer to create many of the things we use on computers on a day-to-day basis. To do computer programming, you must learn at least one programming language and use this language to create things on a computer that others can use. </p>
 
<p>EXAMPLE: The program on your computer entitled “calculator,” which you can use to do math, is the result of computer programming. </p>

<p>Coding also refers to the creation of websites.</p>

<p>Another word for these programs is "software". This is because the actual computer (the physical machine) is called "hardware.” Therefore, the programs that run on that machine are called "software.”</p>
 
<p>The terms “coding” and “development” mean the same thing as programming. A software developer is a computer programmer; so is a coder.</p>
 
<p>Programming is a spectacular thing because it is one of the few skills that apply to virtually all industries. Yes, companies that create software definitely utilize coding the most - but if you think about it, most industries utilize technology (software, websites, databases, etc.) And so, coders are valuable assets for companies in any industry - construction, food service, retail, transportation, etc.</p>
 
<p>There are many, many programming languages, and technology is ever-changing. The whole thing can be quite overwhelming, but there are basics that apply across the vast landscape of technology.  </p>

<p>In general, the instructions in computer programs are executed in order, from the top down.</p>

$$$^G^ <MCSA>##EndNum

QUIZ: 
~~The terms “coding,” “programming” and “development” mean virtually the same thing.
~~True CORRECT
~~False INCORRECT##EndNum

$$$^G^ <Template-blank & Transition List>##EndNum

<p>FIVE ELEMENTS</p>

<p>There are five key elements to any computer program:</p>
 
<p>1)      Entrance</p>
<p>2)      Control/branching</p>
<p>3)      Variables</p>
<p>4)      Sub Program</p>
<p>5)      Exit</p>

<p>We will now cover each of these.</p>

$$$^G^ <Template-blank>##EndNum

<p>1) Entrance:</p>

<p>A computer is a simple machine when you get down to it. It can only do one thing at a time, and it performs a computer program's instructions in the exact order in which the computer programmer puts them. It can only execute (perform, or run) an instruction if it is directed to.</p>

<p>This means that any computer program has to have a clearly marked "first instruction". This is the first task that the computer will perform when the computer program is started. From that point forward, each instruction in the program will direct the computer what instruction to perform next after it performs the current instruction.</p>

<p>There are different ways to specify the entrance point, depending on which computer programming language is being used - but every computer program has a defined entrance point.</p>

$$$^G^ <MCSA>##EndNum

QUIZ: 

~~When referring to creation of a computer program, what is meant by “entrance”?
~~Turning one’s computer on INCORRECT
~~The specifically defined end to a computer program INCORRECT
~~The clearly specified first instruction in a computer program CORRECT
~~The interface a user interacts with to open software  INCORRECT##EndNum

$$$^G^ <Template-blank>##EndNum

<p>2) Control/Branching:</p>

<p>Computers are often used to automate actions that would otherwise be performed by people. One of the most common things a person will be asked to do in performing a job is to assess the condition of a thing and, based on the condition of that thing, choose between two or more possible courses of action. In other words, they will have to make a decision. An example would be the activity of "a teacher grading a stack of papers": </p>

~~Take the next student paper from the top of the stack.
~~Grade the paper.
~~Write the grade on the paper.
~~If the grade is 70% or higher, put the paper in a "Passed" stack.
~~If the grade is below 70%, put the paper in a "Failed" stack.##EndBull

<p>You can see that there are two possible "branches" here. A branch is: "a possible course of action arising from a decision". Think of it as what happens when you come to a fork in the road. You have to decide on a course of action - which road do you take?</p>

<p>All but the simplest of computer programs will need to do the same thing. That is, they will have to check the condition of a piece of data, and, based on the condition of that data, they will have to execute different sets of computer instructions.</p>

<p>In order to do this, the program will make use of special computer instructions called "control" instructions. These are just instructions that tell the computer what to look at in making a decision, and then tell the computer what to do for each possible decision. The most fundamental control statement for a computer is "if". It is used like this:</p>

<p>IF [condition to check checked] THEN [branch of computer instructions to execute]</p>

<p>Here, the "IF" is the control statement; the "THEN" is the pointer to the branch of the program to execute if the control statement is true.</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:

~~Which of the following terms is best defined as: “A possible course of action arising from a decision.”
~~Branch CORRECT
~~Algorithm INCORRECT
~~Entrance INCORRECT
~~Control INCORRECT##EndNum

<p>2) Which one of the following terms best fills the blank: “_____ are instructions that tell the computer what to look at in making a decision, and then tell the computer what to do for each possible decision.”</p>
~~Branches INCORRECT
~~Sorting algorithms INCORRECT
~~Control statements CORRECT
~~Programs INCORRECT##EndNum

<p>^G^ SUBMODULE C. Variables</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>3) Variables</p>

<p>A variable is a piece data that a computer program uses to keep track of values that can change as the program is executed. This might be something like “the grade of the student paper that was just graded,” or "the color of paint to use for the next car on the assembly line.” </p>

<p>Variables are a vital part of any computer program, because they make it so a computer program can be used for more than a single, pre-determined set of values. You can imagine that if "the color of paint to use for the next car on the assembly line" was only ever able to be “blue,” the computer program using that data wouldn't be very useful. It would make a lot more sense to make it so the computer program could change that value for each car that was going to be painted.</p>

<p>When you are writing variables in a computer program, they usually are written in a manner like this:</p>

<p>[name of the variable] = [value of the variable]</p>

<p>For example, you might have something like this:</p>

<p>color = "red"</p>

<p>Here, the variable is named "color", and the value of that variable has been set to “red.” In other words, the variable named “color” is now “equal” to the word “red.”</p>

$$$ <Template-blank & Transition List>##EndNum

<p>3) Variables</p>

<p>Let's look at the example of “a teacher grading a stack of papers". Here, we could have a variable called “Paper Grade" that changed each time the teacher graded a paper. You could also have variables for the total number of questions on the paper ("Total Questions"), for the number of questions the student answered correctly ("Correct Questions"), and for the grade of the paper.</p>

<p>The written description from above:</p>

~~Take the next student paper from the top of the "To Be Graded" stack.
~~Grade the paper.
~~Write the grade on the paper.
~~If the grade is 70% or higher, put the paper in a "Passed" stack.
~~If the grade is below 70%, put the paper in a "Failed" stack.##EndBull

<p>In computer language, the procedure might look something like this:</p>

~~Retrieve next Paper
~~Set Total Questions = [total questions in current Paper]
~~Grade paper 
~~Set Correct Questions = [number of questions answered correctly]
~~Set Paper Grade = [Correct Questions/Total Questions]
~~If (Paper Grade >= 70%) then Paper Status = "passed"
~~If (Paper Grade < 70%) then Paper Status = "failed"##EndNum

<p>This is a simple computer program.</p>

<p>Each time the computer runs this program, it could have different values for each of the variables in the program, depending on how many questions the paper being graded has, and how many of those questions the student answered correctly.</p>

<p>For example, let's say the paper has 100 questions, and the student answers 82 of them correctly. After the program is run, the result would be the following:</p>

<p>Total Questions: 100</p>
<p>Correct Questions: 82</p>
<p>Paper Grade: 82%</p>
<p>Paper Status: "passed"</p>

$$$^G^ <Template-blank>##EndNum

<p>3) Variables</p>

<p>Another example: Let's say the paper has 50 questions, and the student answers 30 of them correctly. After the program is run, the result would be the following:</p>

<p>Total Questions: 50</p>
<p>Correct Questions: 30</p>
<p>Paper Grade: 60%</p>
<p>Paper Status: "failed"</p>
	
<p>To clarify the need for variables: Let's say that, at the time this computer program was being created, all papers at the school had 100 questions, and the teachers told the programmer to make it so that the number of questions was always assumed to be 100. In that case, the programmer wouldn't use a variable called "Total Questions.” Instead, he could make the program look like this:</p>

~~Retrieve next Paper
~~Grade paper 
~~Set Correct Questions = [number of questions answered correctly]
~~Set Paper Grade = [Correct Questions/100]
~~If (Paper Grade >= 70%) then Paper Status = "passed"
~~If (Paper Grade < 70%) then Paper Status = "failed"##EndNum

<p>Notice that on line 4 of the program, the programmer set the number of questions to 100.</p>

$$$^G^ <Template-blank>##EndNum

<p>3) Variables</p>

<p>Now, let's say that the school introduces the concept of "quizzes,” which are smaller papers with only 20 questions. Now, if the paper being handled by the computer program is a quiz, the grade will no longer be accurate - even if a student got all 20 questions correct, he/she would only get a grade of 20% (20/100).</p>

<p>A good programmer will analyze the need that the program is meant to resolve, then build the program so that it can handle changing aspects of that need over time.</p>

$$$^G^ <Template-blank & Transition List>##EndNum

<p>3) Variables</p>

<p>Another valuable control statement is a loop. This is where part of the program is executed over and over, until a certain condition is met.</p>

<p>In real world terms, an example might be "grade papers, one at a time, until all the papers have been graded,” or "make five copies of this document.”</p>

<p>In a computer program, a loop would look something like this:</p>

~~[start loop]
~~Perform action
~~If [end condition has been met] then [exit the loop]
~~If [end condition has not been met] then [repeat the loop]##EndBull

<p>The program we looked at that grades papers could be set up as a loop. The instructions would be laid out like this:</p>

~~[start loop]
~~Take the next student paper from the top of the "To Be Graded" stack.
~~Grade the paper.
~~Write the grade on the paper.
~~If the grade is 70% or higher, put the paper in a "Passed" stack.
~~If the grade is below 70%, put the paper in a "Failed" stack.
~~If there are no more papers in the "To Be Graded" stack, exit the loop
~~If there are more papers in the "To Be Graded" stack, repeat the loop
~~[end loop]##EndBull

$$$^G^ <Template-blank & Transition List>##EndNum

<p>3) Variables</p>

<p>Often, loops make use of a special variable called a "counter.” The counter keeps track of how many times the loop has been executed. This can be used to make sure the loop is only executed when needed. </p>

<p>Let's add a counter to the grading program we're looking at, as well as two new variables: "Total Papers"will be used to hold the value "how many papers are need to be graded” and "Counter" will be used to hold the value "how many times has the loop been executed."</p>

~~Set Total Papers = [total papers to be graded]
~~Set Counter = 0
~~If (Counter < Total Papers)
~~Retrieve next Paper
~~Set Total Questions = [total questions in current Paper]
~~Grade paper 
~~Set Correct Questions = [number of questions answered correctly]
~~Set Paper Grade = [Correct Questions/Total Questions]
~~If (Paper Grade >= 70%) then Paper Status = "passed"
~~If (Paper Grade < 70%) then Paper Status = "failed"
~~Counter = Counter + 1
~~Go to step 3
~~[Continue on with the rest of the program]##EndNum

<p>Here, the loop is found in step 3. </p>

<p>Let's break down what each step is doing here:</p>

<p>Step 1: Count how many papers are in the "to be graded" stack and set the value of the "Total Papers" variable to that number.</p>
<p>Step 2: Create a variable called "Counter" and set it to the value zero. This variable will be used to keep track of how many papers are graded.</p>
<p>Step 3: Use the control statement "if" to see if we should execute a loop.</p>
<p>Step 3a - 3g: Grade the paper; this has been covered above.</p>
<p>Step 3h: Since we have now graded a paper, add one to our Counter variable.</p>
<p>Step 3i: Go to the top of the loop, where we check to see if we need to execute the loop all over again.</p>

$$$^G^ <Template-blank>##EndNum

<p>3) Variables</p>

<p>Let's see what would happen if we used this program to grade two papers. Let's say that the papers look like this:</p>

<p>Paper 1:</p>
<p>Total questions on the paper: 100</p>
<p>Total questions that were answered correctly: 95</p>

<p>Paper 2:</p>
<p>Total questions on the paper: 20</p>
<p>Total questions that were answered correctly: 10</p>

<p>If we analyze what happens when the program is executed by the computer, it would look like this:</p>

<p>Total Papers = 2</p>
<p>Counter = 0</p>
<p>0 is less that 2, so loop will be executed</p>
<p>Paper 1 retrieved</p>
<p>Total Questions = 100</p>
<p>Paper 1 graded</p>
<p>Correct Questions = 95</p>
<p>Paper Grade = 95%</p>
<p>Paper Status = "passed"</p>
<p>Counter = 1</p>
<p>1 is less than 2, so loop will be executed</p>
<p>Paper 2 retrieved</p>
<p>Total Questions = 20</p>
<p>Paper 1 graded</p>
<p>Correct Questions = 10</p>
<p>Paper Grade = 50%</p>
<p>Paper Status = "failed"</p>
<p>Counter = 2</p>
<p>2 is not less than 2, so loop will not be executed</p>
<p>[Continue on with the rest of the program]</p>

$$$^G^ <Gapfill>##EndNum

QUIZ:

~~Which of the following terms best fill the blank?: A _____ is part of the program which is executed over and over, until a certain condition is met.##EndNum

~~Routine INCORRECT
~~Procedure INCORRECT
~~Protocol INCORRECT
~~Loop CORRECT##EndNum

~~Which of the following terms is best defined as: “Something that keeps track of how many times the loop has been executed.”##EndNum

~~Clock INCORRECT
~~Counter CORRECT
~~Block INCORRECT
~~Function  INCORRECT##EndNum

<p>^G^ SUBMODULE D. Subprograms and Essential Coding Terms</p>

$$$^G^ <Template-blank>##EndNum

<p>4) Sub Programs</p>

<p>As covered earlier, computer programs are generally executed in order, from the start point to the end point. This is called the “path of execution.”</p>

<p>The main series of instructions in a program is called the "main program.”</p>

<p>It is sometimes valuable to create another program that can be used by the main program as needed. This is called a sub program. It is no different from any other program - it is made up of the same elements (entrance point, variables, control & branching statements and exit point). However, a sub program isn't used all by itself. Instead, the main program can execute the subprogram as needed. Here, the main program stops executing, and the sub program starts executing. When the sub program is done executing, the main program continues on where it left off.</p>

<p>This is called "calling" the sub program - that is, the main program calls the subprogram, the sub program starts and stops, and the main program continues on.</p>

<p>This is useful in creating programs because the computer programmer doesn't have to enter the instructions of the sub program over and over - you only type them in once, and then when you need that subprogram to be called by the main program, you only have to type in one instruction - the instruction to call the sub program. This lets you reuse the instructions you entered in for the sub program, rather than rewriting them.</p>

$$$^G^ <Gapfill>##EndNum

QUIZ:
~~When a main program stops executing, carries out a subprogram from start to finish, and then resumes from where it left off, this is referred to as _____ing a subprogram.
~~Begin INCORRECT
~~Call CORRECT
~~Run INCORRECT
~~Push INCORRECT##EndNum

<p>2) Which of the following is the primary benefit of a subprogram?</p>
~~They can be written quickly.  INCORRECT
~~They can be executed separately from the main program. INCORRECT
~~They are a great tool for beginners. INCORRECT
~~You can reuse the subprogram, rather than rewriting them. CORRECT##EndNum

<p>3) Programs and subprograms each contain the five elements of a program (entrance point, variables, control & branching statements and exit point)</p>
~~True CORRECT
~~False  INCORRECT
$$$^G^ <Template-blank>##EndNum

<p>5) Exit</p>

<p>Every program must have an instruction that tells the computer that the program is no longer running. Much like the Entrance, the exact instruction for this varies based on the computer language used, but all computer languages will have this type of instruction.</p>

QUIZ: 
~~Which of the following is not one of the five elements of a program?
~~Control/branching INCORRECT
~~Exit INCORRECT
~~Sub Program INCORRECT
~~Loops CORRECT
~~Variables INCORRECT
~~Entrance INCORRECT##EndNum

$$$^G^ <Template-blank & Note>##EndNum
<p>Data structure: Refers to the organization of related pieces of information. There are different data structures that each allow different operations to be performed on the data. A data structure refers to how the data is organized in terms of implementation (use of the data; relation of the various parts of the data). It is a particular way to organize data in a computer so that it can be used efficiently.</p>
<p>EXAMPLE: Consider two different areas of business: The shipping industry and the manufacturing industry.</p>
<p>The types of data the shipping industry may need to collect and organize will center around vehicles and their capacity, shipping rates, fuel costs, travel times between various geographical points, etc.</p>
<p>The types of data the manufacturing industry may need to collect and organize will center around raw materials, product manufacturing methods and times, inventory locations and amounts, shipping information, etc.</p>
<p>The structure of the data used by computers in these two industries may have similarities, but it’s certain that the data structures wouldn’t be identical.</p>

$$$^G^ <Template-blank>##EndNum
<p>Linear data structure: This is simply a data structure where the data in the structure are organized one after the other – basically, a list. </p>
<p>EXAMPLE: A list of the states in the U.S. Each element of the structure, conceptually, comes right before or after another element.</p>

$$$^G^ <Template-blank>##EndNum
<p>
Nonlinear data structure: This is a data structure where the elements of the data don't necessarily follow one after the other. </p>

<p>EXAMPLE: A common example is a family tree; parts of it might seem linear, for example, when it lists the children of two parents – but others are not linear. This is clear when you consider the children from two different branches of a family. Conceptually, two pieces of data that represent children from different branches of the family tree do not follow one to the next.</p>


$$$^G^ <Template-blank>##EndNum
<p>Abstract data: “Abstract” indicates ideas, thoughts and theories as opposed to physical or concrete existence. Abstract data refers to data where we are only concerned with it in terms of its items and operations – not the implementation. In other words, we only care about what it's supposed to do – not about how it does it. </p>
<p>EXAMPLE: A common example would be what happens when you step on the brakes of a car. The driver knows the expected behavior – a gradual slowing of the car, and eventual stoppage if the braking continues. What the driver often doesn't know, and doesn't need to know in order to use the braking system, is HOW the system accomplishes this behavior. Different cars could have different methods for accomplishing this type of behavior; to the driver, the use of the system is the same. This is a demonstration of “abstracting out” the implementation, so that only the items and operation need to be known to the users of a thing – not the mechanics of how it is done.</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~What is the difference between a “linear data structure” and a “nonlinear data structure”?
~~There is no difference INCORRECT
~~A linear data structure has organized data (like a list), and data in nonlinear data structure don’t necessary follow one after the other. CORRECT
~~A nonlinear data structure has organized data (like a list), and data in linear data structure don’t necessary follow one after the other. INCORRECT##EndNum
<p>2) Which of the following terms best fills the blank?: “_____ refers to data where we are only concerned with it in terms of its items and operations – not the implementation.”</p>
~~Linear data structure INCORRECT
~~Machine instruction INCORRECT
~~Nonlinear data structure INCORRECT
~~Abstract data CORRECT##EndNum

$$$^G^ <Template-blank & Note>##EndNum
<p>Operation: Something a computer is designed to do. An operation is an action or set of actions created by a person that makes a computer do something. </p>
<p>EXAMPLE: If you set your computer to turn the screen black every five minutes the computer is undisturbed, the computer performs an operation to dim the screen each time five minutes pass where the computer is untouched.</p>

<p>In math, an operation is a process in which a number is changed or handled by addition, multiplication, division, etc. </p>

<p>^G^ EXAMPLE: 5 X 5 = 25 and 20 ÷5 = 4 are math operations.</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Machine instruction: The basic job of all processors is to execute various combinations of those simple instructions built into them. It only ever performs one of these instructions at a time, but modern computers can perform billions of instructions per second.</p>
<p>All actions you can make a computer do will be composed of various combinations of these built-in actions. These built-in instructions are called machine instructions.</p>
<p>A machine instruction is an instruction to your computer written in a form the CPU can understand - machine code. </p>
<p>Machine code is data that is composed of a series of 1s and 0s; computers are operated using 1s and 0s since it is very easy to make a machine that only has to differentiate between two different states. </p>
<p>When computers are manufactured, the CPU is made so it will obey certain instructions and perform exact actions when given those instructions. The machine instructions are available from the manufacturer of the computer.</p>
<p>EXAMPLE: Let's say “10010100 01101011 01011011 01010110” told the computer to “Delete the file called Vacation.doc." The “10010100 01101011 01011011 01010110” is a machine instruction.</p>

$$$^G^ <Template-blank>##EndNum

<p>Opcode: Short for operation code. An opcode is part of a machine instruction. Opcode specifies the exact operation that is to be performed. It is a series of binary numbers that the CPU is set up to understand, that tell the CPU the exact action it should take.  </p>

<p>EXAMPLE: If a machine instruction looked like this: 0111011010, the first three digits ('011') would be the opcode. For a certain brand of CPU, this opcode could mean 'Add a number to an earlier number'. The other part of the machine instruction could give the actual number to be added to the earlier number.</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:

<p>1) Opcode is the portion of a machine instruction that specifies the exact operation to be performed.</p>
~~True CORRECT
~~False INCORRECT##EndNum

<p>2) What does opcode short for?</p>
~~Operating code INCORRECT
~~Operate code INCORRECT
~~Operation code CORRECT
~~Opening code INCORRECT##EndNum

$$$^G^ <Learning Objectives Transition List>##EndNum
<p>^G^ Summary:</p>
~~^G^ Described the basic elements of a computer program
~~^G^ Discussed the fundamentals of coding##EndBull

<p> <Learning Objectives List, 1.5-second interval></p>


<p>^G^ MODULE 2. Computers and Number Systems</p>
<p>^G^ Learning objectives: </p>
~~^G^ Count in binary and hexadecimal 
~~^G^ Discuss number systems
~~^G^ Explain fundamental database terms##EndBull

<p>^G^ SUBMODULE A. Number Systems</p>

<p>Expression: Numbers and symbols and operators grouped together that show the amount of something. An expression is a written math problem.</p>

<p>In computers, an expression is a combination of values that are computed by the computer. There are different ways to write out expressions depending on which language you are programming in.</p>

<p>EXAMPLE: Name = “What person types in the name box," could be an expression. Also: x + 5 is an expression.</p>

$$$^G^ <Template-blank>##EndNum
<p>Operator: Also called an arithmetic operator. </p>
<p>In mathematics, an operator is a symbol used to carry out a computation. </p>
<p>There are several different kinds of operators. </p>
<p>Arithmetic operators such as +, -, /, *, % are used to perform math functions.</p>
<p>Operators such as >=, ==, != are used to compare values. </p>
<p>Logical operators like "and," "or," and "not" are used to evaluate whether an expression is true or false.</p>
<p>EXAMPLE: In creating programs, instructions like “AND” and “OR” are considered operators. For example, an instruction might specify:</p>
<p>If someone types in both “John” AND “Sally," then turn the screen blue</p>
<p>(Here, AND is an operator. It is a symbol for the action of comparing whether two things are both true.)</p>
<p>Another instruction might specify:</p>
<p>Total price = base price + tax</p>
<p>(Here, + is an operator. It is a symbol for addition). </p>
<p>Other common operators are the mathematical actions for multiplication or division. The symbols used for these operations are usually an asterisk (*) for multiplication and a forward slash (/) for division. </p>
<p>EXAMPLES: </p>
<p>AgeInMonths = Years * 12 </p>
<p>(* is an operator). </p>
<p>PricePerItem = TotalPrice / NumberOfItems </p>
<p>(/ is an operator)</p>

$$$^G^ <Template-blank>##EndNum
<p>Operand: This the number that is being dealt with in a mathematical operation. It is not the action being taken with the number, it is the number itself. </p>
<p>EXAMPLE: In 5+6, the operands are 5 and 6. The “+” is the operator. </p>

$$$^G^ <Template-blank>##EndNum
<p>Data Type: Data is information. There are many different kinds of information. Common types of information used in computers could be letters and numbers. When information is used in a computer, that information will have a “data type." This is two things: “what kind of information is this?," and “what kind of things can we do with this data?” Different data types can be used in different ways. </p>
<p>When data is stored in a computer, its type is also stored - that way the computer knows how to work with that particular piece of data.</p>
<p>The various different things you can do with data are called operations. Not all data types have the same operations available to them.</p>
<p>EXAMPLE: “Decimal numbers” (0-10) is a data type. Typical operations you could do with decimal number data are addition, subtraction, multiplication, etc. </p>
<p>“Text” is another data type. Typical operations you could do with text data are “convert the text to uppercase” or “concatenate." (Concatenate means to link together, as in a chain. For example, you could take the individual text elements “purple” and “?!," and then concatenate them into “purple?!," etc.)</p>
<p>When creating computer programs, every piece of data being kept track of by the computer is a certain type of data. For example, the datum 342.98 is data of type “decimal." The datum “casserole” is data of type “text."</p>
<p>It would not make sense to apply mathematical operations to text data - for example, trying to tell a computer to add the number 34 to the text “banana” wouldn’t work - because the two types of data are different, and mathematics don’t apply to text data.</p>
$$$^G^ <Template-blank & note>##EndNum
<p>Boolean: A Boolean is a data type has only two possible values: “true” and “false." It is used in computer operations that compare one or more conditions. This is a key tool in using computers to perform different sets of operations based on the condition of certain pieces of data.</p>
<p>It is based on Boolean logic, a form of logical analysis in which the only possible results of a decision are true and false. This logical system is based on the work of George Boole, an English mathematician, educator and philosopher.</p>
<p>A Boolean variable would be declared and assigned like this:</p>
<p>Boolean [variable name] = [true or false]</p>
<p>EXAMPLE: You could have a computer keep track of whether or not a specific employee is allowed to access the company bank accounts with a Boolean variable called “AllowedFinancialAccess." You could set it to “false” like this:</p>
<p>Boolean AllowedFinancialAccess = false</p>
<p>Booleans are a vital part of computer programming since they are used with computer instructions that compare conditions and then execute one of two or more possible actions based on the comparison.</p>

$$$^G^ <Template-blank>##EndNum

<p>String: This is a data type, used in computers, that is made out of multiple characters. A string is basically a type of data that connects a bunch of characters. Often these characters signify something to the user.</p>

<p>EXAMPLE: In the computer instruction:</p>

<p>Print “John is smart"</p>

<p>The series of characters “John is smart” is the string.</p>

$$$^G^ <MCSA>
~~Which of the following symbols are not an operator?
~~+ INCORRECT
~~) CORRECT
~~- INCORRECT
~~% INCORRECT##EndNum

~~Which of the following means “to link together”?
~~Concatenate CORRECT  
~~Connecticate INCORRECT
~~Connotation INCORRECT
~~Collectinate INCORRECT##EndNum

~~Which of the following is not a data type?
~~Decimal numbers INCORRECT
~~Strings INCORRECT
~~Pictures CORRECT
~~Boolean INCORRECT##EndNum

<p>4) In the expression 2 + 3, 2 and 3 are the operators and + is the operand.</p>
~~True INCORRECT
~~False CORRECT##EndNum

$$$^G^ <Template-blank>##EndNum
<p>NUMBER SYSTEMS </p>

<p>Number systems are also referred to as “numeral systems.” A number system is a system for writing numbers, where numbers are mathematical objects used to count, label and measure. </p>
<p>Number systems usually have a few key elements:</p>

~~Digits: A digit is a symbol used to represent a certain quantity. Some of the digits you're used to using are 2, 3, 7, etc. ##EndBull

<p>A number system is named for how many unique symbols it has available as digits. The number system used in most parts of the world has ten symbols, or digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. It is called the decimal system because the prefix “dec-” comes from the latin word for “ten”.</p>

<p>There are other number systems that have more or fewer symbols; decimal is the most popular number system in the world.</p>

~~Base: The base of a number system is just the total amount of symbols, or digits, used in that system. The decimal number system has a base of ten.##EndBull

~~Place: A position of a digit in a written number, where the position affects the value of the digit used. The decimal number system has places like “ones place”, “tens place”, “hundreds place”, etc.##EndBull

<p>A number system is concerned with how many digits will be used in counting, doing math, etc., and what symbols will be used to represent those digits. </p>

<p>EXAMPLE: There are many different number systems. The one we are used to using, decimal, uses ten digits: 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9.</p>

$$$^G^ <Template-blank>##EndNum

<p>SUBSCRIPTS</p>

<p>A subscript is text written below a line, such as: 1 a 2 B 3 c 4 D 5 </p>

<p>Subscripts can be used to indicate the base number system. </p>

<p>As covered earlier, the base of any number system is determined by the number of digits in that system.</p>

<p>EXAMPLE: Binary is a base-2 number system. </p>

<p>The way to display that we are talking about a binary number would be 100112 (this would be 19).</p>

<p>The way to display that we are talking about a decimal number would be 1910 (which is 19).</p>

$$$^G^ <Template-blank>##EndNum

<p>SUPERSCRIPTS</p>

<p>Superscripts are smaller characters typically displayed toward the upper right of another number - like this: 412</p>

<p>Whereas subscripts indicate the number system we are talking about, superscripts usually indicate “power.” 
</p>
<p>Power simply refers to how many times a number is multiplied by itself. </p>

<p>EXAMPLE: 43 would mean 4 X 4 X 4  (which equals 64). </p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~How would you write 5 in binary using a subscript to indicate the number system?
~~01012 CORRECT
~~01012 INCORRECT
~~011110 INCORRECT
~~01111 INCORRECT##EndNum
<p>2) How would you write 2 to the power of 2 using a superscript?</p>
~~22 INCORRECT
~~21 INCORRECT
~~22 CORRECT
~~21 INCORRECT##EndNum

<p>^G^ SUBMODULE B. Binary and Hexadecimal Systems</p>

$$$ <Template-blank & Table>##EndNum

<p>NUMBER SYSTEMS</p>

<p>If we take the number 36510 we could graph this out as follows:</p>

<p>Place value:</p><p>Hundreds</p><p>Tens</p><p>Ones</p><p>Power:</p><p>102</p><p>101</p><p>100</p><p>Quantity of each place value:</p><p>3</p><p>6</p><p>5</p>

<p>The first digit, 3, is in the hundreds column which means we multiply 102 by 3 to discover its total. Or written another way, the equation (a statement where values of a math problem are equal as indicated by an equal sign) is: </p>
<p>10 X 10 = 100 </p>
<p>100 X 3 = 300</p>

<p>The next digit (6) is in the tens column. So: 101 multiplied by 6.</p>
<p>10 X 1 = 10</p>
<p>10 X 6 = 60</p>
<p>300 + 60 = 360</p>

<p>Before we get to the final number, there’s a rule about powers you must know:</p>

<p>A number to the power of 0 is always 1. For example: 8 to the power of 0 (80) would be 1. </p>

<p>The only number this rule doesn’t apply to is 0 itself. Zero to the power of zero is zero (00 = 0).</p>

<p>Finally, we multiply 100 by 5.</p>
<p>1 X 5 = 5</p>
<p>360 + 5 = 365</p>

<p>There you have it - our original number.</p>

<p>Breaking this down further, here is how we could display the fractional number 1,237.78910:</p>

<p>Place value:</p><p>Thousands</p><p>Hundreds</p><p>Tens</p><p>Ones</p><p>Tenths</p><p>Hundredths</p><p>Thousandths</p><p>Power:</p><p>103</p><p>102</p><p>101</p><p>100</p><p>10-1</p><p>10-2</p><p>10-3</p><p>Quantity of each place value:</p><p>1</p><p>2</p><p>3</p><p>7</p><p>7</p><p>8</p><p>9</p>



$$$^G^ <Template-blank & Table>##EndNum

<p>NUMBER SYSTEMS</p>

<p>Using this same chart for binary would work as follows - let’s take the number 11012 (1310):</p>

<p>Place value:</p><p>Eights</p><p>Fours</p><p>Twos</p><p>Ones</p><p>Power:</p><p>23</p><p>22</p><p>21</p><p>20</p><p>Quantity of each place value:</p><p>1</p><p>1</p><p>0</p><p>1</p>

<p>The same earlier theory applies. We take 23 and multiply it by 1, which equals 8. Then we multiply 22 by 1, which equals 4. In the Twos column we have 0. Finally, in the ones column we multiply 20 by 1, which equals 1. Add it all together and we arrive at 13 (in decimal)!</p>

<p>Now let’s display the fractional binary number 10111.112 (23.7510):</p>

<p>Place value:</p><p>Sixteens</p><p>Eights</p><p>Fours</p><p>Twos</p><p>Ones</p><p>Halves</p><p>Fourths</p><p>Power:</p><p>24</p><p>23</p><p>22</p><p>21</p><p>20</p><p>2-1</p><p>2-2</p><p>Quantity of each place value:</p><p>1</p><p>0</p><p>1</p><p>1</p><p>1</p><p>1</p><p>1</p>


$$$^G^ <Template-blank>##EndNum

<p>NUMBER SYSTEMS</p>

<p>^G^ A formula is a mathematical rule or relationship that is expressed in numbers and symbols. </p>

<p>You can express the relationship between a digit, its position, and the base of a number system through use of the following formula:</p>

<p>DIGIT * BASEPOSITION #</p>

<p>If you look over the earlier equations we laid out, we followed the above formula. If you find this confusing, write down this formula and re-inspect the earlier equations. Failing that, we recommend you write out your own equation utilizing this formula. </p>

$$$^G^ <Template-blank & Note>##EndNum

<p>ASSIGNMENT:</p>

<p>Send a message to a Tech Academy Instructor explaining the following formula:</p>

<p>DIGIT * BASEPOSITION #</p>

<p>NOTE:</p>
<p>To send in your assignment, you can use the message system within this LMS, or email an Instructor at:</p>

~~Academy of Learning students: 	academyoflearning@learncodinganywhere.com ##EndBull

$$$^G^ <Template-blank>##EndNum

<p>Stateless: State is the condition of a person or thing.</p>

<p>The terms stateful and stateless are used to describe whether or not a computer program is designed to remember prior events. A stateful program will have a mechanism for keeping track of events as the program is used; a stateless program will not.</p>

<p>Stateless means that the interactions between the user and the computer are not remembered. Stateless means that there is no record of previous interactions and each interaction that occurs has to be handled based entirely on information that comes with it.</p>

<p>EXAMPLE: A login page that doesn’t remember your username or password, even if you’ve logged in before, would be stateless.</p>

$$$^G^ <Template-blank>##EndNum

<p>Bit pattern: This is a particular layout of bits (binary digits). Binary digits are the numbers 0 and 1, and they are the only digits a computer uses.</p>

<p>A bit pattern is the arrangement of binary digits that have been arranged in a sequence. Bit patterns are used to represent numbers, characters, etc. It is a pattern of bits that stand for something.</p>

<p>EXAMPLE: In certain instances in a computer, the combination of binary digits “100 0001” is a bit pattern used to represent the letter “A."</p>

$$$^G^ <Template-blank & Image>##EndNum
<p>ASCII: Stands for "American Standard Code for Information Interchange." An ASCII chart provides a standard way to represent text characters using numbered codes. These include upper and lowercase English letters, numbers, and punctuation symbols. In this system, the commonly-recognized English letters, numbers and punctuation marks each have a unique number that identifies them. This helps computer manufacturers by providing a standard way to refer to every character used in the English language.</p>
<p>ASCII uses binary numbers with 7 digits to represent each character. Often, these binary numbers are converted to decimal to make them more easily read and understood by people. </p>
<p>EXAMPLE: In ASCII, the capital letter “T” is represented by 1010100 in binary or 84 in decimal. </p>
<img src="cid:Image_0.gif" />

$$$^G^ <Template-blank & Image>##EndNum
<p>Unicode: A standard for representing letters and symbols in computers. Unicode is intended to represent all languages across the world. Each letter and symbol of the various languages of the world has a specific number in the Unicode system. </p>
<p>This is important because computers are much more useful if they can display data in the language of the user. </p>
<p>Computer programmers needed a way to clarify what letters or symbols to use in their programs if the user wanted the data displayed in another language. It was necessary that all computer manufacturers agree on this system so that computers could be used everywhere.</p>
<p>EXAMPLE: In Unicode the letter “A” could be represented as 0041.</p>
<img src="cid:Image_0.jpg" />

$$$^G^ <Template-blank>##EndNum

<p>Hexadecimal: Hexa- is a prefix meaning 16. Hexadecimal is a number system that is base 16. Meaning, it works out as follows:</p>

<p>Hexadecimal/English:</p>
<p>0 = Zero</p>
<p>1 = One</p>
<p>2 = Two</p>
<p>3 = Three</p>
<p>4 = Four</p>
<p>5 = Five</p>
<p>6 = Six</p>
<p>7 = Seven</p>
<p>8 = Eight</p>
<p>9 = Nine</p>
<p>A = Ten</p>
<p>B = Eleven</p>
<p>C = Twelve</p>
<p>D = Thirteen</p>
<p>E = Fourteen</p>
<p>F = Fifteen</p>
<p>Hexadecimal (abbreviated “hex”) is used in computers to represent binary numbers, and is </p>
<p>commonly used to specify the name of a computer memory address.</p>

<p>The place value of the hexadecimal number system can be diagrammed as follows:</p>

<p>65536</p><p>4096</p><p>256</p><p>16</p><p>1</p>

<p>Meaning: in hexadecimal, the following numbers are as follow:</p>

<p>1 (hex) = 1 (decimal)</p>
 
<p>10 (hex) = 16 (decimal)</p>

<p>100 (hex) = 256 (decimal)</p>

<p>Some more examples:</p>

<p>EXAMPLE: A (hex) = 10 (decimal)</p>

<p>EXAMPLE: 1B (hex) = 27 (decimal) (That is one “16” and eleven “1”s)</p>

<p>EXAMPLE: 2AF3 (hex) = 10,995 (decimal). In binary, 2AF3 would be 0010101011110011.</p>

<p>Hexadecimal is beneficial for two main reasons:</p>
~~You can display large numbers with relatively few characters.
~~It is easily translatable into binary. ##EndNum

$$$^G^ <MCSA>##EndNum

QUIZ:
~~What is the base of hexadecimal?
~~14 INCORRECT
~~15 INCORRECT
~~16 CORRECT
~~17 INCORRECT##EndNum

$$$^G^ <Template-video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Number Systems Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/24383f15-9f31-45fc-858c-01b01cefb087/2018%20Numbers%20Systems%20Part%20One.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ:
~~Translate E in hexadecimal to decimal:
~~14 CORRECT
~~100 INCORRECT
~~2 INCORRECT
~~52 INCORRECT##EndNum

~~Translate 8D in hexadecimal to decimal:
~~12 INCORRECT
~~1,230 INCORRECT
~~201,342 INCORRECT
~~170 CORRECT##EndNum

~~Translate 3F9 in hexadecimal to decimal:
~~57 INCORRECT
~~1,017 CORRECT
~~93 INCORRECT
~~12,317 INCORRECT##EndNum

~~Translate 317 in hexadecimal to decimal:
~~317 INCORRECT
~~1,201 INCORRECT
~~791 CORRECT
~~14,568 INCORRECT##EndNum

~~Translate ACED in hexadecimal to decimal:
~~44,269 CORRECT
~~23,417 INCORRECT
~~1,231 INCORRECT
~~6 INCORRECT##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>Object-oriented programming: Objects are items that can be represented in a computer program. They are often meant to represent real-world things.</p>

<p>In the world around you, you are surrounded by objects - your dog, the tv, etc. </p>

<p>Objects have state and behavior. </p>

<p>The state of an object would be the size, color, etc., at any point in time.</p>

<p>The behavior of an object would be what the object does - the actions it can take.  </p>

<p>EXAMPLE: A race car could be an object. </p>

<p>Things that describe its state at any point in time could be: engine type, engine horsepower, wheel size, gas tank capacity, etc. </p>

<p>Things that describe its behavior could be: accelerate, decelerate, turn right, turn left, etc.  </p>

<p>In computers, objects are parts of computer programs. They share a similarity to real life objects: they have a state and behavior.  </p>

<p>Example: a program might work with a “Customer” object. Again, the state of an object would be the characteristics and attributes of the object, and the behavior would be what the object could do. </p>

<p>In our example, our “Customer” object could have states like ‘active’ or ‘deleted’. It could have behavior like ‘Upgrade Rewards Level’ or ‘Add to Family Account’.  </p>

<p>Objects are often one of the first things you think about when designing a program. </p>

<p>EXAMPLE: Let’s say you had a computer program that let you design and order a bicycle from a custom bicycle company. That program would have a written description of the state and behavior of a bicycle. Once you started designing and ordering an actual bicycle, the program would create an actual “bicycle” object within the computer, and its state and behavior would be affected by the choices you made in designing and ordering the bicycle.</p>

<p>There are different approaches you can take to programming. </p>

<p>Object-oriented is an approach to programming that focuses on objects and data (as opposed to consecutive actions or some other approach). </p>

<p>The first step in OOP is determining what types of objects you are going to be dealing with and how all the objects relate to each other. In particular, you would look at how some objects might be created that were based on state and behavior of other objects.</p>

<p>OOP is a popular approach to programming computers that is used in many languages.</p>

<p>EXAMPLE: If you were creating a program designed to help people operate a school, you would likely make a list of the different types of objects you’d need to work with in the program: “Student”, “Teacher”, “Class”, “Exam”, “Classroom”, etc. You might then start describing the behavior of each object, and whether there might be other objects that could be created which would depend on one of those main objects for their state and behavior -  for example, you might need a “Full-time Student” object and a “Part-time Student” object; they could inherit their state and behavior from the “Student” object.</p>
<img src="cid:Image_0.png" />

$$$^G^ <Template-blank & Image>##EndNum
<p>Class: Objects are created by creating “classes,” using one of many specialized computer programming languages. Classes are used to describe one or more objects. This would be created by creating (or “declaring”) a class called a “Customer” class. It is important to know that when you first create this class, you are describing the POTENTIAL characteristics and behavior of that TYPE of thing. You will still need to create an actual one of those things. That process is called “creating an INSTANCE” of the class, where “instance” means “an actual one” of the things described when you declared the class. When you do this, the data that makes up the object is kept in the computer’s memory.</p>
<p>EXAMPLE: In a computer program designed to track pay records for all employees, you could have a class called “Employee." Each program element representing an actual employee (John Smith, Sally Jackson, etc.) would be an instance of the “Employee” class. You would have one instance for each employee you entered into the computer. Each time you created an “employee” object, the computer would first find the “employee” class, and use the definition of that class in creating that particular “employee” instance using the data for the actual employee.</p>

<img src="cid:Image_0.png" />
<p>^G^ SUBMODULE C. Essential Database Terminology </p>

$$$^G^ <Pages 70 -72: Collapsible>##EndNum

<p>Relational Database: In order to understand the term relational database, you'll need to understand the term database.</p>

<p>A database is an organized collection of related data, typically for use on a computer. Other computers might connect to a database that is stored on another computer in order to access the data in the database. This is the symbol for a database:</p>
<img src="cid:Image_0.jpg" />
<p>Usually, the data in a database is organized into tables. Tables are a data structure made up of rows and columns. Each column would represent a type of data that could be stored in the table; each row would represent one entry into the table.</p>

<p>What makes a database “relational” is when various tables in the database are related to each other in some way, and when those relationships are somehow defined and when they affect how the data in the tables is used.</p>

<p>A typical relationship might be like this: One table hold data about students. Another table hold data about addresses. The relationship between Students and Addresses is that one or more students can live at a given address. A relationship is defined between the two tables, tying one or more students to addresses.</p>

<p>EXAMPLE: A database containing tables with data about various vehicles and various drivers might be a relational database.</p>

~~##EndNum

<p>RDBMS: Stands for Relational Database Management System. </p>

<p>RDBMS stands for Relational Database Management System. An RDBMS is a type of computer program that lets you manage relational databases. It is not the databases themselves; it just helps you run the databases. </p>
<p>Programs are written instructions, entered into the computer, that make it perform certain tasks.</p>

<p>A Relational Database Management System is a type of program that lets you manage relational databases. It is not the databases themselves; it just helps you run the databases.  </p>

<p>EXAMPLE: If you were called upon to handle a database issue at work, you could download a RDBMS software program for your computer. There are many such software programs available.</p>

~~##EndNum
<p>SQL: Stands for Structured Query Language (pronounced “see-quill” or “S-Q-L”). In order to understand SQL, you must know what “query” means.</p>
<p>A query is a specific instruction to a computer to search through a database and collect all data that matches a certain set of criteria.</p>
<p>EXAMPLE: Say you had a database that stored sales data for a bicycle manufacturer. If you were trying to analyze sales trends for the company, you might want to create a query that searched the database and gave you "all sales since the beginning of the year where the retail price was above $400 and the bicycle color was red." You would create a query to perform that search.</p>
<p>You would need a special computer language in order to create that query. Structured Query Language is one such language.</p>
<p>SQL is a language used to monitor and handle databases. SQL can edit, change, modify, delete, etc. data in a database. </p>
<p>EXAMPLE: An example of a command in SQL might be this:</p>
<p>SELECT Price, ItemName FROM Products WHERE Price < 10.00</p>
<p>This would look in a database and find all the products in the table “Products” that cost less than $10.00. It would then make a list that had the price and name of each of those products.</p>

$$$^G^ <Gapfill>##EndNum

QUIZ:
~~What does OOP stand for?
~~Online Operation Program INCORRECT
~~Object-Oriented Programming CORRECT
~~Online Object Procedure INCORRECT
~~Object-Online Protocol INCORRECT##EndNum

<p>2) Which of the following characteristics do objects not have?</p>
~~State INCORRECT 
~~Location CORRECT
~~Behavior INCORRECT##EndNum

<p>3) What does RDMS stand for?</p>
~~Relative Digital Mapping Service INCORRECT
~~Relation Decode Material Systems INCORRECT
~~Relativity Data Messaging Services INCORRECT
~~Relational Database Management System CORRECT##EndNum

<p>4) What does SQL stand for?</p>
~~Structured Query Language CORRECT
~~System Quantity Leverage INCORRECT
~~Systematic Queries Library INCORRECT
~~Service Quantum Longitude  INCORRECT##EndNum

<p>5) Which of the following specifically applies to databases?</p>
~~Binary INCORRECT
~~OOP INCORRECT
~~SQL CORRECT
~~Hexadecimal INCORRECT##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch the following video in full:</p>
<p>VIDEO~~Number Systems Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/0f82cb20-9fc0-4b24-8b35-cd645883b7ae/2018%20Numbers%20Systems%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ: 
~~Translate B in hexadecimal to binary:
~~0101 INCORRECT
~~1011 CORRECT
~~1111 INCORRECT
~~1101 INCORRECT##EndNum

~~Translate 14 in hexadecimal to binary:
~~10100 CORRECT
~~01011 INCORRECT
~~11011 INCORRECT
~~11100 INCORRECT##EndNum

~~Translate 3F in hexadecimal to binary:
~~111111 CORRECT
~~101111 INCORRECT
~~100111 INCORRECT
~~110111 INCORRECT##EndNum

$$$^G^ <Pages 76-79: Collapsible>##EndNum

<p>T-SQL: Stands for "transact-structured query language". This is a widely-used language Microsoft made to add additional functionality to the basic language of SQL. </p>

<p>EXAMPLE: You could use T-SQL to get data into and out of databases that are managed using Microsoft database management software.</p>

~~##EndNum
<p>SQL Server: This stands for "Structured Query Language Server." </p>
<p>SQL Server is a Relational Database Management System computer program produced by the technology company Microsoft. Whereas SQL is a language, SQL server is software.</p>
<p>EXAMPLE: SQL Server is one of the most popular computer programs in the world. It is used by many companies to manage their databases.  </p>

~~##EndNum
<p>GUI: Pronounced 'gooey'. Stands for Graphical User Interface.  </p>
<p>The User Interface is the elements on a computer display that a user utilizes to interact with a computer program. It is where they type things in and click with the mouse, for example. This is where interaction between a machine and a user occurs.</p>
<p>A user interface is important because a computer program usually needs some sort of user interaction in order to perform its function.</p>
<p>EXAMPLE: If you had a computer program that was used to enter in orders for a bicycle program, the user interface would likely have an order form on the screen. </p>
<p>Graphical means having to do with images created on a computer screen. An interface is a common point or boundary between two things. In the computer world, an interface is a device or program that enables a user to communicate with a computer.</p>
<p>When computers were first being developed, the interface between user and computer was entirely text-based – all input and output was done in text. To access a file or program on the computer, the user would enter instructions, in text, that found that file or program and then opened or started the program. This was a challenging interface to use, as the user had to create a picture in his head of the arrangement of files and program on the computer. The development of a graphical user interface was a major event in the history of computers. </p>
<p>A Graphical User Interface is a representation of the various objects in a computer – files, programs, etc. - in a graphical form. That is, it presents the user with pictures and diagrams that communicate the things on the computer, and their arrangement. The pictures are not the things themselves; they are a graphical representation of the things. </p>
<p>It is much easier for a new user to move a file from one location to another by dragging the picture of a file with the mouse than by having to remember and type complicated commands to accomplish the same task.</p>
<p>EXAMPLE: If you have an image of a folder on your computer, and an image of files inside that folder, that is actually a graphical representation of how those files are stored in the memory of your computer. When someone refers to a graphical interface, they are referring to a GUI. </p>

~~##EndNum
<p>Web application: An application is a computer program. A web application is a computer program that uses both the browser and the web server to accomplish its functions.</p>
<p>The browser handles the display of information to the user and gives the user a place to enter instructions for the program. The web server handles various data processing actions based on the user instructions.</p>
<p>Note that this differs from the way many computer programs work, where the entire program resides on your computer. Programs installed on your computer are referred to as “console” or “desktop” applications.</p>
<p>EXAMPLE: Gmail is a web application.</p>

$$$^G^ <MCSA>##EndNum

~~What does T-SQL stand for?
~~Transmission-structured query language INCORRECT
~~Transact-structured query language CORRECT
~~Translate-structured query language INCORRECT
~~Torrent-structured query language INCORRECT##EndNum

<p>2) What is the difference between SQL and SQL server?</p>
~~SQL is a language and SQL server is software. CORRECT
~~SQL Server is a language and SQL is software. INCORRECT##EndNum

<p>3) Web apps, desktop apps and console apps all mean the same thing.</p>
~~True INCORRECT
~~False CORRECT##EndNum

<p>4) What does GUI stand for?</p>
~~Graphic User Interface INCORRECT
~~Graphics User Interface INCORRECT
~~Graphical User Interface CORRECT
~~Graph User Interface INCORRECT##EndNum

<p>5) Which would not be used with a GUI?</p>
~~Using a mouse INCORRECT
~~Text-based interface CORRECT
~~A touch-screen INCORRECT
~~Clicking files on a computer INCORRECT##EndNum

$$$^G^ <Learning Objectives Transitions List>
~~^G^ Learned the basics of binary and hexadecimal 
~~^G^ Discussed number systems
~~^G^ Explained fundamental database terms##EndBull

<p>^G^ <Learning Objectives List, 1.5-second interval></p>

<p>^G^ MODULE 3. Software Development Fundamentals</p>
<p>^G^ Learning objectives: </p>
~~^G^ Explain fundamental terms related to software development
~~^G^ Discuss the basics of software development
~~^G^ Describe the essentials of a software program
~~^G^ Explain the fundamentals of object-oriented programming##EndBull

<p>^G^ SUBMODULE A. Classes, Objects, and Methods </p>
<p>^G^ <Template-video></p>

<p>Watch the following video in full:</p>
<p>VIDEO~~Software Development Basics Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/7d5373a0-5f10-48ea-8682-4ced4364ec8f/2018%20Software%20Development%20Basics%20Part%20One.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:
~~If you create an object called “car,” that would be called an _____ of a car.
~~Creation INCORRECT
~~Instance CORRECT
~~Model INCORRECT
~~Function INCORRECT##EndNum

<p>2) A _____ is a specialized defined behavior inside a class, of what to do when making an instance of that class. </p>
~~Method INCORRECT
~~Function INCORRECT
~~Instance INCORRECT
~~Constructor CORRECT##EndNum

$$$^G^ <Template-blank & Note>##EndNum
<p>Iteration: To iterate means to say or do something again; to repeat something. An iteration is the act of repeating. Iteration means to go through a defined series of actions, repeating a certain number of times. Usually this defined series of actions is repeated a certain number of times, or until a condition is met.</p>

<p>EXAMPLE: Computer programs are usually created in iterations: Coming up with a basic working version, reviewing the program for mistakes to correct and improvements to make, doing that work, and repeating. This can be continued indefinitely.</p>

<p>Another example is: You tell the computer to go through a list of 33 students in a class. Each time the program gets a name from the list, it is to check whether the student's grade point average is above 3.5. If it is, the program is to print the name of the student to the screen. This would mean the program iterates 33 times through the steps of:</p>
<p>1: 'grab the next name' </p>
<p>2: 'check the GPA for that name' </p>
<p>3: 'if the GPA is greater than 3.5, print the name to the screen' </p>
<p>4: 'repeat steps 1 through 3 unless you are at the end of the list of names'</p>

<p>Each time through this series of steps is called an iteration. The process of going through these steps for all the names in the list is called iterating.</p>

$$$^G^ <Template-blank & Image>##EndNum
<p>Stack: There are two uses for the word stack in technology.</p>
<p>1. The regular definition of “stack” is a pile of objects.  In computer science, a “stack” is one of the basic ways of organizing and using data in a computer. It is often visualized as a vertical pile of data, with each piece of data on top of another.  </p>
<p>A stack is a set of data or tasks that are waiting to be handled. The computer (or other device) takes item 1 in the stack and handles that, then item 2, and so on. Stacks operate in this exact manner: </p>
<p>(1) The order in which items are added to the stack is known.  </p>
<p>(2) When the computer is ready to work on another item from the stack, it takes the youngest item on the stack – that is, the one most recently added to the stack. This is called 'Last In, First Out' operation. </p>
<p>(3) Taking an item off the stack to be worked on is called 'popping' the item off the stack. You would say 'perform a pop operation'. </p>
<p>(4) When a new item is added to the stack, it goes to the 'top' of the stack – that is, it's now the youngest item in the stack, and therefore will be the very next one worked on, unless another item is added before the computer is ready to work on another item. </p>
<p>(5) Adding an item to the stack is called 'pushing' the item onto the stack. You would say 'perform a push operation'.</p>
<p>EXAMPLE: We have a stack of books in a cart at a library. The librarian is traveling throughout the library, putting books back on the shelves. She grabs the book at the top of the stack, finds out where it goes, places it on the shelf, and then grabs the next book at the top of the stack. This would be a “pop” operation.  As she travels throughout the library, another librarian may walk up and put another book on the top of the stack. This would be a 'push' operation. That book is now the youngest, and will be the next one handled – unless yet another book is placed on the top of the stack before she can finish re-shelving the book she is working on.</p>
<img src="cid:Image_0.png" />
$$$^G^ <Template-blank>##EndNum

<p>Stack:</p>
<p>2. A stack is a combination of software systems that creates a platform that makes it so no other components are needed in order to support a program. The other terms for this are software stack or solution stack.</p>
<p>EXAMPLE: In the case of a stack to support a web application, for example, it is is a specific combination of the following items:</p>
~~An operating system
~~A web server program
~~A database management system
~~A programming language##EndBull
<p>With a set of those four items that can work together, a complete system exists for a web application to operate: there is a machine that has an operating system installed, the computer is running a web server program that is ready to respond to requests for web pages; there is a programming language that can be used to write programs that will run on the server to implement the logic of the web application; and there is a program to facilitate the creation and use of databases so the web application can make use of stored data as it operates.</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Abstraction: “Abstract” indicates ideas, thoughts and theories as opposed to physical or concrete existence. Abstraction is a general idea about a type of situation, thing, or person rather than a specific example from real life. Regarding computers, abstraction is the hiding away of the implementation details, and only providing the description of the behavior to be performed. </p>
<p>Abstraction is a less complicated way to say what task a computer is doing, without displaying the long list of details that are happening behind the scenes that are part of how the computer is doing the task. </p>
<p>EXAMPLE: An automatic coffee dispenser machine will simply have a button that says “Make Coffee." It doesn’t display data on how exactly it is done and you don’t necessarily need to know what functions the machine performs – you just know the expected behavior. This is abstraction.</p>

$$$^G^ <Template-blank>##EndNum

<p>List: A list is a collection of objects, where the objects are of a specific type, organized as a list of one object after another. A common example of this is a list where the objects in the list are decimal numbers. Usually, a list is written out using square brackets at the beginning and end of the list:</p>
<p>[4.5, 3.14159265, 234.789]</p>

<p>This list has three 'elements' - that is, three distinct objects in the list.</p>

<p>One important thing about lists is that each object in the list has two things about it that are kept track of by the computer - its value, and its position in the list.</p>

<p>Each object in a list is called an 'element'.</p>

<p>The position of an element in a list is noted using what is called an 'index'. This is a number that tells where, in the order of the elements in the list, that particular element can be found.</p>

<p>Usually, these index numbers start at the number zero, and count up from there. That is, the first element in the list would have an index of 0, the second would have an index of 1, and so on.</p>
<p>Index numbers are often written in square brackets, much as the entire list itself can be written between square brackets.</p>

<p>In our example above, the element at index [0] has a value of 4.5.</p>

<p>Lists are very useful. The objects stored in a list can be objects of any type that the computer can keep track of.</p>

<p>This means that you can have a list where the objects stored are of type string:</p>
<p>["cat", "bird", "chicken hawk", "Sylvester"]</p>

<p>You can have a list where the objects are of type integer:</p>
<p>[65, 2, 333, 678, 49, 19435]</p>

<p>As a software developer, you will also be creating your own objects. These can be put in a list.</p>
<p>As an example, let's say you've created a class of objects that's meant to represent customers of a business. You've called this class 'Customer'.</p>

<p>To refresh what this means: You'll have defined the properties of the Customer class ('name', 'customer type', 'standard discount', etc.); you'll also have defined the actions that can be performed on a Customer('Activate', 'Deactivate', 'Create', 'Delete', etc.).</p>

<p>As your program is used, new objects of type 'Customer' will be added. You could have three 'Customer' objects, for example. They could look like this:</p>
<p>Customer object one: name='John Jones' customer type='Retail' standard discount='10%'</p>
<p>Customer object two: name='ACME Plumbing' customer type='Wholesale' standard discount='45%'</p>
<p>Customer object three: name='Sheryl Anderson' customer type='Retail' standard discount='14%'</p>

<p>You could create a list of Customer objects that looks like this:</p>
<p>[Customer object one, Customer object two, Customer object three]</p>

<p>The Customer object at index 1 would be the Customer object whose name property has the value 'ACME Plumbing'.</p>

$$$^G^ <Template-blank & Image>##EndNum

<p>Storyboards: The result of drawing out the basic ideas and sequence of a project.</p>

<p>EXAMPLE: When doing your live project later in the boot camp, one of the first things your group may be doing is creating a storyboard that will be used to plan out what and how the program will be structured.</p>

<p>Here are a couple of examples of storyboards:</p>
<img src="cid:Image_0.png" />
<p>Storyboard example A</p>
<img src="cid:Image_0.jpg" />
<p>Storyboard example B</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>^G^ SUBMODULE B. Testing for Quality</p>
<p>Encapsulation: Encapsulate means to wrap something or cover it completely.</p>
<p>Often when creating computer programs, you will have certain tasks that you need to do over and over again. In this case, it is helpful to create computer instructions that perform that task, and then turn those instructions into a small program that itself can be used by other computer programs. A common term for this is “sub program."</p>
<p>For example, there may be a subprogram that can receive some numbers, add them together and give the answer. You can imagine that this subprogram might get used quite often.</p>
<p>There are two aspects of a task in a computer program: WHAT it does, and HOW it does it.</p>
<p>In computer programming, encapsulation means setting up a computer program so that the details of HOW are hidden away and only  WHAT it does is visible.</p>
<p>EXAMPLE: Let's say that two different people were assigned the task to write a subprogram called 'MultiplyTwoNumbers' which is intended to receive two numbers and give back the result of multiplying those two numbers.</p>
<p>The subprogram can be written in more than one way, because you can do the math in more than one way: You can multiply the two numbers, or you can do the whole operation using addition.</p>
<p>An example:</p>
<p>If you want to multiply 3 times 4, you can do it with addition by adding up the number 3, four times:</p>
<p>3 + 3 + 3 + 3 = 12</p>
<p>Or you can do it with multiplication:</p>
<p>3 x 4 = 12</p>
<p>Either approach gives you the correct answer.</p>
<p>This applies to encapsulation, and to computer programming, like this: If two people each solved the task differently, but the way they did it resulted in the correct answer, either one of the subprograms could be used when a person wanted to do multiplication. They wouldn't need to see HOW the subprogram arrived at the right answer - they would only need to know WHAT to give the subprogram in order for it to do its job, and WHAT they would receive as an answer.</p>
<p>In both cases, the WHAT to give the subprogram is “the two numbers you want to multiply', and the WHAT you get back is “the product of the two numbers” (in math, “product” means “what you get when you multiply numbers”).</p>
<p>So here, we encapsulate the implementation of the subprogram, and only give the user what they need to see to use the subprogram.</p>


$$$^G^ <MCSA>##EndNum

QUIZ:
<p>1)      If a computer runs through a list with five items on it 15 times, how many iterations would that be?</p>
<p>a.       75 INCORRECT</p>
<p>b.       15 CORRECT</p>
<p>c.       50 INCORRECT</p>
<p>d.       5 INCORRECT</p>
 
<p>2)      Which of the following is not a definition of stack?</p>
<p>a.       A set of data or tasks that are waiting to be handled. INCORRECT</p>
<p>b.       A process completed between a server and computers on a network. CORRECT</p>
<p>c.       A combination of software systems that creates a platform that makes it so no other components are needed in order to support a program. INCORRECT</p>
 
<p>3)      Which of the following is not an aspect of a stack as it relates to web applications?</p>
<p>a.  An operating system INCORRECT</p>
<p>B. A web server program INCORRECT</p>
<p>c.  A database management system INCORRECT</p>
<p>d.  A website CORRECT</p>
<p>e.  A programming language INCORRECT</p>
 
<p>4)      The items on a list are referred to as?</p>
<p>a.       Elements CORRECT</p>
<p>b.       List items INCORRECT</p>
<p>c.       Sections INCORRECT</p>
<p>d.       Parts INCORRECT</p>
 
<p>5)      Regarding objects on lists, which of the following is not kept track of in a computer?</p>
<p>a.       Value INCORRECT</p>
<p>b.       Position INCORRECT</p>
<p>c.       Character CORRECT</p>
 
<p>6)      In the following list which number has the index of 2?</p>
<p>[ABC, 123, DEF, 456]</p>
<p>a.       ABD INCORRECT</p>
<p>b.       123 INCORRECT</p>
<p>c.       DEF CORRECT</p>
<p>d.       456 INCORRECT</p>
 
$$$^G^ <Template-video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Software Development Basics Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/f31153e9-68da-4cac-8974-fd5aed6d62f7/2018%20Software%20Development%20Basics%20Part%20Three.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:
<p>1)    _____ means to wrap something or cover it completely. _____ means setting up a computer program so that the details of HOW are hidden away and only WHAT it does is visible.</p>
<p>a.     Hide/hiding INCORRECT</p>
<p>b.     Encapsulate/encapsulation CORRECT</p>
<p>c.     Cover/covering INCORRECT</p>
<p>d.     Wrap/wrapping INCORRECT</p>

<p>2) _____ is the condition of something. ____ is only used when referring to something that can change over time.</p>

~~Function INCORRECT
~~State CORRECT
~~Parameter INCORRECT
~~Routine INCORRECT##EndNum

$$$^G^ <Template-blank>##EndNum

<p>Unit Test: This is a software development process in which the smallest testable parts of an application called units are individually and independently checked for proper operation. This is a method approach of creating a program through continual testing and revision.</p>

<p>EXAMPLE: If you were developing an app that handled recording the steps of manufacturing a car, you could have each step of the procedure tested and this would be unit testing.</p>

$$$^G^ <Template-blank>##EndNum
<p>End user: The person or persons for whom a computer program (programs are written instructions, entered into the computer, that make it perform certain tasks) is being developed – the people who will actually use the program once it's been released. This is different from the people who will create and maintain the program.</p>
<p>EXAMPLE: In developing video games, the end users would be those who purchase the games from stores. </p>

$$$^G^ <Pages 95 - 97: Collapsible>##EndNum
<p>UAT: This stands for User Acceptance Testing. </p>
<p>Software testing is a system or process for investigating computer programs to assess their quality. </p>
<p>This is done in order to provide those people concerned with the software (business owners, computer programmers, project managers, etc.) with vital information about such things as: </p>
~~How well the software meets the guidelines that were used in its creation
~~Whether there are bugs in the program (errors in a computer program that cause it to produce an incorrect or unexpected result)
~~Whether the software responds correctly to various inputs
~~Whether the software operates within acceptable time frames (response time, etc.)
~~Whether the software can be installed properly on the types of computer systems it is intended for##EndBull
<p>There are many different types of software testing approaches, systems and processes.</p>
<p>User Acceptance Testing is a common step in creating computer programs. UAT is typically the final phase in the software development process before the software is made available for full use. In the User Acceptance Testing phase, the software is given to the intended audience to be tested for functionality.</p>
<p>EXAMPLE: Before releasing an app to the general public, one should perform UAT. </p>

~~##EndNum

<p>Alpha Test: Alpha is the first letter of the Greek alphabet and is often used to describe things that come first in an ordered system. </p>
<p>There are many different types of software testing approaches, systems and processes. An end user is the person or persons for whom a computer program is being developed - the people who will actually use it once it’s been released.</p>
<p>Alpha testing is a form of testing done while creating a software program. It is often the first form of testing done, hence the name “alpha”. </p>
<p>It is done by having people use the actual computer program, or a simulation of it. Often this is done on premises - meaning, at the location where the software is being developed. The people doing the testing can be the intended users of the software, a team of professional testers, or others.</p>
<p>EXAMPLE: In creating a website for newlyweds, a person could bring in a group of newlyweds and have them go through the site to identify any problems or mistakes, give feedback on usability, etc. That would be alpha testing.</p>

~~##EndNum

<p>Beta Test: Beta is the second letter of the Greek alphabet. Beta testing is a form of testing done while creating a software program. It is often the second form of testing done on the software, hence the name "beta." It is done by releasing the software to a limited number of actual end users (people that weren’t involved in the development of a product and who are similar to the public that will eventually use the product) for the purpose of identifying defects that earlier testing didn't identify. After passing beta testing, the software would usually be released to all end users.</p>
<p>EXAMPLE: In creating a website for newlyweds, a person could first have another software programmer go through the site to identify any problems or mistakes. After fixing any issues found, the person could then share their site with twenty-five newly married couples and gather further feedback. This second wave of testing would be beta testing. </p>

$$$^G^ <MCSA>##EndNum

QUIZ:

<p>1)      What does UAT stand for?</p>
<p>a.       Upload Accessory Tasks INCORRECT</p>
<p>b.       User Acceptance Testing CORRECT</p>
<p>c.       Unreliable Accessibility Transistor INCORRECT</p>
<p>d.       Ubiquitous Alpha Transmission INCORRECT</p>
 
<p>2)      What is the difference between alpha testing and beta testing?</p>
<p>a.       Beta is typically the first form of testing done, and alpha is typically the second form of testing. INCORRECT</p>
<p>b.       Alpha is typically the first form of testing done, and beta is typically the second form of testing. CORRECT</p>

<p>^G^ SUBMODULE C. Principles of Object Oriented Programming</p>

$$$^G^ <Template-Video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Software Development Basics Part Three~~https://ttamediaservices-uswe.streaming.media.azure.net/f31153e9-68da-4cac-8974-fd5aed6d62f7/2018%20Software%20Development%20Basics%20Part%20Three.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:
~~____ is creating a new class which takes on properties and behaviors from another class.
~~Parent INCORRECT
~~Inheritance CORRECT
~~Child  INCORRECT
~~OOP INCORRECT##EndNum



~~____ refers to creating an instance of a class, utilizing other objects from different classes. 
~~Aggregation CORRECT
~~Creation INCORRECT
~~Making INCORRECT
~~Transitioning  INCORRECT##EndNum

$$$^G^ <Pages 101-104: Minicards>##EndNum
<p>Patch: A piece of code added to a software program in order to fix a defect or add additional functionality, especially as a temporary correction.</p>
<p>It is called a patch because it is a small set of instructions, meant to handle a specific, tightly-defined part of the program. It is contrasted with a full version of the program, in which many areas of the program might have new functionality.</p>
<p>EXAMPLE: If there were a tax-preparation software, and a defect was discovered that could cause incorrect calculations of individual tax refunds, a patch might be sent to users of the software. Once installed, the patch would correct the defect in the program.</p>

~~##EndNum
<p>Flow: This is simply the movement of something at a certain rate, from one point to another.</p>
<p>In computer science, when discussing the flow of something, it is referring to the sequence in which computer instructions are executed.</p>
<p>Every computer program is different in some form, and certain instructions can change the flow of execution of instructions from start to end. Simply put, flow is the path the computer's instruction execution follows as a computer program is run.</p>
<p>EXAMPLE: Opening a new message, typing the message, entering in the address it is being sent to and clicking send could be considered the flow of sending an email.</p>

~~##EndNum
<p>Syntax: There are many different types of programming languages, each of which was created to fill a specific purpose. Usually a language is created in order to make the creation of certain types of computer programs easier.</p>
<p>Every spoken language has a general set of rules for how words and sentences should be structured. These rules are known as the syntax of that particular language.</p>
<p>In programming languages, syntax serves the same purpose.</p>
<p>Syntax is the rules you must follow when writing computer programs. Each language has its own syntax. Failing to use the syntax of a particular language correctly can mean that whatever program you are designing will not work at all.</p>
<p>EXAMPLE: If a computer language required you write “cmd:” (meaning “command”) at the beginning of each instruction, that would be part of the syntax of that language. And if you didn’t write “cmd:” at the beginning of an instruction, the computer would not be able to process and execute the instruction because you violated syntax.</p>

~~##EndNum
<p>Constraints: Things that hold other things within certain limits or boundaries. In computer science, constraints are used to not allow certain actions by the person using the computer, so the computer can work effectively.</p>
<p>EXAMPLE: If you are using a computer to facilitate the sale of bicycles, and if the computer had access to the records of how many bicycles were in the warehouse, a constraint could be created that prevents a salesperson from selling more bicycles than actually exist in the warehouse.</p>

$$$^G^ <Template-blank>##EndNum
<p>Mapping: In general, mapping is the creation of a system that connects one thing to another - essentially, it answers the question "how do I get from here to there."</p>
<p>In computers, this can take on any one of several different meanings or applications. Examples include:</p>
<p>1. Establishing a connection from one computer to another computer or device in a network. </p>
<p>EXAMPLE: In a small business, you might have three computers, a printer and a fax machine. If you connected all of these physically using computer cables, you would still need to go to each computer and establish a connection so that the computer programs on each computer could locate the other computers, the printer and the fax machine. That way each computer could transfer information back and forth between itself and the other computers or devices. The process of establishing that connection to another computer or device is called "mapping" the computer or device.</p>

$$$^G^ <Template-blank>##EndNum
<p>Mapping:</p>
<p>2. Creating a table that shows how the elements of one set of data correspond to the elements of another set of data.</p>
<p>EXAMPLE: Let's say you had two schools that were going to start sharing performance data in order to increase their effectiveness.</p>
<p>School A has a set of data with the following categories:</p>
<p>StudentNameFirst</p>
<p>StudentNameLast</p>
<p>GradeLevel</p>
<p>GradePointAverage</p>
<p>School B has a set of data with the following categories:</p>
<p>FirstName</p>
<p>LastName</p>
<p>GradeLevel</p>
<p>GPA</p>
<p>Even at a glance, you can see the the two schools are tracking the same types of data; they just have different names for some of the categories of data.</p>
<p>A "mapping table" could be created that looks like this:</p>
<p>SchoolA</p><p>SchoolB</p><p>StudentNameFirst</p><p>FirstName</p><p>StudentNameLast</p><p>LastName</p><p>GradeLevel</p><p>GradeLevel</p><p>GradePointAverage</p><p>GPA</p>
<p>You could say that "SchoolA.StudentLastName maps to SchoolB.LastName."</p>
<p>This "mapping table" is an example of an "associative array" - an array that describes the association between two different sets of data.</p>

$$$^G^ <Gapfill>##EndNum

QUIZ:
 
<p>1)  _____ is the rules you must follow when writing computer programs. Each language has its own _____.</p>
<p>a.     Grammar INCORRECT</p>
<p>b.     Regulations INCORRECT</p>
<p>c.     Procedure INCORRECT</p>
<p>d.     Syntax CORRECT</p>
 
<p>2)    Which of the following is not a definition of mapping?</p>
<p>a.     Establishing a connection from one computer to another computer or device in a network.</p>
<p>b.     Determining the geographical location of data permanently stored in a solid-state hard drive.</p>
<p>c.     Creating a table that shows how the elements of one set of data correspond to the elements of another set of data.</p>

<p> SUBMODULE D. Additional Software Development Concepts</p>

$$$^G^ <Template-Video>##EndNum

<p>Watch the following video in full:</p>
<p>VIDEO~~Software Development Basics Part Four~~https://ttamediaservices-uswe.streaming.media.azure.net/e9f538cf-6b81-4c29-b719-a91016109ce2/2018%20Software%20Development%20Basics%20Part%20Four.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ:
~~Which of the following terms is best defined as “Prepackaged and reusable bundles of code which are called by the main program”?:
~~Functions CORRECT
~~ Procedures INCORRECT
~~Protocols INCORRECT
~~Regulators INCORRECT##EndNum

~~An ____ is a pointer - it states “there is the thing”:
~~Aggregate INCORRECT
~~Index CORRECT
~~Asynchronous INCORRECT
~~Object INCORRECT##EndNum

$$$^G^ <Template-blank>##EndNum
<p>Field: A field is space in a data structure that is reserved for particular information. It is the smallest unit of information a user can access. Fields have certain attributes associated with them (numbers, text, etc.)</p>
<p>EXAMPLE: In a spreadsheet, fields are called cells. Another example: when you are filling in a form on your computer, each box where you enter in data is called a field.</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>CLI: Stands for command-line interface. An interface is a device or program that enables a user to communicate with a computer. The command line is an interface where you can type commands into a computer. The command line allows you to perform many actions, including: moving files, deleting files, copying files, starting computer programs, etc. While these actions are typically done with a mouse, they can also be handled by typing words into a command line.</p>
<p>As opposed to GUI (Graphical User Interface; a representation of the various objects in a computer – files, programs, etc. - in a visual form), CLI is where you control a computer and interact with it by simply reading and typing text onto the computer screen. </p>
<p>EXAMPLE: If you type: </p>
<p>copy schedule.txt “2016/August” “2016/September”</p>
<p>into a CLI, you can copy the file “schedule.txt” from a location called “2016/August” to another location called “2016/September."</p>

<img src="cid:Image_0.png" />

$$$^G^ <Template-blank>##EndNum
<p>Generic: Characteristic of a class or group of things; not specific.</p>
<p>EXAMPLE: Telling your friend, "I bought a new car" would be generic. Telling them, "I bought a 2015 Toyota Camry" would be specific. In the first, you are just referring to a class or group of things - in this case, cars. In the second, you are referring to a specific example of that class or group of things.</p>

$$$^G^ <Template-blank>##EndNum
<p>IDE: This stands for Integrated Development Environment. </p>
<p>An IDE is a set of programming tools for writing software programs. IDEs are a great aid to computer program creation.  An IDE often combines many available tools into one place. Essentially, an IDE is software that helps you make software.</p>
<p>EXAMPLE: Visual Studio, available from the technology company Microsoft, is one of the many IDEs available for software developers.</p>

<img src="cid:Image_0.png" />


$$$^G^ <MCSA>##EndNum

<p>1)    What does CLI stand for?</p>
<p>a.     Command-line interface CORRECT</p>
<p>b.     Common Language Internet INCORRECT</p>
<p>c.     Computer Listing Implementation INCORRECT</p>
<p>d.     Creative Lift Intelligence INCORRECT</p>
 
<p>2)    What could be consider the opposite of a CLI?</p>
<p>a.     IDE INCORRECT</p>
<p>b.     LAN INCORRECT</p>
<p>c.     GUI CORRECT</p>
<p>d.     LMS INCORRECT</p>

<p>3)    What does IDE stand for?</p>
<p>a.     Interface Developer Environment INCORRECT</p>
<p>b.     Integrated Developer Equipment INCORRECT</p>
<p>c.     Interface Development Equipment INCORRECT</p>
<p>d.     Integrated Development Environment CORRECT</p>

$$$^G^ <Template-Video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Software Development Basics Part Five~~https://ttamediaservices-uswe.streaming.media.azure.net/e742d208-ee9b-4bd5-9d49-86f38a4224fd/2018%20Software%20Development%20Basics%20Part%20Five.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:
~~One of the factors in determining the speed of a CPU is how many ____ it can process at a time. For example: A 64 ____ processor can process 64 ____s at a time.
~~Chip INCORRECT
~~Byte INCORRECT
~~Clock INCORRECT
~~Bit CORRECT##EndNum

~~Touchscreens are an input device and an outpoint device.
~~True CORRECT
~~False INCORRECT##EndNum

$$$^G^ <Learning Objectives Transition List>##EndNum

~~^G^ Learned the fundamental terms related to software development
~~^G^ Discussed the basics of software development
~~^G^ Described the essentials of a software program
~~^G^ Learned the fundamentals of object-oriented programming##EndBull

<p>^G^ <Learning Objectives List, 1.5-second interval></p>
<p>^G^ MODULE 4. Object-Oriented Programming </p>
<p>^G^ Learning objectives: </p>
~~^G^ Describe object-oriented programming
~~^G^ Differentiate the elements of object-oriented programming
~~^G^ Explain important computer programming data
~~^G^ Discuss essential aspects of computer programs##EndBull

<p>^G^ SUBMODULE A. Class Types </p>
<p>^G^ <Template-blank & Image></p>

<p>Parent Class: Objects have state and behavior. A class is a description of an object. A parent class is a class that other classes (referred to as child classes) derive properties and behavior from.</p>

<p>EXAMPLE: A parent class could be “Insect," with the following states and behaviors: awake, asleep, move and eat. You could then create a child class called “Ant," which automatically would contain the states and behaviors contained in the parent class (awake, asleep, move and eat).</p>

<img src="cid:Image_0.png" />

$$$^G^ <Template-blank>##EndNum
<p>Black Box: In science and engineering, a black box is a system where there is a transformation between the input and output without visually seeing and understanding what occurs between. It is called this because it is figuratively a black box that is in between the process of inputting something and getting some output. </p>
<p>This concept is used often in a variety of ways in computers. What it is based on, though, is the concept that the system takes in data, does something based on that data, and delivers an output – and the user doesn’t get to see what is being done inside the system. They only get to see what goes in and what comes out.</p>
<p>EXAMPLE: When playing a video game on a console, the system that allows the user to control the actions on the screen is a "black box." The player moves the joystick, presses buttons, etc. and inside the joystick and the console many actions take place that the user doesn’t see. All that is observed by the user is the input (moving the joystick) and the output (the display on the screen changes in accord with the movement of the joystick). </p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Method: A method is another word for a subprogram.</p>
<p>One of the fundamental parts of a computer program is the concept of a subprogram - repeatable sets of instructions that are only written once, but that can be used as many times as needed throughout the time the main program is functioning.</p>
<p>When the main program needs the work done that the subprogram was created to do, it “calls” the subprogram - that is, it uses a simple instruction to tell the computer to run that subprogram, and once the subprogram is done, to return to the main program and keep moving through the instructions in the main program.</p>
<p>Often, the main program will need to give the subprogram some information that it needs in order to perform its tasks.</p>
<p>Often, the subprogram will do its work and then provide the main program with some information derived from its work.</p>
<p>EXAMPLE: A subprogram could be written that calculates the average of a set of numbers. The main program could provide the subprogram with a list of numbers. The subprogram would calculate the average of the numbers. The subprogram would then return that average to the main program. The main program would then continue executing its instructions. It could call on that subprogram again whenever needed.</p>
<p>One of the main reasons for creating subprograms is so that the people creating programs don’t have to write the same set of instructions every time they want that particular set of actions to occur - instead, they just use the subprogram.</p>
<p>In addition to method and subprogram, there are other words in technology for this concept: function, subroutine, routine.</p>

$$$^G^ <Template-blank>##EndNum

<p>Private: The regular definition for this is “belonging to or for the use of one particular person or group of people only.”</p>

<p>In the popular programming language C#, private is used to protect some section of code from random access so it can't be damaged or changed by other parts of a computer program. </p>

<p>An “access modifier” is something that modifies what parts of the program can access a particular thing. </p>

<p>Access modifiers are usually applied to variables and methods in a class. Specifically, it means that if something is marked “private,” only the things in that class can access it. The word “private” is an access modifier.</p>

<p>EXAMPLE: If you wanted a class to have a method that could change a tax rate, and you wanted to protect that method from being executed by another part of the program, you could set the method to 'private', and only other methods in that class could use that method.</p>

$$$^G^ <Template-blank>##EndNum

<p>Public: Open to or shared by all the people of an area. </p>

<p>In C#, public is an access modifier used to denote that this piece of code is available to any other part of the program.</p>

<p>EXAMPLE: OpenSource software is public.</p>

$$$^G^ <MCSA>##EndNum

QUIZ: 
<p>1). The words method, function, subroutine, subprogram, routine mean the same thing.</p>
~~True CORRECT
~~False INCORRECT##EndNum

<p>2) The parent class inherits the state and behavior of the child class.</p>
~~True INCORRECT
~~False CORRECT##EndNum

$$$^G^ <Template-Video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Software Development Basics Part Six~~https://ttamediaservices-uswe.streaming.media.azure.net/4cd35748-fa40-4afd-8c51-6b53b4df7e1c/2018%20Software%20Development%20Basics%20Part%20Six.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~Which of the following are not part of a dictionary?:
~~Key INCORRECT
~~Subroutine CORRECT
~~Value INCORRECT##EndNum

<p>2) A dictionary is not a type of data structure.</p>
~~True INCORRECT
~~False CORRECT##EndNum

$$$^G^ <Template-blank>##EndNum

<p>We have provided the following article to further clarify object-oriented programming - including classes and objects. Though some of this data was covered earlier in your training, it is such an important subject that any restated content is worth repeating. The article looks at these topics from new vantage points and provides additional clarification.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>^G^ SUBMODULE B. Objects and Properties</p>

<p>^G^ CLASSES AND OBJECTS</p>

<p>^G^ There is a concept in creating a computer program called “classes”.</p>

<p>^G^ A class is an object, created from the mind of the computer programmer, that represents a type of thing the programmer wants to represent in the computer program.</p>

<p>^G^ Examples of objects include things like “integer”, “string”, “Student”, “Teacher”, “Email Processor”, “Database Access Service”, etc.</p>

<p>^G^ Objects have three aspects: Their structure, their behavior and their state.</p>

<p>^G^ Most computer programming languages have certain built-in objects that the programmer gets to use automatically. These are the common data types like “integer”, “string”, etc.</p>

<p>^G^ As an example of the concepts of “structure”, “behavior” and “state”, we can look at the object known as an integer.</p>

<p>^G^ Structure here is relatively simple: an integer is a quantity - a number. It usually can be positive (10.5, for example), negative (-1560.7, for example), or zero (0). Due to the need to manage the use of the available memory locations in the computer, it will have maximum positive and negative limits - say, from 65,536 to -65,535.</p>

<p>^G^ Behavior here is also pretty straightforward - an integer object has behavior related to mathematical operations. That is, the object can be used to perform operations like addition, subtraction, multiplication, division, etc.</p>

<p>^G^ State refers to the value or condition of the data represented by the object at any given point in time. Here, with an integer, the “state” is the actual number for a given object of the type “integer” at any point in time. For example, if a program were making use of an integer called “Age”, its state might be “24”, and be used to represent the age of a person.</p>

$$$^G^ <Template-blank>##EndNum
<p>^G^ OBJECTS</p>

<p>^G^ The programmer doesn’t need to define the structure and behavior of these built-in objects. They are often called “primitive types”, in that they are data types that are the simple, well-known, common data types any programming language will need to do usual common operations. The programmer can simple write a computer program that creates objects of those types, gives them a certain state, and performs the built-in behaviors with them.</p>

<p>^G^ Often, though, the programmer will need to define their own objects. In the examples given above, these are objects like “Student”, “Email Processor”, etc. Here, the object needed is unique to the problem the programmer is trying to solve through the creation of a computer program.</p>

<p>^G^ These custom objects, also called custom types, are one of the main tools a programmer has to create useful computer programs. Here, the programmer can represent useful objects, often modeled on real-world objects, that the program can create, modify and delete in order to make a useful computer program.</p>

$$$^G^ <Template-blank>##EndNum

<p>^G^ CLASSES</p>

<p>^G^ One of the more important custom data types a programmer can create is a type of object called a “class”.</p>
^G^  
<p>^G^ Classes are not actually objects themselves. Instead, they provide a template that actual objects can be created from. The programmer defines the structure of a potential object, as well as the behaviors available to that potential object. Then, when the program needs to make use of an object of the type defined in a certain class, the program created an actual object of that type, gives it state, and then performs the behaviors defined for it in the class definition.</p>
^G^  
<p>^G^ This action of creating an actual example of the object defined by a class is called “instantiation”, and the created object is called an “instance” of the class.</p>

<p>^G^ Objects so created can also be referred to as a “class object” or “class instance.”</p>

<p>^G^ You can think of the class definition as an answer to the question of, “If I were a [type of object], what would I look like and what could I do?” Here, “what would I look like” refers to the structure of the potential object, and “what could I do” refers to the behavior of the potential object.</p>

$$$^G^ <Template-blank & Transition List>##EndNum

<p>EXAMPLE OF A CLASS</p>

<p>^G^ Here is an example, to make these concepts a bit more real:</p>

<p>^G^ Let’s say the question were, “If I were a vehicle, what would I look like and what could I do?”</p>
<p>^G^ The structure of a vehicle would include such things as:</p>
~~^G^ An energy source that can provide the motive force to move the vehicle. Examples might be “a gasoline engine” or “an electric motor”.
~~^G^ A physical form that implements the primary purpose of the vehicle. Examples might be “sedan”, “convertible”, “pickup truck”, etc.
~~^G^ One or more doors to provide entrance and egress for the people operating or being transported by the vehicle.
~~^G^ A mechanism for increasing the speed of the vehicle. Examples might be “an accelerator pedal” or “a speed lever”.
~~^G^ A mechanism for decreasing the speed of the vehicle. Examples might be “a brake pedal” or “a brake lever”.
~~^G^ A mechanism for steering the vehicle. Examples might be “a steering wheel” or “a steering lever”.
~~^G^ A speed at which the vehicle is traveling. Examples might be “55 miles per hour”, “10 feet per second”, or “0”.##EndNum

<p>^G^ Another term for these structure elements is “Properties”.</p>

<p>^G^ The behaviors of a vehicle would include such things as:</p>
~~^G^ Accelerate the vehicle.
~~^G^ Slow the vehicle.
~~^G^ Stop the vehicle.
~~^G^ Steer the vehicle to the right.
~~^G^ Steer the vehicle to the left.##EndNum

<p>^G^ This would be an example of the definition of a “Vehicle” class. Again, this wouldn’t be referring to any vehicle in particular, but instead to the concept of a vehicle - what things must any vehicle have, and what things can you do with or to a vehicle, if you had one.</p>

<p>^G^ When the computer program had need for a vehicle, it would be directed to use this class definition to create, or “instantiate” one. Specifically, it would create an object of type “Vehicle”. At that point, the program would set aside parts of the computer memory to keep track of the properties of that particular object of the Vehicle class.</p>

<p>^G^ The computer program would then be directed to set the state of this new object of the Vehicle class. It would have to have specific values for the properties of this Vehicle - what type of engine it had, what physical form it was built to, what kind of steering mechanism it had, etc. Probable it would get these values from the user of the computer program.</p>

$$$^G^ <Template-blank & Table>##EndNum

<p>^G^ OBJECT EXAMPLES</p>

<p>^G^ Here are two examples of instantiated objects of the type Vehicle:</p>

<p>^G^ Vehicle 1:</p>
<p>^G^ Energy source: gasoline engine</p>
<p>^G^ Physical form: Pickup truck</p>
<p>^G^ Number of doors: 2</p>
<p>^G^ Mechanism for increasing speed: Accelerator pedal</p>
<p>^G^ Mechanism for decreasing speed: Brake pedal</p>
<p>^G^ Mechanism for steering the vehicle: Steering wheel</p>
<p>^G^ Speed: 0</p>

<p>^G^ Vehicle 2:</p>
<p>^G^ Energy source: electric motor</p>
<p>^G^ Physical form: Sedan</p>
<p>^G^ Number of doors: 4</p>
<p>^G^ Mechanism for increasing speed: Accelerator pedal</p>
<p>^G^ Mechanism for decreasing speed: Brake pedal</p>
<p>^G^ Mechanism for steering the vehicle: Steering wheel</p>
<p>^G^ Speed: 0</p>

<p>^G^ At this point, the computer program can make use of the defined behaviors for objects of the Vehicle class. That is, the computer might execute an instruction to “Increase speed of Vehicle1 by 10 miles per hour once a minute until its Speed property is 40 miles per hour”, or “Steer Vehicle2 to the right”.</p>

$$$^G^ <Template-blank>##EndNum

<p>INHERITANCE</p>

<p>^G^ Certain computer programming languages implement another concept related to this concept of “classes”: They allow for the definition of classes that inherit the structure and behavior of another class, while also allowing for the addition of new properties and new behaviors. </p>

<p>^G^ This concept is called “inheritance” - that is, the second class “inherits” the structure and behavior of the first class. In this system, the first class is called the “parent” class and the inheriting class is called the “child” class.</p>

<p>^G^ Using our “Vehicle” class as an example, the programmer might create child classes like “Airplane” and “Helicopter”. Each of these child classes would automatically get the structure and behavior of the parent class (“Vehicle”), but the programmer could add certain structure and behavior elements particular to that type of object.</p>

<p>^G^ For example, the “Airplane” class might add properties like:</p>
~~^G^ A number of wings to provide lift
~~^G^ A number of engines##EndNum

<p>^G^ This “Airplane” class might add behaviors like:</p>
~~^G^ Take off
~~^G^ Land##EndNum

<p>^G^ This way of programming adds certain benefits for the computer programmer. One primary benefit is that they don’t have to write the same code more than once. Besides the fact that it saves time, this is valuable because the programmer can make a change in the parent class and all its children then can make use of that change.</p>

<p>^G^ For example, the programmer might add the properties to the Vehicle class “A number of passengers” and the behaviors “Load a passenger” and “Remove a passenger”. Now, the children of the Vehicle class (“Airplane” and “Helicopter”) can use those properties and behaviors with no further work from the computer programmer.</p>

$$$^G^ <Template-blank>##EndNum

<p>^G^ PRIVATE VS. PUBLIC</p>
^G^  
<p>^G^ When writing code, you can determine which portions of your code is private or public.</p>
^G^  
<p>^G^ Public would refer to elements of the class that can be accessed or changed by objects of another class. Private would refer to sections of code that can’t be accessed or changed by anything outside of that class itself.</p>
^G^  
<p>^G^ Let’s say we have a “Student” class and an “Teacher” class. If the Student class had a public property called “Grade Point Average”, the Teacher class would be able to have a behavior that could access and change the “Grade Point Average” property of any particular instance of the Student class.</p>

<p>^G^ If, on the other hand, the Student class had a private property called “Name”, objects of the Teacher class could not have a behavior that allowed them to access and change that “Name” property.</p>
^G^  


$$$^G^ <Gapfill>##EndNum
QUIZ:

~~Which of the following points is not an aspect of an object?
~~Structure INCORRECT
~~Behavior INCORRECT
~~Integer CORRECT
~~State INCORRECT
~~Which of the following terms is best defined as: “A _____ provides a template that actual objects can be created from.”
~~^G^ Class CORRECT
~~^G^ Object INCORRECT
~~^G^ Private INCORRECT
~~^G^ Public INCORRECT##EndNum

~~^G^ Which of the following fills the blanks?: This action of creating an actual example of the object defined by a class is called _____, and the created object is called an _____ of the class.
~~^G^ Formatting/format INCORRECT
~~^G^ Occurence/occuring INCORRECT
~~^G^ Fragmentation/fragment INCORRECT
~~^G^ Instantiation/instance CORRECT##EndNum

~~^G^ Another word for “structure elements” is:
~~^G^ Attributes INCORRECT
~~^G^ Properties CORRECT
~~^G^ Methods INCORRECT
~~^G^ Behavior INCORRECT##EndNum

$$$^G^ <Template-blank>##EndNum

<p>ASSIGNMENT:</p>

<p>Write out an example of a class with objects (meaning, create your own example class and objects with structure, behavior and state) and email it to a Tech Academy Instructor:</p>

<p>NOTE:</p>
<p>To send in your assignment, you can use the message system within this LMS, or email an Instructor at:</p>

~~Academy of Learning students: 	academyoflearning@learncodinganywhere.com ##EndBull

<p>^G^ SUBMODULE C. The Application Lifecycle and the Stack</p>

$$$^G^ <Template-video>##EndNum

<p>Watch the following video in full:</p>
<p>VIDEO~~Common Computer Programming Concepts Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/48c9f9d4-68ff-46b8-a5de-378f42fb4963/2018%20Common%20Computer%20Programming%20Concepts%20Part%20One.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ:
~~What does ALM stand for?
~~Assistant Language Memory INCORRECT
~~Application Lifecycle Management CORRECT
~~App Lifetime Mapping INCORRECT
~~Applications of Literal Managers INCORRECT##EndNum

~~Which of the following is not a data type?
~~Boolean INCORRECT
~~Float INCORRECT
~~Memory CORRECT
~~String INCORRECT
~~Integer INCORRECT##EndNum

$$$^G^ <Template-blank & Image>##EndNum
<p>Intellisense: A feature in the Integrated Development Environment “Visual Studio” that helps aid rapid software development by helping to predict what you may want to type when you are writing computer code.</p>

<p>This picture shows the use of Intellisense; it's similar to predictive text on your cell phone:</p>
<img src="cid:Image_0.png" />


$$$^G^ <Template-blank>##EndNum
<p>Server side: The electronic files that make up a website are stored on specialized computers called web servers. These computers accept requests from other, remote computers for specific web pages, and deliver those files needed to make the web page display on the remote computer. The type of program you would use to view web pages is called a web browser. It is this program that would make the requests to the web server for the website files.</p>
<p>In this system, there are two broad areas of operation: computer operations on the web server, and computer operations on the remote computer with the browser program (the "client" computer). These two areas are called "server side" and "client side."</p>
<p>When the web server receives a request for a web page, the server may have several computer operations it needs to do in order to retrieve, format and send the web page. These operations are called "server side" operations. Similarly, on the client computer, the web browser may have several operations it needs to do in order to receive, format and display the web page. These operations are called "client side" operations.</p>
<p>EXAMPLE: If you requested to view a web page about the top 10 most popular news stories of the week, the server would likely have to execute a computer program that could search through a stored collection of news articles and their accompanying popularity rankings, retrieve the top ten articles, insert the text of those stories into the web page data it was preparing, and then send the web page data back to your computer. Those operations are all server side operations.</p>

$$$^G^ <Template-blank &  Image>##EndNum
<p>Console: This is an input/output device for a computer. It allows the user to view certain data about the computer, and to enter data and instructions into the computer. A console typically consists of a screen (for output) and a keyboard (for input).</p>
<p>EXAMPLE: When setting up very large computers, a common arrangement is to have the computer itself in a large room where the temperature and humidity can be controlled, and where physical access to the computer can be controlled. In order for users to see information and enter information, consoles are placed in locations outside the computer room. The consoles are connected to the computer, and computer operators use the consoles to give the computer instructions and see the results of the computer’s operations. </p>

<img src="cid:Image_0.jpg" />

$$$^G^ <Template-blank>##EndNum

<p>Active Directory: To understand what this word means, first you need to know what “directory,” “service,” “authentication” and “authorization” are.</p>
<p>A directory is something (such as a book) which contains listings of information in an organized manner.</p>
<p>A service is a system (a group of things that work together in an orderly fashion - a computer system is a full computer set up with everything you need to make it run) which supplies something to other systems.</p>
<p>Authentication is the process of verifying that an individual is, in fact, who they say they are. This can be important in computers as computers often store private data.</p>
<p>Authorization is the process of checking whether a specific individual is allowed to access a particular computer, website or other place/area/system.</p>
<p>Authentication and authorization often work together in computers - the computer first authenticates a person’s identity; if they are who they say they are, then the computer checks whether they are authorized to access the thing they are trying to get into.</p>
<p>Active Directory is software from Microsoft that provides central authentication and authorization services for computers. It is used by a system administrator (someone that manages a system of computers and their associated equipment and computer software) to store information about users, assign security policy and deploy software. It can be used in organizations of all sizes, from administering one user to hundreds of thousands of users.</p>
<p>EXAMPLE: Active Directory could be used in a large company to store all user names and passwords on a network.</p>

$$$^G^ <Template-blank>##EndNum
<p>Batch File: A computer file containing a list of instructions to be carried out in order. These are most often used in the Windows operating system.</p>
<p>EXAMPLE: Batch files can be used to simplify repetitive tasks.</p>

$$$^G^ <MCSA>##EndNum

~~Are web browser operations server side or client side operations?
~~Client side CORRECT
~~Server side INCORRECT##EndNum

<p>2) Which OS most commonly uses batch files.</p>
~~^G^ Mac OS X INCORRECT
~~iOS INCORRECT
~~Windows CORRECT
~~Linux INCORRECT##EndNum

$$$^G^ <Template-Video>##EndNum

<p>Watch the following video in full:</p>
<p>VIDEO~~Common Computer Programming Concepts Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/1e11eb7f-15dd-4baa-bc5a-3329db5a3bf0/2018%20Common%20Computer%20Programming%20Concepts%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ:
~~Which of the following is not typically included as part of a stack?
~~OS INCORRECT
~~Database INCORRECT
~~Web server INCORRECT
~~Programming language INCORRECT
~~Hard drive CORRECT##EndNum

~~What does LAMP stack stand for?
~~Linux Apache MySQL PHP CORRECT
~~Language Application Mapping Program INCORRECT
~~Listing App Maker Procedure INCORRECT
~~Lamp Auxiliary Myriad Programming INCORRECT##EndNum

$$$^G^ <Template-blank>##EndNum
<p>MS-DOS: Stands for Microsoft Disk Operating System. </p>
<p>One of the early popular operating systems for personal computers was MS-DOS. This was an operating system that Microsoft created for the multinational technology company International Business Machines (IBM) in the early 1980s.</p>
<p>MS-DOS was initially used for personal computers manufactured by IBM; later, many computer manufacturers began creating computers based on the IBM design, and these computers usually used MS-DOS as their operating system. </p>
<p>EXAMPLE: MS-DOS is not in use any longer but if you bought a computer in the mid 1980s, it would likely have MS-DOS installed.</p>

$$$^G^ <Template-blank>##EndNum

<p>File Transfer Protocol: A protocol is a set of rules governing the exchange of data between devices.</p>
<p>File Transfer Protocol is abbreviated “FTP." This is the standard protocol used to transfer files from one computer to another computer, using the Internet.</p>
<p>FTP is mainly used for the transfer of information (in the form of files) from one computer to another over the Internet.</p>
<p>EXAMPLE: If you were maintaining a website, you might be creating some of the electronic files that make up the website on a computer at your office, but you'd need to send those files to the web server. You could send those files from your computer to the web server using an FTP client program. That program would copy the files, format them to conform to the File Transfer Protocol, and then send them to the web server. The web server, itself equipped with FTP client software, would receive the files and store them in its memory storage.</p>

$$$^G^ <Pages 147-150: Tabs or Collapsible>##EndNum

<p>Query: Structured Query Language (SQL) is a language used to monitor and operate databases. SQL can be used to create and modify databases; as well, it can be used to edit, change, modify, and delete, etc. the data in databases. </p>

<p>In general, a query is a question that is usually expressed in a formal way. </p>

<p>In coding, a query is a way to ask a database to bring up specific data from the full set of data in the database. Queries are utilized in SQL. For example: SELECT FROM Customer Database would be a query in SQL.</p>

<p>EXAMPLE: If you had a database that contained records of all the sales of a large company, you might write a query that gathered the total dollar amount of sales for each quarter of the last year, organized by product line.</p>

~~##EndNum

<p>Normalization: When working with databases, database normalization is the process of organizing the tables in the database to eliminate data redundancy.  Data redundancy in a database refers to a situation where you're storing the same data in more than one table in the database. This leads to problems in using the database – not the least of which is the fact that when a particular piece of data changes, you now have to change it in two or more places in the database.  Normalization can be done on a gradient basis. This means that there is a minimum arrangement in order to consider a database normalized, and there are increasingly efficient ways of organizing and using the data, leading to a fully-optimized database.  The minimum level of normalization is called “First Normal," or “1NF."  What this basically means is that the tables you have created in your database separate out the various types of data you are tracking in the database so that each field in a table will only hold one piece of data. </p>

<p>EXAMPLE: For example, if you've been tracking a field called “telephone number” for a customer, and you then learn that a customer might have two phone numbers, you wouldn't want to store two phone numbers in one field. This would make it difficult to use the data in the table, and the table could be described as violating “normal” form.</p>

~~##EndNum

<p>Primary Key: A key is a piece of data that is used to uniquely identify a specific row in a table in a database. No two rows in a table can have the same key. If someone attempts to add a row to that table with a key that is the same as a key used in an existing row, the row will not be added to the table.</p>

<p>EXAMPLE: In the real world this would be a Social Security Number – many people may have the same exact name, but no two people can have the same Social Security Number. The SSN is therefore a “unique identifier” for an individual citizen.</p>

<p>In database tables, primary keys are often numbers – for example, “32546” or “33298." The important thing is that no two primary keys are ever identical. Often, these primary keys are called “ID”s, where “ID” stands for “Identification." This is because the primary key “identifies” the unique row in the table.</p>

<p>EXAMPLE: The Customer ID column in the below table would be the primary key:</p>


<p>Customer ID</p><p>First Name</p><p>Last Name</p><p>Date of Birth</p><p>1</p><p>Patrick</p><p>Meyer</p><p>07-14-87</p><p>2</p><p>Derek</p><p>Caudle</p><p>02-31-69</p><p>3</p><p>Brett</p><p>McCrea</p><p>04-05-73</p>

~~##EndNum
<p>Foreign key: A foreign key is a column in one table that holds the data from a primary key in another, related table. This is how the relationships between different tables are established.</p>

<p>EXAMPLE: The following diagram shows the relationship between a primary key and foreign key on two separate tables:</p>

<img src="cid:Image_0.png" />
$$$^G^ <Gapfill>##EndNum

QUIZ:
 
<p>1)    What does MS-DOS stand for?</p>
<p>a.     Microsoft Disk Operating System CORRECT</p>
<p>b.     Microprocessor Digital Operation Signal INCORRECT</p>
<p>c.     Micro Data Oscillation Systems INCORRECT</p>
<p>d.     Macro Digit Operation Signification INCORRECT</p>
 
<p>2)    All modern computer run off the MS-DOS operating system.</p>
<p>a.     True INCORRECT</p>
<p>b.     False CORRECT</p>
 
<p>3)    What does FTP stands for?</p>
<p>a.     Filing Transmission Procedure INCORRECT</p>
<p>b.     Folder Type Policy INCORRECT</p>
<p>c.     Folders and Typing Passage INCORRECT</p>
<p>d.     File Transfer Protocol CORRECT</p>
 
<p>4)    A ____ is a piece of data that is used to uniquely identify a specific row in a table in a database. No two rows in a table can have the same ____. If someone attempts to add a row to that table with a ____ that is the same as a ____ used in an existing row, the row will not be added to the table.</p>
<p>a.     Name INCORRECT</p>
<p>b.     Assignment INCORRECT</p>
<p>c.     Key CORRECT</p>
<p>d.     Title INCORRECT</p>

<p>5) Which of the following statements is true:</p>
~~Foreign and primary keys are the same thing. INCORRECT
~~Foreign keys hold data from primary keys in separate, similar tables. CORRECT
~~Primary keys hold data from foreign keys in separate, similar tables. INCORRECT##EndNum

<p>^G^ SUBMODULE D. Data Manipulation</p>

$$$^G^ <Template-video>##EndNum

<p>Watch the following video in full:</p>
<p>VIDEO~~Common Computer Programming Concepts Part Three~~https://ttamediaservices-uswe.streaming.media.azure.net/33c6f835-b518-46cc-8600-0323e52f3f28/2018%20Common%20Computer%20Programming%20Concepts%20Part%20Three.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ:
~~Which of the following is not a type of programming language?
~~Advanced language CORRECT
~~Scripting language INCORRECT
~~Markup language INCORRECT
~~Object-oriented programming language INCORRECT 
~~_____ is a purpose-built piece of software that helps a company in whatever their line of business is.
~~Web-based application INCORRECT
~~Line of Business Application CORRECT
~~Browser-based software INCORRECT
~~Console App INCORRECT##EndNum

$$$^G^ <Template-blank>##EndNum
<p>Oracle: One of the largest software companies, whose primary business is database products. </p>
<p>Oracle was the first company to support Structured Query Language (SQL).</p>
<p>EXAMPLE: One of the most popular software programs sold by Oracle is called Oracle Database. It is used by many companies around the world.</p>

$$$^G^ <Template-blank>##EndNum
<p>Data integrity: The validity of data; the accuracy and consistency of the stored data. This can also be used as a verb, where it means “to maintain and assure the accuracy and consistency of data over its entire life-cycle."</p>
<p>Often, this term is used when describing the creation and operation of databases. A database is an organized collection of related data, typically for use on a computer.</p>
<p>Data integrity is imposed within a database as it is being designed and is consistently maintained through checking to see if the data being added and updated are up to standards. These standards are defined by the database management system (software used to edit databases) and by the software developer.</p>
<p>EXAMPLE: Say you have a form you are filling out on your computer in order to sign up for a library card. The data you enter into the form will eventually be stored in a database, where it can be retrieved at a later date by computers. </p>
<p>There could be a spot on this form where you have to enter your age. If the database is expecting you to enter a number, and you do in fact enter a number, like “29," the data integrity of the database will be maintained.</p>
<p>If you instead spell out your age, like “twenty-nine," it could produce problems if that were actually to be stored in the database. For example, if the computer were to try to identify all people in the database who were older than 21, it would most likely not be able to properly interpret the words “twenty-nine” as a number, and therefore would not identify you as being over 21.</p>
<p>That would be an example of not maintaining data integrity. If, on the other hand, the computer checked the data quality before storing it in the database and prompted you to enter a number instead of letters, then it would be an example of maintaining data integrity.</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Object relational mapping: In general, mapping is the creation of a system that connects one thing to another - essentially, it answers the question "how do I get from here to there."</p>

<p>Object Relational Mapping is abbreviated “O/RM." Essentially, it is a program that maps between objects in a program and tables in a database.</p>

<p>In the database, you will find tables of data along with descriptions of how the data relates to other data in the database. </p>

<p>In the computer program, you will find objects.  </p>

<p>Often, the tables in a database correspond to types of objects in the program. Each row in a particular table might correspond to a particular object of a certain type.</p>

<p>As the program operates, it may change the state of a particular object. In order to keep a record of that object’s new state, you might want to make a change to the row in the database that represents that particular object.</p>

<p>Writing a program that does this is time-consuming. It is a very common thing that's needed in many situation.</p>

<p>This task is made easier through the use of an Object Relational Mapper program. It can keep track of the mapping between various object types in a program, and the corresponding data in a database, and ensure they are kept in sync.</p>

<p>EXAMPLE: If you had a program that kept track of the inventory of a custom bicycle manufacturing company, and that program used a database to keep a permanent record of all bicycles built and sold by the company, you might use an Object Relational Mapper to help your program keep itself in sync with the data in the database.</p>

$$$^G^ <Template-blank>##EndNum

<p>Entity Framework: The Entity Framework is an O/RM. It gives developers an automated mechanism for accessing and storing the data in the database from within the program code. O/RM is capable of connecting C# code (a programming language from Microsoft) and the database, allowing the user to code and directly interact with the database through using C#. It allows the programmer to code a lot more effectively.</p>

<p>EXAMPLE: You could create a whole database, with many tables, and the Entity Framework could automatically create all the C# classes and methods needed to create, read, update and delete data in the database.</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Argument: When the main program needs the work done that the subprogram was created to do, it “calls” the subprogram - that is, it uses a simple instruction to tell the computer to run that subprogram, and then, once the subprogram is done, to return to the main program and keep moving through the instructions in the main program.</p>
<p>Sometimes the subprogram needs some information from the main program in order to perform its tasks. When the subprogram is created, its description might include this information. That information is called the “parameters” of the subprogram.</p>
<p>Often, the subprogram will do its work and then provide the main program with some information derived from its work. That is called returning information to the main program.</p>
<p>EXAMPLE: You might have a subprogram that adds two numbers. It could look like this:</p>
<p>subprogram AddTwo(x, y)</p>
<p>{ return x + y }</p>
<p>Here, the name of the subprogram is “AddTwo”. The parameters of the subprogram are two numbers, called x and y. The subprogram will return the sum of those two numbers.</p>
<p>The creation of a subprogram, as shown above, is called “defining” the subprogram. The above is an example of a subprogram definition. When a main program needs to use the subprogram, it “calls” the subprogram.</p>
<p>Let’s look at how that would be used in a main program. Say you had a school with two Physical Education classes per day, and you wanted to have the program calculate the total number of students in those classes. You could make a main program that made use of our “AddTwo” subprogram. It might look like this:</p>
<p>classSizePE1 = 25</p>
<p>classSizePE2 = 43</p>
<p>totalSize = AddTwo(classSizePE1, classSizePE2)</p>
<p>print “The total number of students in the PE classes is: ” totalSize</p>
<p>Let’s look at this program one line at a time.</p>
<p>Line 1: The main program created a variable called “classSizePE1” and gave it a value of 25.</p>
<p>Line 2: The main program created a variable called “classSizePE2” and gave it a value of 43.</p>
<p>Line 3: There are five things happening here. </p>
<p>First, the main program created a variable called “totalSize”. </p>
<p>Second, the main program called the subprogram “AddTwo”. That subprogram was given the values 25 and 42, since those are the values of the variables “classSizePE1” and “classSizePE2”. </p>
<p>Third, the subprogram “AddTwo” performed its work, taking the values 25 and 43 and adding them together to create the value 68. </p>
<p>Fourth, the subprogram returned that value to the main program. </p>
<p>Fifth, the main program gave that value to the variable “totalSize”.</p>
<p>Line 4: The main program then continued running. Here, the program used the value of the variable totalSize to display this text on the screen:</p>
<p>The total number of students in the PE classes is: 68</p>
<p>This brings us to the concept of arguments. Arguments are the actual data passed to a subprogram when it is called. In the above example, the arguments are are the numbers 25 and 43. </p>
<p>This comes from mathematics. In mathematics, there are formulas. These are exact math operations that are done in an exact order. Typically, these math formulas need to be given some initial values to start processing the math steps. Those initial values are called arguments.</p>
<p>A subprogram doesn't necessarily need any arguments. Some subprograms may take one argument; some may take more than one. </p>
<p>To clarify: when a subprogram is defined, any data items it will need are called parameters. When the subprogram is actually used, the actual data passed to it at that time is called arguments.</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:

<p>1)      Oracle is a software company that primary deals in databases.</p>
<p>a.       True CORRECT</p>
<p>b.       False INCORRECT</p>
<p>2)      How is “object relational mapping” abbreviated?</p>
<p>a.       ORM INCORRECT</p>
<p>b.       O.R.M. INCORRECT</p>
<p>c.       O/RM CORRECT</p>
<p>d.       O-R-M INCORRECT</p>

<p>3)      ____ are the actual data passed to a subprogram when it is called.</p>
<p>a.       Methods INCORRECT</p>
<p>b.       Arguments CORRECT</p>
<p>c.       Functions INCORRECT</p>
<p>d.       Parameters INCORRECT</p>
<p>4)      When a subprogram is defined, any data items it will need are called ____.</p>
<p>a.       Methods INCORRECT</p>
<p>b.       Parameters CORRECT</p>
<p>c.       Functions INCORRECT</p>
<p>d.       Loops INCORRECT</p>
 
$$$^G^ <Template-blank & Video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Common Computer Programming Concepts Part Four~~https://ttamediaservices-uswe.streaming.media.azure.net/72f8bb14-935d-4b1f-8470-2b54cf87e418/2018%20Common%20Computer%20Programming%20Concepts%20Part%20Four.mp4
</p>

$$$^G^ <Template-quiz>##EndNum
QUIZ:
~~What do you call that which “serves up applications”?:
~~Web server INCORRECT
~~Host computer INCORRECT
~~Application server CORRECT
~~Cloud computing INCORRECT##EndNum

<p>2) A _____ is run on one’s browser, with the database and most of the software stored on a server. </p>
~~Browser run program INCORRECT
~~Browser-based application CORRECT
~~Google Chrome INCORRECT
~~Browser software INCORRECT##EndNum

$$$^G^ <Learning Objectives Transition List>##EndNum

~~^G^ Learned the basics of object-oriented programming
~~^G^ Learned how to differentiate the elements of object-oriented programming
~~^G^ Learned important computer programming data
~~^G^ Discussed essential aspects of computer programs##EndBull

<p>^G^ <Learning Objectives List, 1.5-second interval></p>
<p>^G^ MODULE 5. Services and Structures</p>
<p>^G^ Learning objectives: </p>
~~^G^ Explain CPUs at an intermediate level
~~^G^ Draw out a flowchart
~~^G^ Utilize Windows registry
~~^G^ Describe the basics of data structures
~~^G^ Perform binary math operations##EndBull

<p>^G^ SUBMODULE A. Software Development Services and Tools</p>
$$$^G^ <Template-blank & Note>##EndNum


<p>Windows Azure: Azure is a bright blue color. It also refers to a small butterfly that is typically purple or blue.</p>

<p>Windows Azure (simply referred to as “Azure” for short) is a set of tools from Microsoft used for cloud computing. </p>

<p>Azure has tools for storing and managing databases, storing and running software programs, etc. - all on computers that aren't located where the user is.</p>

<p>The advantage is that the user (and their company) doesn't have to pay for the personnel and equipment needed to have all those computers operating. Since the computers that are being used are owned and managed by another company (Microsoft in this case), the owners can use them more efficiently and charge the users less money than the users would have to spend if they had to handle the personnel and equipment themselves.</p>

<p>EXAMPLE: Many companies host their websites and web applications on Azure.</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Float: A float is a data type that represents fractional numbers. This could be numbers like 5.3, -8.92, 1024.00, 3.14159625 etc. The behavior of this data type includes mathematical operations like addition, subtraction, etc.</p>
<p>A float variable would be declared and assigned like this:</p>
<p>float [variable name] = [fractional number]</p>
<p>EXAMPLE: You could have a computer keep track of the width of the crack in a metal shield over a radioactive material using a variable called “crackWidth”. You could set it to 2.43437 like this:</p>
<p>float crackWidth = 2.43437</p>

$$$^G^ <Template-blank & Note>##EndNum
<p>Floating point: A specific way of representing large numbers. Instead of writing out the entire number, you can write the first part of it and then a factor to multiply it by - such that performing the multiplication will get you pretty much the same number you would have written out in full. </p>
<p>When you do this, you move the decimal point in the number - hence the name "floating point."</p>
<p>EXAMPLE: Take the number three thousand, four hundred and twenty-five. Written normally it would be: 3425; written in floating point notation, it could be: 3.425 x 103. Since 103 is 1000, this means "3.425 times 1000," or 3425.</p>

<p>Remember that 10 to the 3rd power is one thousand - which means: "Take the number 3.425 and multiply it by one thousand." That would, of course, give you 3,425.</p>

<p>This is called floating point because you don't HAVE to have the decimal point in the same place when using floating point representation. For example, you could use this floating point representation for the exact same number above:</p>
<p>34.25 x 102.</p>
<p>Or you could use this:</p>
<p>0.3425 x 104.</p>
<p>These all resolve to the same amount: 3,425.</p>

<p>This method of writing and storing numbers is especially useful when dealing with very large numbers. For example, if you were dealing with this number: 4,275,982,213,844</p>

<p>Storing this number in a computer would take up a lot more memory than storing a smaller number like 3,425.</p>

<p>As a trade-off between the  magnitude of the number represented, and the accuracy of the number represented, you can use floating point representation. For example, the above large number could be represented as:</p>
<p>4.275982 x 1012.</p>

<p>This would be the same as: 4,275,982,000,000 (the original number was 4,275,982,213,844).</p>
<p>You would lose some accuracy, but use much less memory to store the number.</p>
<p>There are times when utilizing a floating point is useful; depending on the situation.</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
 
<p>1)      Which of the following is not a service provided by Azure?</p>
<p>a.       Storing and managing databases INCORRECT</p>
<p>b.       Storing and running software programs INCORRECT</p>
<p>c.       Deleting and transferring data from RAM CORRECT</p>
<p>d.       Sets of tools used for cloud computing INCORRECT</p>
 
<p>2)      Which of the following is not a float data type number?:</p>
<p>a.       6.79 INCORRECT</p>
<p>b.       -42.53 INCORRECT</p>
<p>c.       123.02942 INCORRECT</p>
<p>d.       45986 CORRECT</p>
 
<p>3)      The benefit of floating point numbers are that they are perfectly accurate. The downside is that they take up more memory than other approaches.</p>
<p>A.      True INCORRECT</p>
<p>B.      False CORRECT</p>

$$$^G^ <Template-video>##EndNum
<p>Watch the following video in full:</p>
<p>VIDEO~~Common Computer Programming Concepts Part Five~~https://ttamediaservices-uswe.streaming.media.azure.net/2c884480-73c9-405b-97aa-b773fbd1209d/2018%20Common%20Computer%20Programming%20Concepts%20Part%20Five.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:
~~A(n) _____ breaks code down into machine language (1s and 0s).
~~Translator INCORRECT
~~Converter INCORRECT
~~Assembler CORRECT
~~Interpreter  INCORRECT
~~High level language is machine language that a computer can understand. Low level language is code that is similar to English and easier for a human to understand.
~~True INCORRECT
~~False CORRECT##EndNum
<p>2) Compilers and interpreters operate in the same way and perform duplicate functions.</p>
~~True INCORRECT
~~False CORRECT##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch the following video in full:</p>
<p>VIDEO~~Common Computer Programming Concepts Part Six~~https://ttamediaservices-uswe.streaming.media.azure.net/13359bdb-9d12-47bb-9947-e82401023602/2018%20Common%20Computer%20Programming%20Concepts%20Part%20Six.mp4
</p>

$$$^G^ <Gapfill>##EndNum
QUIZ:

~~A ____ is a collection of tools that assist in building software. 
~~Database INCORRECT
~~Framework CORRECT
~~DBMS INCORRECT
~~SQL Server INCORRECT##EndNum

~~Which of the following is not included in a framework?
~~Compiler INCORRECT
~~Documentation INCORRECT
~~Hardware CORRECT
~~Interpreter INCORRECT##EndNum

~~_____ is a database management system. It is not a database - it’s software that manages databases.
~~MySQL CORRECT
~~JavaScript INCORRECT
~~HTML INCORRECT
~~CSS INCORRECT##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>^G^ SUBMODULE B. The Registry and Flowcharts</p>

<p>Registry: A place where records are kept.</p>

<p>In Windows computers, the registry is a database that stores the settings of the operating system and some applications. The registry contains data, options, settings, and other information for hardware and program installed on the Window OS.</p>

<p>EXAMPLE: When a program is newly installed, instructions related to the program (such as how to start the program and which version of the program it is) is stored in the registry.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>Note: Changes made in the registry can destroy a computer and make it unusable. The student is not to make any changes in the registry of any school computer.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>REGISTRY </p>

<p>The Windows operating system needs one central place to store data related to how it handles various aspects of its various functionality. For example, a program installed on a computer will often ask the user to specify certain preferences about how the program appears or functions. </p>

<p>Those preferences can be stored in the registry. This same concept applies to many of the programs that come built-in to the Windows OS - you may have preferences set for the built-in Paint application, for example - those preferences are stored in the registry. Think of the registry as a built-in database that Windows uses to store settings about the various hardware and software installed on the machine. </p>

<p>You can access the registry on your own, as the user of the computer, by using a special program that comes with Windows. It's called 'The Registry Editor'. You can also write code in your programs that accesses data in the registry. Occasionally, you'll be working on a program that uses the registry to store settings. You may need to modify this code, so it's helpful to know what the registry is and how it works. Often, this type of task will be worked on by a more experienced developer. There can be situations where you have to remove and reinstall a piece of software that you're using. </p>

<p>Occasionally, the settings from the previous installation of the program can persist in the registry, and cause issues with the new installation. You may need to edit the registry to remove the previous settings. This is something you'll probably want the advice of a more experienced developer on. If you change or delete certain settings in the registry, you may cause problems with certain important programs used by Windows, or even with the Windows program itself - after all, the Windows operating system is itself just a large, complex software program, and many of the settings it uses to operate are stored in the registry.</p>

$$$^G^ <MCSA>##EndNum

~~Which of the following is not ever stored in the registry?
~~Settings INCORRECT
~~Information related to hardware INCORRECT
~~Websites CORRECT
~~Which version of the software it is INCORRECT##EndNum

<p>2) Making changes to the registry is safe because the data stored there is not important.</p>
~~True INCORRECT
~~False CORRECT##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>HOW TO USE THE REGISTRY</p>

<p>The Windows registry is a special location where the OS, software, and driver configurations are</p>
<p>managed. Anytime a piece of software is installed, special parameters specific to that piece of software are saved in the form of a “key?” and “value”? pair within the Registry called a “subkey?”.</p>

<p>Generally, whenever the piece of software is executed, the software will check for these subkeys to help determine aspects such as user preferences. What is stored within a subkey is left solely to the software developer. The data saved may be in the form of a file path, hexadecimal, binary, or string value.</p>

<p>While software may be written to silently access and edit subkeys, there really is little need for</p>
<p>the average user to make any changes within the Windows Registry without specific instructions to do so by the software vendor.</p>

<p>However, there is a tool that users can launch to manage the Window’s Registry. This is done by using built-in software called, Windows? ?Registry? ?Editor? or Regedit.exe?.</p>

<p>To do so you would open the RUN? command line and type in: “regedit?” and press enter. This will</p>
<p>launch the regedit.exe. Before you begin to browse or make any changes, it is always the best idea to make a backup of your system's registry before any changes are made. If anything goes awry after you exit the Windows Registry, you may simply double click on the restore file you had exported to reinstate the registry back to its working condition before any changes were made.
</p>
<p>“Hierarchical” refers to “rank” or “importance.” A hierarchical database refers to data organized in a tree-like structure. Data is stored as records which are connected by links. Here is a diagram:</p>
<img src="cid:Image_0.png" />

<p>The Windows Registry is considered a hierarchical database of registry entries called a hive. </p>
<p>Each root key will branch out into subkeys and each of those subkeys may be further branched out into their own sub-branch of subkeys and so on and so forth...</p>

<p>The basic chemistry of a subkey is a Key and a value. When a specific key is highlighted, the</p>
<p>value is displayed. To make a change, right click the value field and select, “Modify?” and make your changes accordingly. Once satisfied, all your changes may be executed by selecting “Save?” under “File?” in the menu.</p>

$$$^G^ <MCSA>##EndNum

~~What should you do before making any changes to the registry?
~~Delete all cookies INCORRECT
~~Backup the system’s registry CORRECT
~~Restart your computer INCORRECT
~~Disconnect from the internet INCORRECT##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full and follow along with the Instructor on your laptop, performing the actions he takes:</p>

<p>VIDEO~~The Windows Registry~~https://ttamediaservices-uswe.streaming.media.azure.net/c5fcc4f6-063f-4689-b591-db105864b0e0/2018%20The%20Windows%20Registry.mp4
</p>

$$$^G^ <Template-blank>##EndNum

<p>FLOWCHARTS</p>

<p>A flowchart is simply a diagram that shows how to achieve a solution to a problem. Typically, a flowchart is created at the beginning of a project. They are a means of breaking down problems bit by bit in order to facilitate understanding of a problem or a complicated task. Very often, a flowchart helps to convey ideas to others in a way that is easy to understand. Just as an architect will create a blueprint for a project, a programmer should also create a blueprint before starting his or her project.</p>

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>

<p>VIDEO~~Flowcharts~~https://ttamediaservices-uswe.streaming.media.azure.net/3d1ff6a5-d59a-44e7-89e7-595ad8c7cb6b/2018%20Flowcharts.mp4
</p>

$$$^G^ <Template-Image>##EndNum
<p>
As covered in the last video, flowcharts are composed of symbols. Here are common symbols that are used in flowcharting:</p>
<img src="cid:Image_0.png" />

<p>Here is an example of flowchart:</p>

<img src="cid:Image_0.png" />

$$$^G^ <MCSA>##EndNum
QUIZ:

~~Which of the following symbols means indicates the beginning or end of a program?
~~<img src="cid:Image_0.jpg" /> ##EndNum


<p>B. <img src="cid:Image_0.png" /> CORRECT</p>




<p>C.</p>
<img src="cid:Image_0.png" />
<p>D.</p>
<img src="cid:Image_0.jpg" />

~~What does this symbol mean?##EndNum
<img src="cid:Image_0.png" />

~~Indicates a decision CORRECT
~~Indicates the beginning and end of a program
~~Indicates any type of data in the program
~~Indicates a delay in the program##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>ASSIGNMENT:</p>

<p>Draw out your own simple flowchart and email this to an Instructor.</p>

<p>For the purposes of this assignment, the flowchart should only have a few steps to it (like the earlier picture).</p>

<p>Here are some examples of how you can draw your flowchart:</p>
~~Hand draw it and send a picture of it.
~~Use this website: https://www.draw.io/
~~Use the program Paint (Windows) or Paintbrush (Macs).##EndNum

<p>NOTE:</p>
<p>To send in your assignment, email an Instructor at:</p>

~~Academy of Learning students: 	academyoflearning@learncodinganywhere.com ##EndBull

<p>^G^ SUBMODULE C. File Structure and the Command Line </p>

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full and follow along with the Instructor on your laptop, performing the actions he takes:</p>

<p>VIDEO~~File Structure and the Command Line Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/7b9c4cb5-257e-4cce-b81d-4875a6ca2af5/2018%20File%20Structure%20and%20the%20Command%20Line%20Part%20One.mp4
</p>


$$$^G^ <MCSA>##EndNum

QUIZ:

~~Which of the following terms is best defined as: “A location on a hard drive where you can store information that has its own address.”
~~Website
~~Cookie
~~Directory CORRECT
~~Software##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full and follow along with the Instructor on your laptop, performing the actions he takes:</p>

<p>VIDEO~~File Structure and the Command Line Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/94b4985d-daab-4945-ac81-0854d131d336/2018%20File%20Structure%20and%20the%20Command%20Line%20Part%20Two.mp4
</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>ASSIGNMENT:</p>

<p>Bring up the command line and list all of the files in the current directory by typing “DIR.”</p>
<p>Take a screenshot of this and email it to an Instructor. </p>

<p>NOTE:</p>
<p>To send in your assignment, you can use the message system within this LMS, or email an Instructor at:</p>

~~Academy of Learning students: 	academyoflearning@learncodinganywhere.com ##EndBull

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>

<p>VIDEO~~Additional Data on Binary~~https://ttamediaservices-uswe.streaming.media.azure.net/668cb9f0-8bce-42da-8408-50a5e686f446/2018%20Additional%20Data%20on%20Binary.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:

~~010101010 in binary is how much in decimal?
~~24
~~170 CORRECT
~~9
~~1,020##EndNum

<p>2) How do you write 83 in binary?</p>
~~0111101
~~01111111##EndNum
<p>C. 01101110</p>
<p>D. 01010011 CORRECT</p>

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>

<p>VIDEO~~Binary Addition~~https://ttamediaservices-uswe.streaming.media.azure.net/2f3e0932-e0dc-4f5d-9c21-6535fbd94f16/2018%20Binary%20Addition.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~In binary, what is 1001 + 0101?:
~~1101 in binary (13 in decimal)
~~1110 in binary (14 in decimal) CORRECT
~~1111 in binary (15 in decimal)
~~10011 in binary (19 in decimal)##EndNum


$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Binary Subtraction~~https://ttamediaservices-uswe.streaming.media.azure.net/5de6b958-c01b-4da1-bca5-ac846266b5ab/2018%20Binary%20Subtraction.mp4
</p>

$$$^G^ <Gapfill>##EndNum

QUIZ:
~~In binary, what is 1111 - 0110?:
~~0111 in binary (7 in decimal)
~~1110 in binary (14 in decimal)
~~1001 in binary (9 in decimal) CORRECT
~~0001 in binary (1 in decimal)##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Binary Multiplication~~https://ttamediaservices-uswe.streaming.media.azure.net/a7fd8ccc-88d9-4129-a64b-c6a29f3e0245/2018%20Binary%20Multiplication.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~In binary, what is 0100 X 0011?:
~~1100 in binary (12 in decimal) CORRECT
~~0111 in binary (7 in decimal) 
~~0110 in binary (6 in decimal) 
~~1000 in binary (8 in decimal)##EndNum


$$$^G^ <Template-video>##EndNum
<p>Watch this video in full:</p>

<p>VIDEO~~A Day in the Life of a Software Developer Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/ce23ee3a-6463-4b2c-8762-fca5bda55ded/2018%20A%20Day%20in%20the%20Life%20of%20a%20Software%20Developer%20Part%20One.mp4
</p>

$$$^G^ <MCSA>##EndNum


QUIZ:
~~Software Developers spend 90% or more of their time writing code.
~~True
~~False CORRECT##EndNum

~~Which of the following tasks are not common duties of a computer programmer?
~~Writing code
~~Fixing bugs
~~Selling software CORRECT
~~Collaborating with other developers##EndNum


$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>

<p>VIDEO~~A Day in the Life of a Software Developer Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/8bc0fa40-d002-4d49-8b15-6a4466fe1e0e/2018%20A%20Day%20in%20the%20Life%20of%20a%20Software%20Developer%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:

~~Which one of the following characteristics are not necessary to succeed as a developer?
~~Passion
~~Drive
~~Persistence
~~Genius CORRECT##EndNum

~~When handling a development project, it’s best to deliver what the client asked for instead of doing what you think is best.
~~True CORRECT
~~False##EndNum

$$$^G^ <Template-video>##EndNum
<p>Watch this video in full:</p>

<p>VIDEO~~Programming Languages Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/1edd2fc9-0ebd-4d50-b80f-9f7ba2fec4a9/2018%20Programming%20Languages%20Part%20One.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ:
~~Which one of the following would be considered “high level” code?
~~100110110101101
~~Print “Hello World” CORRECT
~~Prt R3 [L12, L13]
~~DIR 132/ACB/ext##EndNum

~~Which of the following converts all high-level language at once into machine language?
~~Interpreter
~~Compiler TRUE##EndNum

$$$^G^ <Template-video>##EndNum
<p>Watch this video in full:</p>

<p>VIDEO~~Programming Languages Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/dd085e1b-c902-42c1-966c-206a4bb3e661/2018%20Programming%20Languages%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum
QUIZ: 
~~Which of the following points is not a benefit of writing code using a high-level programming language?:
~~It’s faster to write than machine language
~~It resembles English
~~They don’t need an interpreter or a compiler to operate CORRECT
~~They are easier to learn than machine language##EndNum

~~Which one of the following terms is best defined as: “Pre-made software code. Miniature programs or parts of programs written by another that you can use in your own programs.”
~~Library CORRECT
~~Compiler
~~Interpreter
~~High-level language##EndNum
 
$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>

<p>VIDEO~~Programming Languages Part Three~~https://ttamediaservices-uswe.streaming.media.azure.net/3105e6a8-1dec-43f7-8f9f-5f73a4f7f74d/2018%20Programming%20Languages%20Part%20Three.mp4
</p>

$$$^G^ <Template-blank & Note>##EndNum

QUIZ:
~~Which one of the following is not considered a characteristic of data types?
~~Value 
~~Function
~~Number CORRECT##EndNum

$$$^G^ <Template-video>##EndNum


~~##EndNum
<p>Watch this video in full:</p>

<p>VIDEO~~More on the CPU Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/cd9578a1-746d-417e-9700-24326f89766f/2018%20More%20Data%20On%20CPUs%20Part%20One.mp4
</p>
$$$^G^ <MCSA>##EndNum
QUIZ:
~~Which of the following is a “quad core processor?:
~~A chip with two independent units that read and execute CPU instructions.
~~A chip with four independent units that read and execute CPU instructions. CORRECT
~~A chip which process data four times faster than a single CPU.
~~Another word for CPU.##EndNum

~~What does a new CPU model typically mean?
~~The CPU is faster at processing data. CORRECT
~~The CPU is more expensive.
~~The CPU can store more data.
~~The CPU is easier to program.##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>

<p>VIDEO~~More on the CPU Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/9810c363-2354-4e7f-9af9-d3a5f6a98e10/2018%20More%20Data%20On%20CPUs%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:

~~Which of the following hardware configurations would process data faster?:##EndNum

~~Quad-core i7 processor and 16GB RAM CORRECT
~~i3 processor with 4GB RAM##EndNum

$$$^G^ <Template-video>##EndNum

<p>^G^ SUBMODULE D. Data Structures and Advanced Binary</p>

<p>Watch this video in full:</p>

<p>VIDEO~~Programming Basics~~https://ttamediaservices-uswe.streaming.media.azure.net/a6498885-b07a-4e60-9ab3-08c05b505d72/2018%20Programming%20Basics.mp4
</p>

$$$^G^ <MCSA or Gapfill>##EndNum

~~When you run a subprogram within a program, what is that referred to as?##EndNum

~~Data types
~~Calling a function CORRECT
~~Executing a program
~~Promulgating output##EndNum

~~ Functions, methods and routines are interchangeable terms.
~~True CORRECT
~~False ##EndNum

<p>3) Which one of the following terms best fills the blank?: ____ are things that a program needs to receive in order to do its job.</p>

~~Subprograms
~~Users
~~Parameters CORRECT
~~Calls##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Advanced Binary Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/08750136-8277-4790-b788-2776c9429aa2/2018%20Advanced%20Binary%20Part%20One.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~How would you write negative 4 in binary?
~~1100 CORRECT
~~1010
~~1001
~~0100##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Advanced Binary Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/e27c2b70-0ebf-4a79-abf8-fee041f99fbf/2018%20Advanced%20Binary%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~How would the decimal number .5 (½) be represented in binary?
~~1.0
~~01
~~0.01
~~0.1 CORRECT##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Advanced Binary Part Three~~https://ttamediaservices-uswe.streaming.media.azure.net/398a205e-85d7-4986-ac48-f3159c6adc60/2018%20Advanced%20Binary%20Part%20Three.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~Which one of the following terms are best defined as: “The numbers which are being used or taken into consideration by a computer.”
~~Significant digits CORRECT
~~Important bits
~~Valuable numerics
~~Processing size##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Advanced Binary Part Four~~https://ttamediaservices-uswe.streaming.media.azure.net/31783a9b-7bd5-479d-8c9e-1d13700bd0d2/2018%20Advanced%20Binary%20Part%20Four.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ:
~~Which of the following processors would process data the fastest?
~~8-bit processor
~~16-bit processor
~~32-bit processor
~~64-bit processor CORRECT##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Advanced Binary Part Five~~https://ttamediaservices-uswe.streaming.media.azure.net/edf7c1bb-ce2f-46a7-b89b-262be4ab811b/2018%20Advanced%20Binary%20Part%20Five.mp4
</p>

$$$^G^ <Gapfill or MCSA>##EndNum

QUIZ:
~~What is the technical word used to refer to the dot separating an integer and its fractional portion?
~~Decimal marker CORRECT
~~Comma
~~Point
~~Binary dot##EndNum

<p>2) How would you write the decimal number 4 ½ in binary?</p>
~~010.001
~~0110.010
~~0100.1 CORRECT
~~0000.0001##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Data Types and Data Structures Part One~~https://ttamediaservices-uswe.streaming.media.azure.net/c22f888f-cc55-4d83-97b8-7aacacebd48a/2018%20Data%20Types%20and%20Data%20Structures%20Part%20One.mp4
</p>



$$$^G^ <MCSA>##EndNum

QUIZ: 
~~Which one of the following terms is best defined as?: “Relates to the theory of how something works, as opposed to the actual implementation of it.”
~~Configuration
~~Abstract CORRECT
~~Substructure
~~Format##EndNum

~~Which one of the following terms is best defined as?: “Ordering a collection of data according to certain pre-established criteria.”
~~Arrange
~~Sequence
~~Abstract
~~Sort CORRECT	##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Data Types and Data Structures Part Two~~https://ttamediaservices-uswe.streaming.media.azure.net/55fcc4b7-2220-47bb-8a01-8b7711b8b6f3/2018%20Data%20Types%20and%20Data%20Structures%20Part%20Two.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ: 

~~What does “traversing” mean?:
~~Deleting
~~Traveling through CORRECT
~~Sorting
~~Array##EndNum


$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Data Types and Data Structures Part Three~~https://ttamediaservices-uswe.streaming.media.azure.net/10955560-f02e-4c02-98bc-afcbd3b6a382/2018%20Data%20Types%20and%20Data%20Structures%20Part%20Three.mp4
</p>

$$$^G^ <MCSA>##EndNum

QUIZ: 
~~Which number is located in the position zero in the following array?: ##EndNum
<p>4598703</p>
~~5
~~4 CORRECT
~~9
~~0##EndNum

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Data Types and Data Structures Part Four~~https://ttamediaservices-uswe.streaming.media.azure.net/f9415d7c-0fca-4ac7-8733-9654fa241818/2018%20Data%20Types%20and%20Data%20Structures%20Part%20Four.mp4
</p>

$$$^G^ <Quiz>##EndNum

QUIZ:

~~What does LIFO stand for?
~~What does push and pop mean?##EndNum

$$$^G^ <Learning Objectives Transition List>##EndNum

~~^G^ Learned about CPUs at an intermediate level
~~^G^ Learned how to draw out a flowchart
~~^G^ Learned how to utilize Windows registry
~~^G^ Described the basics of data structures
~~^G^ Performed binary math operations##EndBull

<p>^G^ <Learning Objectives List, 1.5-second interval></p>

<p>^G^ MODULE 6. Preparing to Code and Career Networking</p>
<p>^G^ Learning objectives: </p>
~~^G^ Write high-level algorithms
~~^G^ Describe various sorting algorithms 
~~^G^ Network with others and make useful connections
~~^G^ Write elementary code in Small Basic##EndBull

<p>^G^ SUBMODULE A. Identifiers, Conditional Statements and Branching Statements</p>

<p>TREES	<Template-blank & Note></p>
 
<p>Another common nonlinear data structure is the tree. Let's take a look at this diagram with some of the important features of trees highlighted.</p>

<img src="cid:Image_0.png" />
<p>In this diagram, we can see that the starting point, or the root node, is circled in blue. A node is a simple structure that holds data and links to other nodes. In this case, our root node contains the data string "John" and three links to other nodes. Notice that the group of nodes circled in red do not have any links. These nodes are at the ends of the branches and they are appropriately called leaves or leaf nodes. In our diagram, the nodes are connected with solid black lines called arcs or edges. These edges show the relationships between nodes in the tree. </p>
 
<p>One important relationship is the parent/child relationship. Parent nodes have at least one edge to a node lower in the tree. This node is called the child node. Nodes can have more than one child, but children can only have a single parent. Notice that the root node has no parent, and the leaf nodes have no children. The final feature to note in our diagram is the subtree. At each level of the tree, we can see that the tree structure is repeated. For example, the two nodes representing "Charles" and "Rick" compose a very simple tree with "Charles" as the root node and and "Rick" as a single leaf node.</p>

$$$^G^ <Pages 230-234: Tabs or Collapsible>##EndNum

<p>TREES AND MEMORY</p>

<p>Now let's examine one way that trees are implemented in the computer's memory. We will begin by introducing a simple tree structure called a binary tree. Binary trees have the restriction that nodes can have no more than two children. With this restriction, we can easily determine how to represent a single binary node in memory. Our node will need to reserve memory for data and two pointers.</p>
<img src="cid:Image_0.png" />
<p>Using our binary node, we can construct a binary tree. In the data cell of each node, we will store a letter. The physical representation of our tree might look something like this:</p>

<img src="cid:Image_0.png" />

<p>Although the diagram above represents a tree, it doesn't look much like the tree we examined initially. You would write the above diagram as a tree as follows:</p>
<img src="cid:Image_0.png" />
~~##EndNum

<p>IDENTIFIERS</p>
 
<p>The first important concept in programming languages is the idea of identifiers. Identifiers are descriptive names that are mapped to locations in the computer's memory. Once a memory location is given a specific name, we can refer to that location using the identifier rather than the numeric address. This system of associating a name with a memory location allows us to choose names that give meaning to the contents of the memory location.</p>
 
<p>For example, suppose you wanted to write a simple program to calculate the amount of sales tax you will need to pay on a new pair of shoes that costs $19.95. The first thing you will need to do is create an identifier called PriceOfShoes that is mapped to a particular memory location. Then you need to represent the value 19.95 in the computer at that location. Once this is done, you can use your identifier PriceOfShoes to refer to the price of the shoes in your program.</p>

<img src="cid:Image_0.png" />

~~##EndNum

<p>IDENTIFIERS</p>

<p>To be precise, we need to remember that most computers use the binary system for their storage and arithmetic rather than the decimal system. This means that when we associate a fractional value such as 19/20 (or 0.95) with a variable, we are actually storing a representation of 19/20 rather than the exact value. Since the binary number system has no exact representation for many fractions like 19/20, 1/3, or even 1/10, the computer must use a close approximation to represent this value. While we often think of exact values being stored in the computer's memory, the reality is that only close approximations for some numbers can be stored. However, to simplify our discussion, we will refer to exact values as being stored in memory although we know that only representations are really stored in most cases.</p>
 
<p>What happens if you need to compute the sales tax on another pair of shoes with a different price? Do you need to create another identifier? Actually, all you need to do is change the value that is stored in the memory location named PriceOfShoes. You can use the same memory location and identifier but vary the value that is stored. Memory locations that are used in the fashion are known as variables. Be careful not to confuse variables and identifiers. Identifiers are only the names given to variables, but variables are the actual memory locations used to store data. You can compare this with cities on a map. Cities represent a specific location on a map just like variables represent a specific location in memory. But when we refer to a city, we use a name like Richmond to identify the city. In the same way, when we refer to a memory location, we use an identifier like PriceOfShoes to name the variable. The contents of our variable can change just like the residents of a city can change. But although the contents change, the name or identifier remains the same.</p>
<img src="cid:Image_0.png" />

~~##EndNum

<p>IDENTIFIERS</p>

<p>We can also use identifiers to name other things in programming languages beside variables. Another important use for identifiers is giving names to values that remain the same throughout a program. These values are called constants. A good example of a value that can be used as a constant is sales tax. In Virginia, the sales tax is 4.5% so we can represent this by creating a constant called TAXRATE and associating it with the value 0.045. Now whenever we need the value for the sales tax, we can use the name TAXRATE to refer to it.</p>
 
<p>You might be wondering why we even bother to give a name to the value for sales tax. Why not simply use the value 0.045? The answer is that by using constants, we can easily modify our program to run under different conditions. For example, suppose a friend who lives in Tennessee wanted to use your program to compute sales tax. Since the sales tax in Tennessee is 6%, he will need to change all the sales tax computations to use 0.06 instead of 0.045. This modification is very easy if the program uses the constant TAXRATE. All he needs to do is associate the identifier TAXRATE with the new value of 0.06. Another advantage of using constants is that they make our programs more readable. The identifier TAXRATE is much more readily understood than the number 0.06.</p>
 
<p>As we stated before, both variables and constants are named using identifiers. However, the purpose of variables and constants is very different. The table below compares variables and constants to highlight their different roles.</p>
 
 <p>Variable</p><p>Constants</p><p>Definition</p><p>A named memory location.</p><p>A named value.</p><p>Use</p><p>Value can change while a program is running.</p><p>Value always remains the same while a program is running.</p><p>Purpose</p><p>Allows data to be stored in computer memory.</p><p>Allow programs to be easily modified.</p>

~~##EndNum

<p>IDENTIFIERS</p>

<p>One last note about identifiers: In most programming languages, identifiers are required to conform to a certain format. For example, the identifiers in this lesson all began with letters and were composed only of letters and numbers. None of the identifiers included spaces, and constants were written in UPPERCASE letters. </p>

$$$^G^ <MCSA>##EndNum

~~Which one of the following terms can be described as?: “The name given to constants and variables.”##EndNum
<p>a.    Name</p>
<p>b.    Label</p>
<p>c.    Identifier CORRECT</p>
<p>d.    Tree</p>

<p>2. Which of the following is the purpose of a variable?</p>
<p>a.    Allows data to be stored in computer memory. CORRECT</p>
<p>b.    Allow programs to be easily modified.</p>
<p>c.     Makes computer programming easier.</p>
<p>d.    Improves computer memory.</p>

<p>3. True or False: In a tree structure, a parent node can have only one child node, but child nodes can have multiple parents. FALSE</p>



$$$^G^ <Template-video>##EndNum


<p>Watch this video in full:</p>
<p>VIDEO~~Conditional and Branching Statements~~https://ttamediaservices-uswe.streaming.media.azure.net/25ec996c-be7c-4d64-a3aa-4fc5638752c5/2018%20Conditional%20and%20Branching%20Statements.mp4
</p>

$$$^G^ <Gapfill>##EndNum

~~Which one of the following fills the blanks?: _____ check whether or not a condition is present or not, and _____ are directions to execute one of two or more available paths of execution for the program. 
~~Variables/constants
~~Conditional statements/branching statements CORRECT
~~Constants/variables
~~Branching statements/conditional statements##EndNum


<p>2) Which of the following is not a conditional statement?</p>
~~If
~~Loop CORRECT
~~Else
~~Else If##EndNum

<p>3) True or False: Conditional statements and branching statements determine the path of execution for the program. TRUE</p>

<p>4) A _________ is a sequence of instructions that is repeated until a certain condition is met.</p>
~~Loop CORRECT
~~Variable
~~Branching Statement
~~Constant##EndNum

<p>^G^ SUBMODULE B. Sorting Algorithms</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>PHP: Originally, PHP stood for “Personal Home Page”. Currently it is short for “PHP: Hypertext Preprocessor.” PHP is a scripting language designed for web development. This means that you could have an HTML page, and you could put a script inside it that performed some function; this script would be executed by the computer that was hosting the web page files (the "server"). </p>
<p>The script could be written in PHP. The code written in PHP is stored on a web server, with the HTML pages it's meant to work with.</p>

<p>PHP can also be used as a general-purpose programming language, not just for adding functionality to web pages. The main use of PHP is to create interactive websites and web applications.</p>

<p>EXAMPLE: PHP is one of the languages utilized by Facebook.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>Sorting algorithm: In order to understand the term sorting algorithm, you first need to understand the terms sort and algorithm.</p>

<p>Sort means ”to arrange as to sort, kind or class”. An example might be dividing dirty clothes into two piles - whites and colors.</p>

<p>An algorithm is a mathematical term. It is a plan for solving a problem. Algorithms consist of a sequence of steps to solve a problem or perform an action. Computers use algorithms. An algorithm is a set of instructions that is used to get something done.</p>

<p>A sorting algorithm is an algorithm that arranges a list of items in a certain order. There are different methods one can use to sort things. Sorting algorithms are ways to sort through data.</p>

<p>EXAMPLE: There are sorting algorithms that will have the computer look at a list of numbers, and put them in sequence, starting at the top (highest value) number and working down.</p>

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Introduction to Sorting Algorithms ~~https://ttamediaservices-uswe.streaming.media.azure.net/13f41014-0af2-4a4d-a3c0-352c5ae9fd6d/2018%20Introduction%20to%20Sorting%20Algorithms.mp4
</p>

$$$^G^ <MCSA>##EndNum

~~Which of the following would not be a sorting algorithm?:
~~An algorithm that sorts numbers from lowest to highest.
~~An algorithm that alphabetizes a list.
~~An algorithm that deletes old folders. CORRECT
~~An algorithm that sorts files in date order.##EndNum

<p>2) An algorithm is a set of __________ that is used to get something done.</p>
~~Instructions CORRECT
~~Branching statements
~~Computers
~~Values##EndNum


$$$^G^ <Template-blank & Note>##EndNum
<p>Insertion sort: A type of sorting algorithm. </p>

<p>In an insertion sort, the list of items is gone through, one item at a time, starting at the beginning. </p>

<p>As each item is reached, the correct location earlier in the list is found for it, based on the desired outcome - for example, if the algorithm is meant to sort a list of numbers in ascending order, the current item would be inserted at the correct spot earlier in the list. When the end of list is reached, the whole list is sorted properly.</p>

<p>EXAMPLE: You could use a insertion sort to sort a list of students alphabetically by last name.</p>
<p>This is how most people sort playing cards when playing card games. Start at the first card, compare it to the second, move the second card where it should go depending on how you want the cards arranged, then go on to the third card, compare it to the two you’ve already inserted, put it where it goes, etc. and so on.</p>
<p>EXAMPLE: You could use an insertion sort to arrange a list of students in alphabetical order by last name.</p>

$$$^G^ <Template-blank>##EndNum

<p>NOTE: We typically keep videos to around ten minutes in length - breaking them into parts if necessary. But for the following videos on sorting algorithms, each is shown in its entirety to ensure all concepts can be relayed in one video. This means that some of these videos are longer than you’re typically used to. For example: The next video is a little longer than thirty minutes. </p>

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full: </p>
<p>VIDEO~~Insertion Sort~~https://ttamediaservices-uswe.streaming.media.azure.net/820efce6-c9ef-45d0-bfa0-8e9b0214bb53/2018%20Insertion%20Sort.mp4
</p>

$$$^G^ <MCSA>##EndNum

~~Which of the following defines insertion sort?:##EndNum

~~The list of items is divided into two lists: a list of sorted items (initially empty), and a list of unsorted items (initially this has all the items in the list). The unsorted list is then gone through, one item at a time. Each item is placed in the sorted list at the correct point.
~~The list of items is gone through, one item at a time, starting at the beginning. As each item is reached, it is compared to the item previous to in the list. It is swapped if the desired outcome requires it.
~~The list of items is gone through, one item at a time, starting at the beginning. As each item is reached, the correct location earlier in the list is found for it. CORRECT
~~The list of items is divided into two lists: a list of new items, and a list of old items. The list of old items is deleted.##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>Selection sort: A type of sorting algorithm.</p>

<p>In a selection sort, the list of items is divided into two lists: a list of sorted items (initially empty), and a list of unsorted items (initially this has all the items in the list). The unsorted list is then gone through, one item at a time. Each item is placed in the sorted list at the correct point, according to the desired outcome. Once all items in the unsorted list have been handled, the sorted list is the final product.</p>

<p>EXAMPLE: You could use a selection sort to sort a list of students alphabetically by last name.</p>

$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Selection Sort~~https://ttamediaservices-uswe.streaming.media.azure.net/dc4e08d6-b918-4dd6-a75a-c27b9219ed14/2018%20Selection%20Sort.mp4
</p>

$$$^G^ <MCSA>##EndNum

~~Which of the following defines selection sort?:##EndNum

~~The list of items is gone through, one item at a time, starting at the beginning. As each item is reached, the correct location earlier in the list is found for it.
~~The list of items is divided into two lists: a list of sorted items (initially empty), and a list of unsorted items (initially this has all the items in the list). The unsorted list is then gone through, one item at a time. Each item is placed in the sorted list at the correct point. CORRECT
~~The list of items is gone through, one item at a time, starting at the beginning. As each item is reached, it is compared to the item previous to in the list. It is swapped if the desired outcome requires it.##EndNum

$$$^G^ <Template-blank & Note>##EndNum

<p>Bubble Sort: A type of sorting algorithm.</p>

<p>In a bubble sort, the list of items is gone through, one item at a time, starting at the beginning. </p>

<p>As each item is reached, it is compared to the item previous to in the list. It is swapped if the desired outcome requires it - for example, if the algorithm is meant to sort a list of numbers in ascending order, the current item would be swapped with the previous item if it is lower than the previous item. </p>

<p>This entire process is repeated for the whole list until all the items are in the desired order. </p>

<p>EXAMPLE: You could use a bubble sort to sort a list of students alphabetically by last name.</p>


$$$^G^ <Template-video>##EndNum

<p>Watch this video in full:</p>
<p>VIDEO~~Bubble Sort~~https://ttamediaservices-uswe.streaming.media.azure.net/6cb66dcb-334a-4d0f-a924-3b38cfdf249a/2018%20Bubble%20Sort.mp4
</p>

$$$^G^ <MCSA>##EndNum

~~Which of the following defines bubble sort?:##EndNum

~~The list of items is gone through, one item at a time, starting at the beginning. As each item is reached, the correct location earlier in the list is found for it.
~~The list of items is gone through, one item at a time, starting at the beginning. As each item is reached, it is compared to the item previous to in the list. It is swapped if the desired outcome requires it. CORRECT
~~The list of items is divided into two lists: a list of sorted items (initially empty), and a list of unsorted items (initially this has all the items in the list). The unsorted list is then gone through, one item at a time. Each item is placed in the sorted list at the correct point.##EndNum

$$$^G^ <Template-video>##EndNum

<p>^G^ SUBMODULE C. Career Networking</p>

<p>Watch this video in full:</p>

<p>VIDEO~~Networking~~https://ttamediaservices-uswe.streaming.media.azure.net/33ac6b3f-6054-4983-81fa-a79b8666d43e/2018%20Networking.mp4
</p>

~~##EndNum

<p>The Visible and the Invisible Job Market</p>

<p>^G^ There are two different markets to be aware of when searching for a job: the “visible job market” and the “invisible job market”.</p>
<p>^G^ The visible job market includes listings you can see online, other publications, or elsewhere. This includes want ads, online job sites (job boards), and company websites.</p>
<p>^G^ The invisible job market includes listings that are not online or listed publicly. This includes unadvertised positions, internal job postings, new positions. For example, you may have a friend who tells you there are some new jobs opening up where he works at Company A. You go on various job boards and Company A’s website but don’t see any of the positions your friend was talking about. These are jobs on the invisible market.</p>
<p>^G^ According to the U.S. Bureau of Labor Statistics, 80% of available jobs are never advertised, and more than half of all employees land their jobs through networking.</p>
<p>^G^ What does this mean? It means your best bet is to make connections and use your new and existing connections to help get a job.</p>


$$$^G^ <Template-blank & Note>##EndNum

<p>MEETUPS</p>

<p>A “meetup” is a meeting of a group of people who share similar interested.</p>

<p>One of the most successful activities of developers who land their first technical position, or re-enter the industry, is to network. </p>

<p>One of the best way to network is to attend local technology meetups. </p>

<p>There are many excellent online resources for finding various technology groups and meetups. You can simply Google “Technology meetups in ____ (your city)” or “Coding meetups.”</p>

<p>One of the best websites to find meetups is meetup.com.</p>

<p>In Portland, another website is: calagator.org.</p>

<p>We highly recommend attending actual meetups throughout your training. Many Tech Academy graduates have landed tech jobs through attending meetups and networking events.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>ASSIGNMENT:</p>

<p>Go to meetup.com and create an account for yourself.</p>

<p>Then search for tech/coding meetups in your area and join at least one group.</p>


<p>Once you have created your meetup.com account and joined at least one group, email the following to our job placement staff:</p>
~~The link to your meetup.com profile.
~~The name and date of the meetup you will be attending.##EndNum

<p>You can reach the Job Placement staff at the following email addresses:</p>

<p>ONLINE STUDENTS:</p>
<p>remotejobplacement@learncodinganywhere.com</p>

<p>PORTLAND STUDENTS:</p>
<p>portlandjobplacement@learncodinganywhere.com</p>

<p>DENVER STUDENTS:</p>
<p>^G^ denverjobplacement@learncodinganywhere.com</p>

<p>^G^ SEATTLE STUDENTS:</p>
<p>^G^ seattlejobplacement@learncodinganywhere.com</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>LINKEDIN</p>

<p>LinkedIn is a website owned by Microsoft that is mainly utilized for professional networking. </p>

<p>During the interview process, employers commonly review the LinkedIn profiles of candidates.</p>

<p>It is also a great tool to find employment opportunities. You can meet hiring managers and recruiters on LinkedIn, and make great connections.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>ASSIGNMENT:</p>

<p>Create a LinkedIn profile for yourself as a software developer. Ensure it includes a professional profile picture, bio and summary.</p>

<p>Once complete, connect with one of our Job Placement Directors on LinkedIn.</p>

$$$^G^ <Template-blank & Tabs or Collapsibles>##EndNum

<p>NOTE: If you are using a Windows computer, this step can be skipped.</p>

<p>For students using a Mac, you must install Windows before proceeding. Here are the instructions for Mac users: </p>

<p>In the next section of this course, you will be using a program that only functions on the Windows operating system. It will be easier for you to follow the instructions if you install Windows on your Mac Computer. Your Mc can have both OS X and Windows simultaneously. The program we recommend using to accomplish this is called Virtual Box. Virtual Box is free, and once it's installed you do not need to reboot your Mac to access Windows.</p>

<p>Before you start make sure your Mac has:</p>
~~The latest version of OS X
~~8GB or more of RAM
~~At least 250 GB hard drive
~~You will need to purchase a Windows 10 Home (64-bit) license, which is available new on Amazon (search for “Microsoft Windows 10 Home 64 Bit OEM”) or a second-hand license available on eBay. What you really need is the activation key
~~You can download an ISO of the installation disk directly from Microsoft.##EndBull

<p>VIDEO~~Reference: http://sites.miis.edu/kb/2012/06/19/how-to-install-virtualbox-and-windows-on-your-mac/ ~~http://sites.miis.edu/kb/2012/06/19/how-to-install-virtualbox-and-windows-on-your-mac/
</p>

<p>1) DOWNLOAD VIRTUALBOX</p>
<p>VIDEO~~https://www.virtualbox.org/wiki/Downloads ~~https://www.virtualbox.org/wiki/Downloads
</p>

<p>Save the DMG file to a location on your computer where you will be able to find it (Downloads, Desktop, etc.). If you are on a Mac, you need the version for “OS X hosts.”</p>

<p>2) INSTALL VIRTUALBOX</p>

<p>VirtualBox must be installed before it can be used. When you mount the DMG, you must then run the VirtualBox installer, which will place VirtualBox into your Applications folder.</p>

<p>3) CREATE YOUR VIRTUAL MACHINE (VM)</p>

~~When you run VirtualBox for the first time, there will be no virtual machines (VMs) installed.
~~Click New in the toolbar, which will launch the New Virtual Machine Wizard.
~~Give your VM a name such as “Windows 10”.
~~Select “Windows” as the operating system, and “Windows 10 (64 bit)” as the version. Click “Continue”. VirtualBox will make a recommendation for the amount of RAM that should be allocated to your VM.
~~Next you must configure a hard disk for your VM to use. The default settings are fine: “Start-up Disk” and “Create new hard disk” are selected. Click “Continue”.
~~Make sure “VDI” is selected as the type of virtual disk. Click “Continue”. Make sure “Dynamically allocated” is selected. Click “Continue”.
~~The default file size of the hard disk is 25 GB. However, we recommend setting at least 80GB for hard disk size, as later coursework will require more storage space. Set the desired size. Click “Continue”.
~~You will be presented with a summary. Note the location of your VDI file. Usually they will be created in your user folder in a folder called “VirtualBox VMs”. Do not rename, move or modify the VirtualBox VMs folder, or the VDI file contained within it.
~~Click “Create” if the summary appears correct. You will now be taken back to the Virtual Machine Manager, which will no longer be empty. You should see the VM you created, and it should be “Powered Off”. Your VM is a computer within a computer, which means it must be started and shut down like a normal computer (it also means it can get viruses, so be careful).##EndBull

<p>4) INSTALL WINDOWS</p>

~~Click the green “Start” arrow. You will see a warning that “Auto capture keyboard” is turned on. What is important to note on this screen is the host key, which is set to Left Command key. Use this key to “release” the mouse and keyboard from the VM to switch back to your Mac. You will need to do this if your mouse and keyboard appear to be “stuck” in the VM, meaning you can’t move the mouse out of the VM. Normally after Windows installed, you can simply move your mouse out of the VM window and it will be back on your Mac side.
~~Since you haven’t yet installed Windows, you will be taken into the “First Run Wizard”, which will help you install Windows. Click “Continue” to get started.
~~Make sure you know where the ISO Windows 10 installation ISO is located (or you are using the installation DVD). Select the installation media in the drop down list and select “Continue”. If your computer does not have a CD/DVD drive, you may install an OS from disk media by clicking the folder browser icon (to the right below). Navigate to an installation image – DMG, ISO, CDR, DMG and select “Open”.
~~If you have successfully selected your installation media, you will be presented with a Summary screen. Verify that the information is correct and select “Start”.
~~Your VM should start for the first time. It will boot like a normal Windows computer, but in a window on your Mac. You may get the Virtual Machine host key warning again; select “Do not show this message again” and then “Capture”. You must remember your host key, which defaults to the left Command key.
~~Now you are in the Windows installer. Follow the on-screen instructions; the default settings should be fine. One screen that is a little confusing is the “Upgrade” or “Custom” installation. Since this is a new VM, there is nothing to upgrade, so Custom would be the most logical choice. Your VM may reboot a few times as Windows in installed, but most of your time will be spent watching your screen, so this would be a good time to get up and walk around.##EndBull

<p>5) CONFIGURE A SHARED FOLDER</p>

<p>Before you can actually use your new VM, you will need to enable a shared folder. This folder is used to access files on your Mac from your Windows VM. If you don’t have a shared folder, then your VM will be landlocked, meaning you won’t be able to get files on or off (you could theoretically use a USB flash drive). To configure a shared folder, your VM must be powered off.</p>

~~In your VM configuration window, scroll down to the Shared Folders section. Clicking this heading will open the shared folders Window.
~~Click the “Add a new shared folder definition” button to add a share.
~~Click the down arrow in the folder path box and select “Other…”. Navigate to a folder on your Mac, such as your Desktop or your Documents folder. Once you have chosen your folder, click “Choose”.
~~The folder name will automatically populate the “Folder Name” box, but you can change it should you wish. Make sure “Read-only” is not checked, and that “Auto-mount” is checked.##EndBull

<p>6) GUEST ADDITIONS</p>

<p>Start up your VM. When it is finished booting and you have added a user account, your final step is to install some software that VirtualBox will use to make your VM perform a little better. From the “Devices” menu, select “Install Guest Additions”.</p>

<p>7) USE YOUR VM!</p>

<p>You have now successfully installed VirtualBox and Windows. You may now install other software that you will need for courses. If you attach a USB drive (or insert a CD or DVD into your computer), you may use it in your VM. You can also install software you download from the internet. Usually installation software ends with the extension .exe. These files can safely be downloaded on your Mac to be used in your VM. Your Mac will ignore them since .exe files are executable files for Windows, and are not compatible with OS X.</p>

<p>You will need to have Office on either your Mac or PC. Some software may require Office to be installed on Windows.</p>

<p>VIDEO~~If you have any questions, please refer to the VirtualBox user manual: https://www.virtualbox.org/manual/UserManual.html ~~https://www.virtualbox.org/manual/UserManual.html
</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>^G^ SUBMODULE D. Preparing to Code</p>
$$$^G^ <Template-blank & Note>##EndNum

<p>CODING </p>

<p>You are moving into the final section of this course. Later on in this final section you will write code! </p>

<p>As a developer-in-training, you need all the experience you can get in typing code! So, do not copy and paste code - write it out. </p>

<p>Writing code without any understanding of the basics of coding is a waste of time and creates nothing more than a parrot. That’s why you have started your training with The Tech Academy learning the fundamentals of computer science and coding. </p>

<p>The information presented in this section is arranged in a gradient sequence – we will start with the easiest information first and end with the most difficult tasks.</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>SMALL BASIC</p>
 
<p>Small Basic is a programming language broadly released by Microsoft in 2011. Small Basic includes an Integrated Development Environment (IDE – a tool in which one writes their code) and libraries (sets of pre-manufactured code for use). It can be used to write basic programs and games.</p>

<p>The .NET Framework is a collection of tools and pre-made software that helps software developers to make computer programs. It was created by Microsoft. It has several programming languages that it can work with. As a developer, you can write a program that uses one or more of these languages. The .NET Framework can take these programs and convert them down to instructions that will work on pretty much any computer that is compatible with this .NET Framework. This means you only have to write the program once, and not have to write variations of it for all the various types of computers you’d like to have run the program.</p>
 
<p>Small Basic is based on .NET and so familiarizing yourself with Small Basic makes it easier to learn other .NET programming languages, such as C#, in the future. Factually, Small Basic makes it easier to learn any programming language in the future. </p>
 
<p>The purpose of Small Basic is to provide a programming language that is designed to make programming more approachable for newcomers. It is a great learning resource for beginners!</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>DIFFICULTIES</p>

<p>If you run into any trouble while going through this section, here are some tips:</p>
 
~~Ensure you understand all the words and terms being used – clear up any you don’t understand.
~~Ensure your code is written exactly as laid out here. A small error in the code, such as a typo, can ruin the whole program. Code must be exact for programs to run properly, so always meticulously check your code for errors.
~~Research online for solutions.
~~Contact a Tech Academy Instructor.##EndNum

$$$^G^ <Template-blank & Note>##EndNum
<p>CHALLENGES</p>
 
<p>Throughout this section, you will occasionally come upon challenges. At times you will also be instructed to figure out new things on your own. These are opportunities for you to put together all that you’ve studied in that section thus far and more. Working software developers are often assigned projects and tasks they’ve never done before. A key element of the job is researching solutions online and therefore, some of these challenges will instruct you to do something that we haven’t taught you yet. This is intentional so that you gain experience in locating new data online and figuring out things on your own. In the words of more than one software developer: “I get paid to Google things!”</p>
 
$$$^G^ <Template-blank & Note>##EndNum
 
<p>ASSIGNMENT:</p>
 
<p>VIDEO~~Go to http://smallbasic.com/ and download Small Basic. Then, install it on your computer, using all default settings.~~http://smallbasic.com/
</p>

$$$^G^ <Template-blank & Note>##EndNum

<p>HELLO WORLD</p>
 
<p>Now that Small Basic is installed on your machine:</p>
 
<p>^G^ Launch SmallBasic.</p>
 
<p>You should see something similar to the following:</p>
 
<img src="cid:Image_0.png" />
 
<p>This is the IDE (Integrated Development Environment) that you will be using to write your code as you create computer programs.</p>
 
<p>The white area where you will type your code is called the "Editor.”</p>
 
<p>The top bar, where such options as New, Open and Save are listed, is called the "Toolbar.”</p>
 
<p>To write code, you simply type text inside the Editor.</p>
 
<p>A very common first program that people write when starting out with a programming language is to have the computer display the words: “Hello World.”</p>
                                            	                                	
<p>Type the following inside the Editor:</p>
 
<p>^G^ TextWindow.WriteLine("Hello World!")</p>
^G^  
<p>You've written your first program using SmallBasic. Now, there are two ways to run the program:</p>
 
<p>1.  Click the Run button on the Toolbar, or</p>
<p>2.  Press F5 on your keyboard.</p>
^G^  
<p>^G^ Run your program.</p>
^G^  
<p>If you have created the program correctly, you should see a console window that looks like this:</p>
 
<img src="cid:Image_0.png" />

<p>If you didn't get that result, check your work and try again. If you did get that result, good job!</p>

$$$<Template-blank & Note>

ANALYZING THE PROGRAM

A statement is an instruction given to a computer. Each line of code you write is a statement. Your Small Basic programs will usually be composed of a series of statements. 

When you execute a Small Basic program, the computer reads and executes the first statement. After executing the first statement, it moves onto the next statement and executes that, etc.

In our Hello World program, we only wrote one statement. The statement instructed the computer to display the text “Hello World!” 

Programming languages each have their own syntax. These are the required rules when writing code in a particular language. Syntax is like grammar. Violation of syntax will result in your code not running properly. Let’s analyze the syntax of the code you wrote: TextWindow.WriteLine("Hello World!")

Here are all the elements within our code:

1.	TextWindow
2.	WriteLine
3.	Hello World!
4.	.	(a period)
5.	()  	(parentheses)
6.	“”	(quotation marks)

Each of the above points communicate an exact thing to your computer.

TextWindow is an object. There are many objects you can use in Small Basic and TextWindow is one of them. This is what the text window looks like:

 <img src="cid:Image_0.png" />

This is also called the Console and is where the result of the program is displayed. 

In Small Basic, we are able to perform actions on objects. These actions are called operations. The operation we performed earlier on the TextWindow object was “WriteLine.” There are many other operations that can be performed in Small Basic.

The “Hello World!” is a parameter (data given to an operation for use as the operation is performed) for our WriteLine operation. Operations can either accept one or more parameters or none at all.

Parentheses, quotation marks and periods all perform various functions when writing code and are part of its syntax. For example: In Small Basic, to print text you must type the desired text within quotation marks (““).

266.	<Template-blank>

EXPANDING YOUR PROGRAM

Now we will perform another operation on the TextWindow object. Write and execute the following code: 

Write the following code in the Editor, above TextWindow.WriteLine("Hello World"):
TextWindow.BackgroundColor = "White"
TextWindow.ForegroundColor = "Blue"

We have used the operations BackgroundColor and ForegroundColor on the object TextWindow. We have given the operations the parameters “White” and “Blue.”  You can play around with this and change the parameter to other colors such as yellow, red, green, etc.

267.	<Template-blank & Note>

CHANGING COLORS

Change the foreground color.
Change the background color.

As a note, you can find the full list of colors for Small Basic here:

https://blogs.msdn.microsoft.com/smallbasic/2015/06/20/the-hex-colors-in-small-basic/  

These operations (unlike the WriteLine operation) did not need parentheses and didn’t take any inputs. We used an equal sign to assign the values (in these cases, colors). 

The ForegroundColor and BackgroundColor are properties of the object (TextWindow). 

268.	<Template-blank & Note>

FIXING ERRORS

Change the foreground color again. This time, delete the quotation marks (“ “) around the value and attempt running your program. 

You will receive an error message. This is an example of a syntax error. Something as simple as leaving out quotation marks can cause a program not to run.

Fix the error. 

As we just covered, each color is a parameter (which is, again, the data given to an operation for use as the operation is performed). 

As we discussed earlier, a variable is a symbol used to represent an unknown quantity or a quantity that may change. In computers, a variable is used to store data for later use as the program executes. 

Computers often have to keep track of various pieces of information. These can be things like the name of a computer user, the color of the background shown on the computer screen, an order number for something a user ordered from a company, etc.

The computer usually gives each of these pieces of data a NAME and a VALUE. The NAME is used to identify the exact piece of data, and the VALUE is used to show the actual data we need to keep track of.
##EndNum
<p>269.	<Learning Objectives Transitions List></p>
~~^G^ Learned how to write high-level algorithms
~~^G^ Learned about various sorting algorithms 
~~^G^ Learned the importance of networking with others and making useful connections
~~^G^ Wrote elementary code in Small Basic##EndBull
<p>
<Learning Objectives List, 1.5-second interval></p>
<p>^G^ MODULE 7. Writing Code</p>
<p>^G^ Learning objectives: </p>
~~^G^ Assign variables
~~^G^ Perform math equations through coding
~~^G^ Write and execute conditional statements
~~^G^ Write and execute loops 
~~^G^ Utilize and customize the Graphics Window in Small Basics##EndBull

<p>^G^ SUBMODULE A. Variables and Equations  	</p>
<p>
VARIABLES   <Template-blank & Note>

These things the computer is keeping track of are usually called “variables”. This is because the VALUE part of it can change when you tell the computer to change it. The fact that the value can vary is why it’s called a “variable” – its value is not permanent or constant.

Usually the “=” symbol is used to set the VALUE of a variable.

When the “=” symbol is used to set the value of a variable, it is usually used like this:
[NAME of the variable] = [VALUE that is being assigned to that variable]

EXAMPLE: fabricColor = “blue”.

Here, there is a piece of data that the computer is keeping track of that has been given the name “fabricColor”. By using the “=” symbol, we can set the value of the piece of data called “fabricColor”. In this case, we are setting that value to the series of letters “blue”. 

270.	<Template-blank & Transition List>

CHALLENGE:

Write a program that contains the following elements:

-A background color, 
-A foreground color, 
-The TextWindow.Pause() operation, and
-The WriteLine operation.

Note: You are being asked to use the TextWindow.Pause() operation which is something you haven’t learned on this course. As we mentioned earlier, you will occasionally be tasked with performing actions you haven’t been taught yet. This is intentional and is a vital component of the learning process. Remember to research online for solutions and data as needed.  

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:</p>
<p>
•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

271.	<Template-blank>

MORE VARIABLES

Let’s make it so the program can store and print variables. 

Write and execute the following code:

TextWindow.Write("What is your favorite food?: ")
food = TextWindow.Read()
TextWindow.WriteLine("Your favorite food is " + food + "! Yummy!")
TextWindow.Write("Which city would you most like to visit?: ")
city = TextWindow.Read()
TextWindow.WriteLine(city + " sounds like a great place to visit! Don’t forget to bring your computer with you!")

Read() in your above code is an operation that instructs the computer to stand by for the user to type something and then press the Enter/Return key. After the user types in data and hits Enter/Return, the computer takes what they typed and returns it to the program. 

272.	<Template-blank & Note>

MORE VARIABLES

As covered earlier, a variable is a place where values are stored for later use. In your code, food and city are variables. The text the user types in response to food and city are stored in variables. The variable “food” was used to store the user’s favorite food, while the variable “city” was used to store the city that the user wished to visit. 

When naming a variable, it is recommended that you use a name that describes the variable. For example: user_address = TextWindow.Read() would be a good name for a variable that stores a user’s home address, whereas giraffe = TextWindow.Read() would not be a good name for storing user address data.

273.	<Template-blank & Note>

CHALLENGE:

Write a program that contains the following elements:
-The TextWindow.Write operation,
-The TextWindow.Read operation, and
-The CursorTop property (note: a property is an attribute of an object).

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

274.	<Template-blank & Note>

MATH AND NUMBERS

You can also store and utilize numbers in variables and perform mathematical equations. 

Write and execute the following code:

First_number = 5
Second_number = 10
Third_number = 15
Fourth_number = 20
Fifth_number = 50
Sixth_number = 16
TextWindow.WriteLine(Second_number + Third_number)

We just added 10 and 15 together. 

The variable numbers have been assigned various values, as follows:

?	You assigned the variable First_number the value 5
?	You assigned the variable Second_number the value 10
?	You assigned the variable Third_number the value 15
?	You assigned the variable Fourth_number the value 20
?	You assigned the variable Fifth_number the value 50
?	You assigned the variable Sixth_number the value 16

When we used “text” as a parameter earlier, we were required to surround the text with quotation marks, but with numeric parameters, quotation marks are unnecessary. 

275.	<Template-blank & Note>

SUBTRACTION

You can also perform subtraction. Add the following code beneath your existing code and execute it:

TextWindow.WriteLine(25 - First_number)

276.	<Template-blank>

MULTIPLICATION

You can multiply numbers. Add the following code beneath your existing code and execute it:

TextWindow.WriteLine(20 * Fourth_number)

277.	<Template-blank & Note>

DIVISION

You can divide numbers as well. Add the following code beneath your existing code and execute it:

TextWindow.WriteLine(400 / Fifth_number)

278.	<Template-blank>

We can also get the square root of a number. Add the following code beneath your existing code and execute it:

TextWindow.WriteLine(Math.SquareRoot (Sixth_number))

To explain the code you just wrote: the "Math" code you used here is an example of a library. In computer programming, a "library" is a pre-made package of computer code. Libraries are useful in computer programming because it means the programmer doesn't have to write the code to do the functions that the library provides, he or she can just use the pre-made library.

“Math” is a library that’s built into Small Basic. SquareRoot is an operation available from the Math library. 

279.	<Template-blank>

Using the Math library, you can also round numbers. Add the following code beneath your existing code and execute it:

TextWindow.WriteLine(Math.Round(5.6))

Feel free to play around with your variables and different math operations.

280.	<Template-blank>

Another interesting thing you can do with Small Basic is convert temperature from Fahrenheit to Celsius. 

The way you convert Fahrenheit to Celsius is: Fahrenheit temperature subtracted by 32, multiplied by 5/9ths. Or written as an equation:
T(°C) = (T(°F) - 32) × 5/9

Add the following code beneath your existing code and execute it:

TextWindow.Write("What is temperature in Fahrenheit?: ")
Fahrenheit = TextWindow.ReadNumber()
Celsius = (Fahrenheit - 32) * 5/9
TextWindow.WriteLine("The temperature in Fahrenheit converted to Celsius is: " + Celsius)

281.	<Template-blank>

We can also write a short program that randomly provides the user with a number.

Write and execute the following code:

TextWindow.WriteLine(Math.GetRandomNumber(100))

282.	<Template-blank & Note>


CHALLENGE:

Write a program that includes the following:

-The TextWindow.Title property,
-Assigning a value to a variable,
-The TextWindow.WriteLine operation, and
-The TextWindow.Top property.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com </p>

<p>^G^ SUBMODULE B. Writing Conditional Statements </p>
<p>
283.	<Template-blank & Note>

CONDITIONAL STATEMENTS

A condition is something that other things depend on. In math, a condition is something that is required for something else to be true. Conditions are points that are necessary to be present for other points to be present.  If you say something is “conditional”, that means it relies on the state of another thing.

EXAMPLE: The statement “Electricity is allowed to flow through this part of the computer if you type 1” could be a condition. Or say you have a word problem like this: “Come up with two digits that, when added together, equal six – but the digits 2 and 4 are never to be used to get the answer.” Here, the part that tells you that you can’t use the numbers 2 or 4 in your answer is a condition.

A conditional statement takes place when you tell the computer: depending upon ___, do ___. An “If Statement” is a type of conditional statement that means: if this, then that. 

284.	<Template-blank & Note>

BRANCHES

A branch is a point of decision. Branches are a fundamental element of how we make computers do useful work. A branch instruction tells the computer to go to somewhere other than the primary series of instructions and instead execute an alternate series of instructions; usually based on some decision the computer has to make. It is a statement written in the program’s code to make the computer shift from one area to another.  

EXAMPLE: If you are using a computer program to order food from a restaurant, and the restaurant has a different procedure for ordering if you want the food to be delivered instead of being set aside for you to pick up, there will be a branch in the computer program where the user will be prompted as to whether their order is for pickup or delivery. In this case, the computer will have two series of steps it will perform. The branch instruction in the computer program will execute one or the other of these series, depending on the user’s response.

285.	<Template-blank & Note>

COMPARISON INSTRUCTIONS
0
In order to tell the computer how to analyze conditional statements, you'll make use of comparison instructions, such as the < and > symbols.

Write and execute the following code:

If (5 < 10) Then
  TextWindow.WriteLine("Five is less than 10.")
EndIf

The EndIf statement tells the computer that we are done with that operation. 

286.	<Template-blank & Note>

CHALLENGE:

Write and execute your own conditional statement.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

287.	<Template-blank & Note>

MORE CONDITIONAL STATEMENTS

Now let’s try using an ElseIf Statement, which is basically a second If Statement and gives us another option to choose from. We will also use an Else Statement that tells the computer, “Otherwise, do ___.” You’ll get a better idea of this through trying it out.

Write and execute the following code:

start:
TextWindow.Write("Are you a vegan?: ")
Vegan = TextWindow.Read()
If Vegan = "Yes" Then 
  TextWindow.WriteLine("I know, you've told me already. Several times...")
ElseIf Vegan = "No" Then
  TextWindow.WriteLine("Looks like meat is back on the menu!")
Else
  TextWindow.WriteLine("Please enter Yes or No.")
  Goto start
EndIf

We also added a couple new things to your code above:

1.	Start:. This is called a label. It’s similar to a bookmark within your program. In this case, the start label defines the beginning of our code and gave us a place to return to in our program, and
2.	Goto: This is an instruction which makes the program go to an exact place in the series of instructions that make up the program. “Goto” statements utilize labels and redirect the program to a label. 

288.	<Template-blank & Note>

COMPARISON INSTRUCTIONS

Here is another comparison instruction:

>= (greater-than sign followed by equal sign). This symbol is used to show that a comparison should be made. Specifically, this "greater-than or equal" symbol is basically an instruction to check whether the data on the left side of the symbol is more than or equal in amount or quantity than the data on the right side. The answer to this comparison is an answer of "true" or "false".

EXAMPLE: 6 >= 6. This means “check whether 6 is greater than or equal to 6”. The answer is "true". 

289.	

TIME

Now let’s create a program that can tell the difference between a.m. and p.m. Write and execute the following code:

If (Clock.Hour < 12) Then
  TextWindow.WriteLine("It is a.m.")
ElseIf (Clock.Hour >= 12) Then
  TextWindow.WriteLine("It is p.m.")
EndIf

Clock.Hour is a built-in instruction in SmallBasic that gives the time on your computer; we used that to check the time.

290.	

TIME 
There is also another way you can write your code:

Write and execute the following code:

If (Clock.Hour < 12) Then
  TextWindow.WriteLine("It is a.m.")
  Else
    TextWindow.WriteLine("It is p.m.")
EndIf

As you can see, the code is sometimes automatically indented for you. This is so that the code is sectioned off and you can easily read through it. In Small Basic, this indentation isn’t necessary and the program will run whether or not the code is indented. 

291.	<Template-blank & Note>

REMAINDER

Now let’s use some of what we’ve learned so far (and learn some more) to build a program that will round numbers and tell us whether or not the numbers are odd or even.

In math, a “remainder” is the number left over after a division operation. Math.Remainder is an operation in Small Basic that divides the first number by the second and returns (gives back) the remainder. E.g. All even numbers will have a 0 remainder when divided by 2 (nothing left over – they divide evenly).

Write and execute the following code:

TextWindow.Write("Type a number that includes a decimal: ")
Number = TextWindow.ReadNumber()
TextWindow.Write("Now we will round your number! ...")
TextWindow.Write("Your rounded number is: " + Math.Round(Number) + ".")
Remainder = Math.Remainder(Math.Round(Number), 2)
If (Remainder = 0) Then
  TextWindow.WriteLine(" This number is even!")
  Else
    TextWindow.WriteLine(" This is an odd number!")
EndIf

292.	<Template-blank & Note>

PROGRAM DELAY

When running your last code, did you notice how the text all just blurted out? Let’s add a delay so that one sentence displays at a time. To do so we use the Program.Delay() operation. Within the parentheses after "Delay", you enter how many milliseconds you want to wait before the program continues. 

Write and execute the following code:

TextWindow.Write("Type a number that includes a decimal: ")
Number = TextWindow.ReadNumber()
Program.Delay(1000)
TextWindow.Write("Now we will round your number! ...")
Program.Delay(1000)
TextWindow.Write("Your rounded number is: " + Math.Round(Number) + ".")
Program.Delay(1000)
Remainder = Math.Remainder(Math.Round(Number), 2)
If (Remainder = 0) Then
  TextWindow.WriteLine(" This number is even!")
  Program.Delay(1000)
  Else
    TextWindow.WriteLine(" This is an odd number!")
    Program.Delay(1000)
EndIf

As a note: in our last program, the If Statement and the Else Statement are control statements while the code that is executed in response to those control statements are the branches. 

In our last program, the first branch is: 

TextWindow.WriteLine(" This number is even!")
Program.Delay(1000)

And the second branch is:

TextWindow.WriteLine(" This is an odd number!")
Program.Delay(1000)

293.	<Template-blank & Note>

CHALLENGE:

Write a program that includes the following:

-If statement, 
-ElseIf statement, 
-Else statement, 
-Program.delay, 
-Math.Remainder, and
-Math.Ceiling(number).

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

294.	<Template-blank & Note>
</p>
<p>^G^ SUBMODULE C. Creating Loops</p>
<p>
LOOPS

As we covered earlier, a loop is something that connects back to the beginning point. In computers, a loop is a sequence of instructions that are continually repeated until an exact condition is achieved.

Usually a loop will occur when a certain set of actions are performed by a computer program. The program would then check to see if it has reached the condition required for completion. If not, it starts over and repeats the set of actions. If so, it exits the loop and moves on to the next consecutive instruction in the computer program.

EXAMPLE: You tell the computer to search through a list of paint colors until the color “red” is found.

The list that the computer will search is this:

Blue
Yellow
Red
Orange
White

A loop is written into the computer and looks something like this:

Step 1: Get next consecutive item in the list.
Step 2: Check whether the item equals "Red".
Step 3: If the item equals "Red", exit this loop.
Step 4: If the item is not equal to "Red", loop back to step 1.

When this loop is executed, it will go like this:
Step 1: Acquired "Blue"
Step 2: Checked if "Blue" equal to "Red"
Step 3: Item not equal to "Red". Did not exit the loop.
Step 4: Item not equal to "Red". Looped back to Step 1.
Step 1: Acquired "Yellow"
Step 2: Checked if "Yellow" equal to "Red"
Step 3: Item not equal to "Red". Did not exit the loop.
Step 4: Item not equal to "Red". Looped back to Step 1.
Step 1: Acquired "Red"
Step 2: Checked if "Red" equal to "Red"
Step 3: Item equal to "Red". Exited the loop.

295.	<Template-blank & Note>

WHILE AND FOR LOOPS

A couple of important types of loops are “While Loops” and “For Loops.” 

A “While Loop” is basically a repeating “if statement.” Meaning, you are telling the computer to execute certain code repeatedly while a particular condition is present. E.g. While hungry, eat. 
	
Write and execute the following code in the text Editor:

Amount = 1
While (Amount < 1025)
  TextWindow.WriteLine(Amount)  
  Amount = Amount * 2
EndWhile

In this program we are telling the program that “As long as the Amount is less than 1025, multiply the Amount by 2.”

296.	<Template-blank>

ITERATIONS

An important aspect of how loops work is the concept of an iteration.

To iterate means to say or do something again; to repeat something. An iteration is the act of repeating. Iteration means to go through a defined series of actions, repeating a certain number of times. Usually this defined series of actions is repeated a certain number of times, or until a condition is met.

EXAMPLE: Computer programs are usually created in iterations: Coming up with a basic working version, reviewing the program for mistakes to correct and improvements to make, doing that work, and repeating. When the program works acceptably, this process starts.

297.	<Template-blank & Note>

FOR LOOPS

A “For Loop” is used to repeat a section of code a number of times. For Loops are used when the number of iterations are known. Here’s an example: for each student in the class (25), provide a grade. 

Write and execute the following for loop:

For B = 1 To 10
  TextWindow.WriteLine(B)
EndFor

In our code, we assign the values 1 through 10 to the variable B, one at a time, as the loop is executed. An integer is a whole number (such as 3 or 5). An increment is a distinct increase in amount. Incrementing is to distinctly increase a number. “1 To 10” above was incrementing an integer. But since we assigned a variable (“B”), we were technically “incrementing a variable.” And so, we utilized a For Loop to increment a variable. 

298.	<Template-blank & Note>

CLOSING YOUR LOOP

If we create a loop and don’t close the loop, the code will continue on forever. Here’s an example:

Write and execute the following code:

Begin:
A = 50
If A > 25 Then
  TextWindow.WriteLine("50 is more than 25!")
  Goto Begin
EndIf

You will see that when this program is executed, the computer just continues to print "50 is more than 25!" to the screen until you close the window. This is because the condition statement in your loop ("If A > 25") is always true, so the loop always returns to the beginning and does another iteration. This is called an "infinite loop"; under certain circumstances this can lock up a computer and require the shutdown and restart of the computer in order to stop the loop.

To close the loop in our example, you would simply get rid of the “Begin:" label and the “Goto" statement. 

299.	<Template-blank & Note>

CHALLENGE:

Write a program that includes the following:

-A For Loop, and
-A While Loop.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 
</p>
<p>^G^ SUBMODULE D. The Graphics Window</p>
<p>
300.	<Template-blank & Note>

COUNTING EVEN NUMBERS

Now, let’s make a program – using a For Loop – that counts out only even numbers up to 30.

Write and execute the following code:

For B = 2 To 30 Step 2
  TextWindow.WriteLine(B)
EndFor

“Step” in your code counts up or down depending on the values you assign.

301.	<Template-blank & Note>

COUNTING ODD NUMBERS

So now, let’s reverse the countdown and use only odd numbers!

Write and execute the following code:

For B = 29 To 1 Step -2
  TextWindow.WriteLine(B)
EndFor

302.	<Template-blank & Note>

LOOPS AND CONDITIONAL STATEMENTS

It’s interesting to note that every Loop can be translated into a Conditional Statement. For example, we can rewrite our last For Loop as follows:

Write and execute the following code:

B = 29
Start:
TextWindow.WriteLine(B)
B = B - 2
If (0 < B) Then
  Goto Start
EndIf

Actually, fun fact: every time you write a While Loop in your code, the computer automatically converts it to an If Statement with one or more Goto Statements. This is done behind the scenes; you won't see the actual instructions you typed in the editor change. 

303.	<Template-blank & Note>

COMPARING NUMBERS

Let’s do another loop that will find out the larger of two numbers.

Write and execute the following code:

TextWindow.Write("Type in a number: ")
First_Number = TextWindow.ReadNumber()
TextWindow.Write("Type in another number: ")
Second_Number = TextWindow.ReadNumber()
If (First_Number > Second_Number) Then
  Larger = First_Number
  Else
    Larger = Second_Number
EndIf
TextWindow.WriteLine("The larger number is: " + Larger)



304.	<Template-blank & Note>
CHALLENGE:

Write a program that includes the following:

-Create a loop that counts numbers backwards, one number at a time, starting at 100 down to 1, that also includes Program.Delay(100). 

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

305.	<Template-blank & Note>

GRAPHICS WINDOW

You can customize certain aspects of the Text Window and how it displays. We touched upon this earlier with foreground color and background color. 

There is also a graphics window. Graphics are pictures displayed on a computer. Graphics are art created on a computer by a person.  

Like the Text Window that displays text, Small Basic also has a Graphics Window for graphics. 

Enter and execute the following code:
GraphicsWindow.Show()

<img src="cid:Image_0.png" />

That’s what the window looks like. 

306.	<Template-blank>

CUSTOMIZING THE WINDOW

Now, to customize the Graphics Window, there are some things you can do.

Write and execute the following code:

GraphicsWindow.Height = 500
GraphicsWindow.Width = 700
GraphicsWindow.BackgroundColor = "Silver"
GraphicsWindow.Title = "The Graphics Window!"
GraphicsWindow.Show()

307.	<Template-blank & Note>

DRAWING LINES

One of the cool things about the Graphics Window is the ability to draw lines. 

Write and execute the following code:

GraphicsWindow.DrawLine(10,10,200,10)
GraphicsWindow.DrawLine(10,10,10,200)
GraphicsWindow.DrawLine(10,200,200,200)
GraphicsWindow.DrawLine(200,10,200,200)

Each line of code drew one side of the square. The X Coordinate refers to how far left to right (horizontally) something extends on a grid or a map. The Y Coordinate refers to how far top to bottom (vertically) something extends. Here’s how each number in each line of code laid this out:

?	The first number tells the computer how far left or right the line will be started (called the X Coordinate).
?	The second number tells us where the line starts – up and down – (called the Y Coordinate).
?	The third number tells the computer where the bottom of the line ends right to left.
?	The fourth number tells the computer where the bottom of the line (up and down) ends up.

308.	<Template-blank & Note>

CHALLENGE:

Draw an X shape using GraphicsWindow.DrawLine.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

309.	<Template-blank & Note>

LINE THICKNESS:

We can also change the color and thickness of the line. Write and execute the following code:

GraphicsWindow.Height = 500</p>
<p>^G^ GraphicsWindow.Width = 500</p>
<p>^G^ GraphicsWindow.BackgroundColor = "Silver"</p>
<p>^G^ GraphicsWindow.Title = "The Colored Square!"</p>
<p>^G^ GraphicsWindow.PenColor = "Red"</p>
<p>^G^ GraphicsWindow.DrawLine(10,10,450,10)</p>
<p>^G^ GraphicsWindow.PenWidth = 10</p>
<p>^G^ GraphicsWindow.PenColor = "Blue"</p>
<p>^G^ GraphicsWindow.DrawLine(10,10,10,450)</p>
<p>^G^ GraphicsWindow.PenWidth = 20</p>
<p>^G^ GraphicsWindow.PenColor = "Yellow"</p>
<p>^G^ GraphicsWindow.DrawLine(10,450,450,450)</p>
<p>^G^ GraphicsWindow.PenWidth = 30</p>
<p>^G^ GraphicsWindow.PenColor = "Green"</p>
<p>^G^ GraphicsWindow.DrawLine(450,10,450,450)</p>
<p>^G^ GraphicsWindow.PenWidth = 40</p>
<p>

310.	<Template-blank & Note>

LOOPS AND THE GRAPHICS WINDOW

We can also utilize a Loop with the Graphics Window. 

Write and execute the following code:

GraphicsWindow.Title = "Growing Lines!"
GraphicsWindow.Height = 500
GraphicsWindow.Width = 500
GraphicsWindow.PenColor = "Red"
GraphicsWindow.BackgroundColor = "Blue"
For A = 1 To 15
  GraphicsWindow.PenWidth = A
  GraphicsWindow.DrawLine(20, A * 20, 400, A * 20)
EndFor

As you can see, we used a For Loop to gradually increase the thickness of the lines.

311.	<Template-blank & Note>

PIXELS

We can also draw pixels in the Graphics Window.

Write and execute the following code:

GraphicsWindow.SetPixel(20, 20, "Black")

If you can see it, there’s a tiny black dot on the screen. The numbers give the X and Y coordinate for the pixel.

312.	<Template-blank & Note>

TEXT

And in case you were wondering, we can also add text to the Graphics Window.

Write and execute the following code:

GraphicsWindow.DrawBoundText(70, 70, 150, "John")
GraphicsWindow.DrawBoundText(120, 70, 150, "Sally")
GraphicsWindow.DrawBoundText(180, 70, 150, "Bill")
GraphicsWindow.DrawBoundText(250, 70, 150, "Jessica")
GraphicsWindow.DrawBoundText(70, 120, 150, "John")
GraphicsWindow.DrawBoundText(120, 120, 150, "Sally")
GraphicsWindow.DrawBoundText(180, 120, 150, "Bill")
GraphicsWindow.DrawBoundText(250, 120, 150, "Jessica")

The first number gives the X Coordinate, the second number the Y Coordinate and the third number the size of the font. 

313.	<Template-blank & Note>

CHALLENGE:

Write a program that includes the following:

-GraphicsWindow.Height, 
-GraphicsWindow.Width, 
-GraphicsWindow.DrawLine,
-GraphicsWindow.PenWidth, 
-GraphicsWindow.PenColor, 
-GraphicsWindow.SetPixel,
-GraphicsWindow.DrawBoundText with multiple font sizes, and
-GraphicsWindow.FontItalic.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com </p>

<p>314. <MCSA>
	1) A ______________ is a construct used to store data that may change as the computer performs its tasks. </p>
~~Variable CORRECT
~~Constant
~~Number
~~Statement##EndNum
<p>2) In Small Basic, the Read() operation instructs the computer to:</p>
~~Read the entire program and make sure there are no typos.
~~Wait for a response from the user and use that data for something. CORRECT
~~Take the decimal provided and round down to the closest integer.
~~Turn the background of the text editor red.##EndNum

<p>3) Which of the following symbols is not used in comparison instructions?</p>
~~>
$$$<
~~>=
~~* CORRECT##EndNum

<p>4) The __ Coordinate tells the computer how far left or right the line will be started. The ____ Coordinate tells the computer how far up or down the line will be started.</p>
~~X, Y CORRECT
~~Y, X
~~T1, T2
~~Left, Right##EndNum
	
<p>
315.	<Learning Objectives -  Transition List>
</p>
~~^G^ How to assign variables
~~^G^ Performed math equations through coding
~~^G^ Wrote and executed conditional statements
~~^G^ Wrote and executed loops 
~~^G^ Utilized and customized the Graphics Window in Small Basics##EndBull


<p>^G^ <Learning Objectives List, 1.5-second interval></p>
<p>^G^ MODULE 8. Creating Computer Programs</p>
<p>^G^ Learning objectives: </p>
~~^G^ Create subroutines
~~^G^ Commenting code
~~^G^ Write and execute for loops
~~^G^ Create and run subprograms
~~^G^ Develop arrays
~~^G^ Write basic computer programs in Small Basic##EndBull

<p>^G^ SUBMODULE A. Subroutines and Commenting Code  </p>
<p>
SHAPES	<Template-blank>

We can also paint and create shapes in the Graphics Window.

Write and execute the following code:

GraphicsWindow.BrushColor = "Green"
GraphicsWindow.FillTriangle(300,150,150,300,450,300)

For a triangle we need six numbers. The first two indicate where the top of the triangle is placed (left to right, up to down). The second two indicate the left-hand corner and the third set indicates the right-hand corner. 

316.	<Template-blank & Note>

OTHER SHAPES

You can also draw and paint: squares, rectangles and ellipses (ovals). To draw a circle, you would use the eclipse operation. 

Write and execute the following code:

GraphicsWindow.Width = 300
GraphicsWindow.Height = 300
GraphicsWindow.BackgroundColor = "Black"
GraphicsWindow.PenColor = "Yellow"
GraphicsWindow.PenWidth = 20
GraphicsWindow.DrawEllipse(50, 50, 200, 200)

317.	<Template-blank & Note>

FILL THE CIRCLE

If you want to fill in the circle so that it looks like a sun, simply change your code.

Write and execute the following code:

GraphicsWindow.Width = 300
GraphicsWindow.Height = 300
GraphicsWindow.BackgroundColor = "Black"
GraphicsWindow.BrushColor = "Yellow"
GraphicsWindow.FillEllipse(50, 50, 200, 200)

318.	<Template-blank>

CREATING A CIRCLE WITH VARIABLES

Now let’s make a circle using variables.

Write and execute the following code:

A = 20
B = 50
GraphicsWindow.FillEllipse(A, B, 350, 350)

319.	<Template-blank>

MOVING SHAPES

You can also animate shapes and move them around.

Write and execute the following code:

Triangle = Shapes.AddTriangle(50, 100, 100, 50, 150, 100)
Program.Delay(1000)
Shapes.Animate(Triangle, 200, 200, 1000)

The first thing we must include in the parentheses is the name of the shape, followed by x coordinate, y coordinate and then the speed of the move. 

320.	<Template-blank & Note>

CHALLENGE:

Write a program that includes the following:

-GraphicsWindow.BrushColor, 
-GraphicsWindow.DrawEllipse,
-GraphicsWindow.FillEllipse,
-GraphicsWindow.FillTriangle,
-GraphicsWindow.FillRectangle,
-Shapes.AddTriangle, and
-Shapes.Animate.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

321.	<Template-blank & Note>

SUBROUTINES

A subroutine is a set of computer instructions, to be used by a main computer program, that performs some task that you may want to do over and over again at various times. The main computer program could do some of its own actions in a specific sequence, then ask the subroutine to do its tasks, and then continue on where it was before it asked the subroutine to do its tasks. Another term for this is a subprogram (a term we discussed earlier in this course).

EXAMPLE: Within a computer program used to operate a college, there could be a subprogram that checked to see if any new students had been enrolled since you last used the program. The main program could use that subprogram as it was starting up, get the data on any new students, and then continue on with its primary functions.

To “call” means to demand or direct something. In normal English this could be used like, “This calls for celebration!” In computers, a call is a direction by a main computer program to execute the tasks of a subprogram. More specifically, when a “call” is made, a program temporarily transfers control of the computer to a subprogram. Once the subprogram is done executing, control of the computer is returned to the main program. A program could make many “calls” to multiple subprograms as the program does its sequence of tasks.  

EXAMPLE: If you were using a video game program, the video game program could call a “high score” subprogram after every game ended.

322.	<Template-blank>

SUBROUTINES

In Small Basic, the name of a subroutine is preceded with the statement "Sub". The instructions that make up the subroutine end off with the statement "EndSub". 

Write and execute the following code:

TextWindow.Write("What is your name?: ")
Name = TextWindow.Read()
TextWindow.Write("Hi there, " + Name + "! What time do you think it is? ")
Time = TextWindow.Read()
TextWindow.Write("Well " + Name + ", per your computer, the time now is actually: ")
PrintTime()
Sub PrintTime
  TextWindow.WriteLine(Clock.Time)
EndSub

You execute a subroutine by calling the subroutine name followed by (). The parentheses tell the computer that the main program wants a subroutine executed. 

323.	<Template-blank>

COMMENTS

In a larger program, subroutines become quite useful and save you from writing extra code because you can call the subroutine from anywhere in the program. 

Subroutines can also be used to break apart larger problems into smaller problems. 

An important thing to keep in mind in writing code is the readability of your code. I.e. If another developer takes over after you, they need to know the purpose of different sections of your code. To clarify our code, we use “comments.” For example: PrintTime() 'this is a subroutine that prints the current time

This is called “commenting your code.” 

In Small Basic, comments are preceded with an apostrophe (‘). Comments are ignored by the computer and not executed. 

324.	<Template-blank>

COMMENTS

To comment the code we wrote above, we would do the following:

TextWindow.Write("What is your name?: ") 'This allows the user to enter their name
Name = TextWindow.Read() 'This assigns what the user types to the variable Name
TextWindow.Write("Hi there, " + Name + "! What time do you think it is? ") 'This prints text and allows the user to guess the time
Time = TextWindow.Read() 'This assigns what the user types to the variable Time
TextWindow.Write("Well " + Name + ", per your computer, the time now is actually: ") 'This prints text 
PrintTime() 'This names the subroutine 
Sub PrintTime 'This starts the subroutine
  TextWindow.WriteLine(Clock.Time) 'This accesses the computer's clock and returns the time 
EndSub 'This ends the subroutine

325.	<Template-blank & Note>

CHALLENGE:

Write your own program that includes a subroutine, and comment your code. 

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 
</p>
<p>^G^ SUBMODULE B. Loops, Subprograms and Arrays </p>

<p>326.	<Template-blank></p>
<p>
TURTLES

Write and execute the following code:

Turtle.Show()

We bet the name of this section makes sense now!

327.	<Template-blank>

MOVING TURTLES

You can move the turtle by entering in numbers inside parentheses (1 means that the Turtle moves 1 pixel; Turtle.Move(50) means that the turtle moves 50 pixels). 

Write and execute the following code:

Turtle.Move(50)
Program.Delay(500)
Turtle.Move(25)
Program.Delay(500)
Turtle.Move(75)
Program.Delay(500)
Turtle.Move(35)
Program.Delay(500)

328.	<Template-blank>

TURTLE TRIANGLE

Now let’s have the turtle draw a triangle.

Write and execute the following code:

Turtle.Angle = 45
Turtle.Move(150)
Turtle.Angle = 135
Turtle.Move(150)
Turtle.Angle = 270

329.	<Template-blank>

COLORFUL TURTLE

We can also have him turn right or left and change the colors. We will now make a rectangle with the turtle.

Write and execute the following code:

GraphicsWindow.BackgroundColor = "LightYellow" 
GraphicsWindow.PenColor = "Magenta"
Turtle.Move(100)
Turtle.TurnRight()
Turtle.Move(200)
Turtle.TurnRight()
Turtle.Move(100)
Turtle.TurnRight()
Turtle.Move(200)

330.	<Template-blank>

TURTLE FOR LOOP

We can also draw shapes using a for loop. Let’s do an octagon.

Write and execute the following code:

For X = 1 To 8
  Turtle.Move(75)
  Turtle.Turn(45)
EndFor

331.	<Template-blank>

RAINBOW TURTLE

Let’s make a shape that’s virtually a circle. We will also use the X and Y Coordinates to place the turtle where we want it in the Graphics Window. And, to make it more fun, let’s randomize some colors! It’s about to get trippy…

Write and execute the following code:

Turtle.X = 20
Turtle.Y = 200
Sides = 200
Angle = 360 / Sides
Size = 1000 / Sides
For A = 1 To Sides
  GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()
  GraphicsWindow.BackgroundColor = GraphicsWindow.GetRandomColor()
  Turtle.Move(Size)
  Turtle.Turn(Angle)
EndFor

332.	<Template-blank & Note>

CHALLENGE:

Using what you learned so far, have the turtle make a square using a For Loop. Additionally, have a background color, a pen color and try to make the square as centered as you can.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

333.	<Template-blank & Note>

CHALLENGE:
	
Write a program that includes the following:

-Turtle.Show,
-Turtle.Move,
-Turtle.TurnRight,
-Turtle.Angle,
-Turtle.TurnLeft, and
-Turtle.MoveTo.

334.	<Template-blank & Note></p>

<p>VIDEOS</p>

<p>At this point in the course, we are going to take a short break from Small Basic to cover some additional software development concepts that relate to the code you’ve been writing and your future career as a software developer.</p>
<p>
335. </p>

<p>Watch the following video in full:</p>
<p>VIDEO~~How to Think Like a Developer~~https://drive.google.com/open?id=1PgKRUy734uigbHidgMA7V6evUAxkyZcl
</p>

<p>336.</p>

QUIZ:
~~The CPU can do _____ instructions at a time.
~~1 Billion
~~Five
~~One CORRECT
~~As many as necessary
~~Which of the following is not one of the five elements of a computer program?
~~Entrance
~~Variables
~~Control/Branching
~~Clock CORRECT##EndNum


<p>337.</p>

<p>Watch the following video in full:</p>
<p>VIDEO~~Using Flow Charts as a Developer~~https://ttamediaservices-uswe.streaming.media.azure.net/3d1ff6a5-d59a-44e7-89e7-595ad8c7cb6b/2018%20Flowcharts.mp4
</p>

<p>338.</p>

QUIZ:
~~__________ are diagrams used to represent algorithms, workflows, or processes.
~~Flowcharts
~~Event driven process chains
~~Family trees
~~Activity diagrams
~~In a flowchart, the parallelogram shape represents:
~~Data entry or display CORRECT
~~Start/End
~~Variables 
~~Operations##EndNum


<p>339. </p>

<p>Watch the following video in full:</p>
<p>VIDEO~~Troubleshooting~~https://drive.google.com/file/d/1Aga6YEJ_XhMfBcn6oRirtuV2VZtGKyXE/view?usp=sharing
</p>

<p>340. </p>

QUIZ:
~~Troubleshooting can be defined as:
~~Identifying the problem in a system or program. CORRECT
~~Deleting any code that you think is unimportant.
~~Uploading your code to the web.
~~Locating the person who originally wrote the code you are dealing with.
~~What is the name of the troubleshooting approach explained in the previous video?
~~The bottom-up approach
~~The half-split approach CORRECT
~~The move-the-problem approach
~~The follow-the-path approach##EndNum

<p>341.</p>

<p>Watch the following video in full:</p>
<p>VIDEO~~Breaking Down a Program~~https://drive.google.com/file/d/1jlJue1RYRHz2X7b-1snc-7KCfrdBS28c/view?usp=sharing
</p>

<p>342.</p>

QUIZ:
~~When creating a computer program, you should:
~~Build the whole program from start to finish in one sitting.
~~Break the program up into “bite size” pieces and build one step at a time. CORRECT
~~Start from the end and work your way backwards.
~~Not troubleshoot your code as you write it.
~~##EndNum

<p>343.</p>

<p>Watch the following video in full:</p>

<p>VIDEO~~How to do Your Job as a Developer~~https://drive.google.com/file/d/18cXSkclJbeBjot6MR7B0-t_5I6NyetgG/view?usp=sharing
</p>

<p>344.</p>

QUIZ:

~~If you run into issues when building your program, which of these should you NOT use to find a solution?
~~Stack Overflow
~~Google
~~Dotnetpearls.com
~~Facebook CORRECT
~~Where can you find the official documentation for Microsoft technologies?
~~Microsoft Developer Network CORRECT
~~Stack Overflow
~~GitHub
~~The Linux Documentation Project##EndNum


<p>345. </p>

<p>MORE SUBROUTINES

We can also use subroutines to handle variables.

Write and execute the following code:

TextWindow.Write("Type a number: ")
Number_1 = TextWindow.ReadNumber()
TextWindow.Write("Type another number: ")
Number_2 = TextWindow.ReadNumber()
TextWindow.Write("Let's type another number: ")
Number_3 = TextWindow.ReadNumber()
TextWindow.Write("And one last number: ")
Number_4 = TextWindow.ReadNumber()
Largest_Number()
TextWindow.WriteLine("The largest number is: " + Largest_Number)
Sub Largest_Number
 If Number_1 > (Number_2 + Number_3 + Number_4) Then
 Largest_Number = Number_1
 ElseIf Number_2 > (Number_1 + Number_3 + Number_4) Then
 Largest_Number = Number_2
 ElseIf Number_3 > (Number_1 + Number_2 + Number_4) Then
 Largest_Number = Number_3
 Else
 Largest_Number = Number_4
 EndIf
EndSub

346.	<Template-blank & Note>

SUBPROGRAM

Now let’s try another subprogram that will be called three times.

Write and execute the following subprogram:

TextWindow.BackgroundColor = "DarkRed"
TextWindow.Write("This is a program that allows you to choose from various sounds you'd wish to hear. You'll get to choose three times! ")
Sound()
Sub Sound
Start:
TextWindow.Write("To hear a bell ring, type Bell. To hear a chime, type Chime. To hear a click sound, type Click: ")
Sound_Choice = TextWindow.Read()
  If Sound_Choice = "Bell" Then 
    Sound.PlayBellRing()
  ElseIf Sound_Choice = "Chime" Then
    Sound.PlayChime()
  ElseIf Sound_Choice = "Click" Then
    Sound.PlayClick()
    Else 
      TextWindow.Write("Please type Chime, Bell or Click.")
      Goto Start
  EndIf 
EndSub
Sound()
Sound()

347.	<Template-blank & Note>

CHALLENGE:

Create a subroutine that includes variables.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 

348.	<Template-blank & Note>

ARRAYS
	
An array is a collection of data, arranged in rows and columns. In computers, an array is a group of related things that are stored together in a sequence. It is a way things can be organized in a computer in a logical way. Arrays can be quite simple, or quite complex.

EXAMPLE: A simple array would be something like the numbers 7, 3 and 15. It would be written out like this:

[7,3,15]

These three pieces of data are called elements – they are the elements of the array.

A system is needed for identifying each element of an array. The simplest method for this is to start numbering them at zero starting at the left position and count up from there. 

In the above example, the element "7" would be at position 0, "3" would be at position 1 and "15" would be at position 2.

Another word for the position of an element is the "index" of the element – for the above example of an array, index 0 is "7", index 1 is "3", etc. The plural form if "index" is "indices", pronounced "IN-dih-sees".

Each element, therefore, has two properties: its index and its value.

EXAMPLE: You have three pictures of your cat and you could save them in an array: CatPic1, CatPic2 and CatPic3. Here, index 1 has a value of "CatPic2".

In some computer languages, including SmallBasic, the index for an element in an array can be a unique text item, instead of a number.

Example: 

You could have an array with three elements: 4, 22, 8

The indices for these elements could be:

"planes"
"trains"
"automobiles"

Here, the element in the array with the index "trains" would have a value of 22.

349.	<Template-blank & Note>
</p>
<p>^G^ SUBMODULE C. Working with Data Structures</p>
<p>
ARRAYS

Write and execute the following code:

TextWindow.Write("Enter the name for User 1: ")
User_1_Name = TextWindow.Read()
TextWindow.Write("How old is User 1?: ")
User_1_Age = TextWindow.Read()
TextWindow.Write("Enter the name for User 2: ")
User_2_Name = TextWindow.Read()
TextWindow.Write("How old is User 2?: ")
User_2_Age = TextWindow.Read()
TextWindow.Write("Enter the name for User 3: ")
User_3_Name = TextWindow.Read()
TextWindow.Write("How old is User 3?: ")
User_3_Age = TextWindow.Read()
TextWindow.Write("Enter the name for User 4: ")
User_4_Name = TextWindow.Read()
TextWindow.Write("How old is User 4?: ")
User_4_Age = TextWindow.Read()
TextWindow.Write("Greetings Users! ")
TextWindow.Write(User_1_Name + ", you are " + User_1_Age + " years old! ")
TextWindow.Write(User_2_Name + ", you are " + User_2_Age + " years old! ")
TextWindow.Write(User_3_Name + ", you are " + User_3_Age + " years old! ")
TextWindow.Write(User_4_Name + ", you are " + User_4_Age + " years old! ")

We can utilize an array to replace having to create the variables User_1_Name, User_1_Age, User_2_Name, User_2_Age, User_3_Name, User_3_Age, User_4_Name and User_4_Age. Instead we can use an index to store the names and ages. 

Each of these are indices for the array and are stored as one variable. Storing values in an array allows you to access arrays inside of loops. 

350.	<Template-blank & Note>

ARRAYS

Now, let’s change the code you just wrote into an array.

Write and execute the following code:

For A = 1 To 4
  TextWindow.WriteLine("Please enter the name for User " + A + ":")
  Name[A] = TextWindow.Read()
EndFor
For B = 1 To 4
  TextWindow.WriteLine("What is User " + B + "'s age?:")
  Age[B] = TextWindow.Read() 
EndFor
TextWindow.Write("Hello ")
For A = 1 To 4
  TextWindow.Write(Name[A])
  If A < 3 Then
    TextWindow.Write(", ")
  ElseIf A < 4 Then
    TextWindow.Write(" and ")
  EndIf
EndFor 
TextWindow.Write(". You are ")
For B = 1 To 4
  TextWindow.Write(Age[B])
  If B < 3 Then
    TextWindow.Write(", ")
  ElseIf B < 4 Then
    TextWindow.Write(" and ")
    Else 
      TextWindow.Write(" respectively.")
  EndIf 
EndFor
TextWindow.WriteLine("")

In the above code, “A” and “B” are referred to as the operators. Our indices are 1 to 4 and visually would look something like this:
						
</p>
<p>Indices</p><p>1</p><p>2</p><p>3</p><p>4</p><p>A</p><p>(Name)</p><p>Name entered by user</p><p>Name entered by user</p><p>Name entered by user</p><p>Name entered by user</p><p>B</p><p>(Age)</p><p>Age entered by user</p><p>Age</p><p>entered by user</p><p>Age</p><p>entered by user</p><p>Age</p><p>entered by user</p>
<p>
351.	<Template-blank & Note>

ARRAYS

Let’s write another array.

Write and execute the following code:

TextWindow.Write("What is your name?: ")
Input["Name"] = TextWindow.Read()
TextWindow.Write("How tall are you?: ")
Input["Height"] = TextWindow.Read()
TextWindow.Write("What year were you born?: ")
Input["Birth_year"] = TextWindow.Read()
TextWindow.Write("What is your favorite color?: ")
Input["Color"] = TextWindow.Read()
TextWindow.Write("What country were you born in?: ")
Input["Country"] = TextWindow.Read()
TextWindow.Write("Please type one of the following to pull relevant data: Name, Height, Birth_year, Color or Country. ")
Index = TextWindow.Read()
TextWindow.WriteLine("The " + Index + " you entered is " + Input[Index] + "!")

352.	<Template-blank & Note>

DATA STRUCTURES

To fully understand arrays, you must know what a “data structure” is. A data structure refers to the organization of related pieces of information. There are different data structures that each allow different operations to be performed on the data.  A data structure refers to how the data is organized in terms of implementation (use of the data; relation of the various parts of the data). It is a particular way to organize data in a computer so that it can be used efficiently.

Data structures are used as a means of organizing information in a computer so that the data can be utilized in an efficient manner. 

EXAMPLE: Consider two different areas of business: The shipping industry and the manufacturing industry.

The types of data the shipping industry may need to collect and organize will center around vehicles and their capacity, shipping rates, fuel costs, travel times between various geographical points, etc.

The types of data the manufacturing industry may need to collect and organize will center around raw materials, product manufacturing methods and times, inventory locations and amounts, shipping information, etc.

The structure of the data used by computers in these two industries may have similarities, but it’s certain that the data structures won’t be identical.

A linear data structure is simply a data structure where the data in the structure are organized one after the other – basically, a list. 

EXAMPLE: A list of the states in the U.S. Each element of the structure, conceptually, comes right before or after another element.

When speaking about arrays, “dimension” has a specific meaning. A one-dimensional array is a linear data structure. The last program we wrote was a one-dimensional array. 

A two-dimensional array is basically an array of arrays. Essentially, you could think of this as a grid of rows and columns, where each entry in the grid is itself an array. You will explore this in the next section.

353.	<Template-blank & Note>

CHALLENGE:

Create your own one-dimensional array.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	A
cademy of Learning students: 	academyoflearning@learncodinganywhere.com 

354.	<Template-blank & Note>

TWO-DIMENSIONAL ARRAYS
	
We will now write a two-dimensional array. 

Write and execute the following code:

Animals["Princess"]["Color"] = "Black"
Animals["Princess"]["Species"] = "Dog
Animals["Ivy"]["Color"] = "Gray with dark spots and stripes"
Animals["Ivy"]["Species"] = "Cat"
Animals["Goldie"]["Color"] = "Gold"
Animals["Goldie"]["Species"] = "Fish"
Animals["Tweet"]["Color"] = "Green with yellow"
Animals["Tweet"]["Species"] = "Bird"
TextWindow.Write("What is the name?: ")
Name = TextWindow.Read()
TextWindow.WriteLine("Their color is: " + Animals[Name]["Color"])
TextWindow.WriteLine("Their species is: " + Animals[Name]["Species"])

When the program runs, it will ask you for the name of the pet. Enter one of the four names (Princess, Ivy, Goldie or Tweet).

Visually, this is what we created in our array:

</p>
<p>Name:</p><p>Princess</p><p>Ivy</p><p>Goldie</p><p>  Tweet</p><p>Color:</p><p>Black</p><p>  Gray with dark spots and stripes</p><p>Gold</p><p>   Green with yellow</p><p>Species:</p><p>Dog</p><p>Cat</p><p>Goldfish</p><p>Parakeet</p>
<p>
355.	<Template-blank & Note>

GRAPHICS AND ARRAYS 

Arrays can also be used with Graphics.

Write and execute the following code:

GraphicsWindow.BackgroundColor = "Black"
GraphicsWindow.Height = 600
GraphicsWindow.Width = 605
Rows = 10
Columns = 10
Sides = 50
For A = 1 To Columns
  For B = 1 To Rows
    GraphicsWindow.BrushColor = "Blue"
    Squares[A][B] = Shapes.AddRectangle(Sides, Sides)
    Shapes.Move(Squares[A][B], A * Sides, B * Sides)
  EndFor
EndFor

356.	<Template-blank & Note>

CHALLENGE:

Create your own two-dimensional array.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com </p>

<p>SUBMODULE D. Putting it all together

357.	<Template-blank>

SOME BASIC PROGRAMS

Now we will put together some of what you’ve learned so far to make some basic programs. Actually type out all code in the Editor – this is vital experience for you as a developer. 

358.	<Template-blank>

PROGRAM 1

Write and execute the following code:

GraphicsWindow.BackgroundColor = "LightCyan"
GraphicsWindow.PenColor = "DarkSlateBlue"
GraphicsWindow.Width = 400
GraphicsWindow.Height = 400
For A = 1 To 200 Step 6
  GraphicsWindow.DrawRectangle(200 - A, 200 - A, A * 2, A * 2)
  Program.Delay(100)
  EndFor
For A = 1 To 200 Step 6
  GraphicsWindow.DrawEllipse(200 - A, 200 - A, A * 2, A *2)
  Program.Delay(100)
EndFor

Look over your code and try to see what each line does exactly.

359.	<Template-blank>

PROGRAM 2

Write and execute the following code:

GraphicsWindow.Width = 1000
GraphicsWindow.Height = 650
GraphicsWindow.BackgroundColor = "Black"
A = 1000
B = 1000
For C = 1 To 100000
  D = Math.GetRandomNumber(3)
  E = 500
  Program.Delay(.1)
  F = 30
  If (D = 1) then
    E = 30
    Program.Delay(.1)
    F = 1000
  EndIf
  If (D = 2) Then
    E = 1000
    F = 1000
    Program.Delay(.1)
  EndIf
  A = (A + E) / 2
  Program.Delay(.1)
  B = (B + F) / 2
  Random_Color = GraphicsWindow.GetRandomColor()
  GraphicsWindow.SetPixel(A, B, Random_Color)
EndFor

Look over your code and try to see what each line does exactly.

360.	<Template-blank >

PROGRAM 3

Write and execute the following code:

GraphicsWindow.Title = "America!"
GraphicsWindow.Width = 1000
GraphicsWindow.Height = 600
For A = 1 To 100000
  GraphicsWindow.BrushColor = "Red"
  B = Math.GetRandomNumber(1000)
  C = Math.GetRandomNumber(1000)
  GraphicsWindow.FillEllipse(B, C, 4, 4)
EndFor
For D = 1 To 100000
  GraphicsWindow.BrushColor = "Blue"
  B = Math.GetRandomNumber(500)
  C = Math.GetRandomNumber(275)
  GraphicsWindow.FillEllipse(B, C, 4, 4)
EndFor

Look over your code and try to see what each line does exactly.

361.	<Template-blank>

PROGRAM 4

Write and execute the following code:

GraphicsWindow.Width = 275
Turtle.X = 130
Turtle.Y = 400
GraphicsWindow.PenColor = "Green"
Turtle.Move(150)
Turtle.X = 135
Turtle.Y = 400
GraphicsWindow.PenColor = "Green"
Turtle.Move(150)
Turtle.X = 100
Turtle.Y = 200
GraphicsWindow.PenColor = "MediumVioletRed"
Turns = 200
Length = 300 /  Turns
Angle = 400 / Turns
Turtle.Speed = 10
For A = 1 To 6
  For B = 1 To Turns
    Turtle.Move(Length)
    Turtle.Turn(Angle)
  EndFor
  Turtle.Turn(18)
EndFor
Turtle.X = 128.5
Turtle.Y = 193

Look over your code and try to see what each line does exactly.

362.	<Template-blank>

PROGRAM 5

Write and execute the following code:

GraphicsWindow.BackgroundColor = "DarkBlue"
GraphicsWindow.Height = 600
GraphicsWindow.Width = 605
Rows = 10
Columns = 10
Sides = 50
For A = 1 To Columns
  For B = 1 To Rows
    GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()
    Squares[A][B] = Shapes.AddRectangle(Sides, Sides)
    Shapes.Move(Squares[A][B], A * Sides, B * Sides)
  EndFor
EndFor
For A = 1 To Columns
  For B = 1 To Rows
    Shapes.Animate(Squares[B][A], 300, 0, 1000)
    Program.Delay(50)
  EndFor
EndFor
For A = 1 To Columns
  For B = 1 To Rows
    Shapes.Animate(Squares[B][A], 288, 500, 1000)
    Program.Delay(10)
  EndFor
EndFor
For A = 1 To Columns
  For B = 1 To Rows
    Shapes.Animate(Squares[B][A], 275, 250, 1000)
    Program.Delay(10)
  EndFor
EndFor

Look over your code and try to see what each line does exactly.

363.	<Template-blank>

EVENTS

An event is an action or something that occurs that is detected by a computer program. There can be system events (events that occur as a result of operations the computer does automatically), or user events, like typing on the keyboard or clicking a mouse. 

In Small Basic, an event is something that reacts to a user’s action and is when the computer tells you that something interesting has happened. For example, if you make a program that turns the screen blue when you click on the word “blue,” clicking on the word "blue" would be the event. 

Events can make programs more interesting and interactive. 

Interactive means that two things influence one another and create effects on each other. In computers, interactive refers to a computer that is able to be communicated with and gotten to perform activities by a human; these activities involve the person using the computer. An interactive computer is a computer that you can affect in some way (move a pointer on a screen and select something, etc.) and which will respond in some manner.  Most, if not all, computers you’ve handled have been interactive.

The computer game "Hangman" could be developed in Small Basic and would include events. In this game, the user makes choices and the program receives the user’s input using events. 

There is such a thing as “event-driven programming.” This is programming where the flow of the program is controlled by events. An example would be a program in which the program flow is determined by the typing of keys and clicking the mouse.  

364.	<Template-blank>

FLICKR

Flickr is a website where people can store and display images. 
We will now use the MouseDown event in the following program (you will see what it does when you run the program). We can pull a picture from Flickr!

Write and execute the following code:

GraphicsWindow.Title = "It's raining cats and dogs!"
GraphicsWindow.Width = 700
GraphicsWindow.Height = 700
GraphicsWindow.MouseDown = Pics
Sub Pics
  Picture = Flickr.GetRandomPicture("Cats, Dogs")
  GraphicsWindow.DrawResizedImage(Picture, 0, 0, 700, 700)
EndSub

365.	<Template-blank>

DISPLAYING PHOTOS
	
We just used a new operation called “DrawResizedImage” which allows you to display photos. The first word in the parentheses names the picture, the next two numbers are the X and Y Coordinates in the Graphics Window and the last two specify the width and length of the photo (respectively). Let’s get a little tougher on events.

Write and execute the following code:

GraphicsWindow.DrawBoundText(250, 200, 100, "Click the screen!")
GraphicsWindow.MouseDown = Click
GraphicsWindow.BrushColor = "Yellow"
GraphicsWindow.BackgroundColor = "Black"
Sub Click
  GraphicsWindow.ShowMessage("You clicked the mouse!", "NOTICE")
  A = GraphicsWindow.MouseX - 5
  B = GraphicsWindow.MouseY - 5
GraphicsWindow.FillTriangle(A, B, 30, 30, 40, 40)
EndSub

There are two chunks of text following ShowMessage. The first chunk is what will be displayed inside the window, and the second chunk is what is displayed at the top.

This program contains a subroutine as well. Every time the user clicks in the GraphicsWindow, the subroutine “Click” is called. The Click subroutine results in a couple events: 1. A message pops up and 2. A yellow ray expands out from the top left corner after you shut the message box. One of the unique things about events is that when an event occurs, the subroutine is called automatically. 

In the above code, we assigned the subroutine name to the MouseDown event which is connected to the GraphicsWindow object. Even though the MouseDown looks like a property (attributes of an object), we are actually assigning the subroutine “Click” to it. If MouseDown were a property, we would be assigning it a value (as opposed to a subroutine).

366.	<Template-blank>

PAINT

Now that you are familiar with subroutines, events and other key coding concepts, we can create our very own “Paint” program that will allow you to draw using the mouse. You will be able to draw in rainbow-like colors with a thick brush.

In this next program, we will be using the MouseMove event, which gets the X and Y coordinates, in pixels, of the mouse cursor – based on where it is as compared to the top left of the desktop. 

Write and execute the following code:

GraphicsWindow.MouseMove = A
GraphicsWindow.MouseDown = B
GraphicsWindow.BackgroundColor = "SkyBlue"
GraphicsWindow.PenWidth = (25)
Sub B
  C = GraphicsWindow.MouseX 
  D = GraphicsWindow.MouseY 
EndSub
Sub A
  E = GraphicsWindow.MouseX 
  F = GraphicsWindow.MouseY 
  If (Mouse.IsLeftButtonDown) Then
    GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()
    GraphicsWindow.DrawLine(C, D, E, F)
  EndIf
C = E
D = F
EndSub
‘Click and hold down mouse as you move it around.

367.	<Template-blank & Note>

CHALLENGE:

Create a program that includes the following events:

-MouseUp, 
-MouseDown,
-MouseMove, 
-KeyDown, and 
-KeyUp.

Email your code from this challenge to a Tech Academy Instructor.

NOTE:
You can use the message system within this LMS, or email an Instructor at:

•	Academy of Learning students: 	academyoflearning@learncodinganywhere.com 
</p>
<p>368.     <Template-blank></p>

<p>CONGRATULATIONS! You have reached the end of the Overview of Software Development Course. You have written code and are now familiar with the basics of computer programming. The data you learned on this course, combined with the Computer and Technology Basics Course, will provide a firm tech foundation for your future. </p>

<p>You have two steps remaining on this course:</p>
~~The final essay
~~The final examination##EndBull

<p>369.   <Template-blank & Note>
</p>
<p>ASSIGNMENT:</p>

~~What did you gain from writing code in Small Basic?
~~As a software developer, how can you handle barriers you run into while coding?
~~How can you utilize the data on this course in your future?##EndBull
<p>^G^ <Learning Objectives -  Transition List></p>
~~^G^ Learned how to create subroutines
~~^G^ Learned how to comment code
~~^G^ Wrote and executed for loops
~~^G^ Created and ran subprograms
~~^G^ Developed arrays
~~^G^ Wrote basic computer programs in Small Basic##EndBull

<p>370.    <Final Quiz></p>

<p>FINAL EXAM:</p>
<p>1.        What is a program?</p>
<p>a.        A set of instructions that can be entered into a computer that make it accomplish specific tasks Correct</p>
<p>b.        A piece of hardware that connects to a computer</p>
<p>c.        A tool created to assist the average computer-user</p>
<p>d.        An information processor</p>

<p>2.        What is a variable?</p>
<p>a.        A construct used to store data that may change as the computer performs its tasks Correct</p>
<p>b.        A small program used to perform math functions</p>
<p>c.        A tool used to determine the result of one or more conflicting operations</p>
<p>d.        The main component of a database</p>

<p>3.        What are the five elements of programming?</p>
<p>a.        Entrance point, variables, control/branching, sub-programs and exit point Correct</p>
<p>b.        Entrance point, variables, symbols, statements, and exit point</p>
<p>c.        Entrance point, control/branching, statements, sub-programs, and exit point</p>
<p>d.        Entrance point, control/branching, symbols, statements, and exit point</p>

<p>4.        What is a data structure?</p>
<p>a.        A data format that consists of a prescribed organization of information Correct</p>
<p>b.        Any unique set of characters</p>
<p>c.        A program that determines how data should be arranged</p>
<p>d.        Any arrangement of self-structuring data</p>

<p>5.        What is a data type?</p>
<p>a.        A label given to a piece of data by which a computer can know how the data is to be used Correct</p>
<p>b.        A piece of data that is either variable or constant</p>
<p>c.        A construct used to determine whether or not data has been corrupted</p>
<p>d.        A construct that decides whether or not a certain type of data can be processed</p>

<p>6.        What is a number system? </p>
<p>a.        A system used for writing numbers Correct</p>
<p>b.        A system used for calculations</p>
<p>c.        A system used for keeping track of computer operations</p>
<p>d.        A system used for numbering computer characters</p>

<p>7.        What is ASCII?</p>
<p>a.        A standard that provides a way to represent text characters using numbered codes Correct</p>
<p>b.        An organized set of characters used for encryption of data</p>
<p>c.        A protocol that allows computer programmers to understand user-input</p>
<p>d.        A protocol used decode information</p>

<p>8.        What is unicode? </p>
<p>a.        A standard for representing letters and symbols in computers Correct</p>
<p>b.        A set of code that functions as a single unit</p>
<p>c.        A set of code that is used to create single-page applications</p>
<p>d.        A standard for transmitting data to and from the CPU</p>

<p>9.        What is hexadecimal?</p>
<p>a.        A number system based on 16 digits Correct</p>
<p>b.        A data type that consists of at least 16 decimal points</p>
<p>c.        A binary structure made up of 16 columns</p>
<p>d.        A decimal structure made up of six columns</p>

<p>10.      What is Object-Oriented programming?</p>
<p>a.        An approach to programming that focuses on objects and data Correct</p>
<p>b.        A programming paradigm that relies on CPU efficiency</p>
<p>c.        A style of programming created for the sole purpose of readability</p>
<p>d.        A type of programming intended to replace scripting</p>

<p>11.      What does FIFO stand for?</p>
<p>a.        First in, first out Correct</p>
<p>b.        Fast in, fast out</p>
<p>c.        Frame, image, feature, focus</p>
<p>d.        First iteration, final output</p>

<p>12.      What is the command line?</p>
<p>a.        An interface that allows a user to type commands into a computer Correct</p>
<p>b.        A Integrated Development Environment</p>
<p>c.        A computer programming framework</p>
<p>d.        A program designed to remove unwanted software from a computer</p>

<p>13.      What is a core?</p>
<p>a.        A component of the CPU that processes information Correct</p>
<p>b.        The main component of RAM</p>
<p>c.        The central location of any electronic device</p>
<p>d.        The component in a computer that powers all other components</p>

<p>14.      What is a Framework?</p>
<p>a.        A collection of tools that assist in building software Correct</p>
<p>b.        A preliminary outline of a website or web application</p>
<p>c.       A program used for developing software</p>
<p>d.       A software package that provides stability to applications</p>

<p>15.     What is a file structure? </p>
<p>a.       The manner in which a computer organizes its files Correct</p>
<p>b.       A template by which files are created</p>
<p>c.       The structure of a file</p>
<p>d.       A type of data structure</p>

<p>16.     What is a registry?</p>
<p>a.       A database that stores the settings of the operating system and some applications Correct</p>
<p>b.       A location where users can store information</p>
<p>c.       A location where users can create accounts</p>
<p>d.       A program used to identify data types</p>

<p>17.     Which shape is not used in a flowchart?</p>
<p>a.       Octagon Correct</p>
<p>b.       Parallelogram</p>
<p>c.       Rectangle</p>
<p>d.       Circle</p>

<p>18.     Which of the following is used to write a conditional statement?</p>
<p>a.       if/else Correct</p>
<p>b.       this/that</p>
<p>c.       or/else</p>
<p>d.       if/that</p>

<p>19.     Which of the following is not a sorting algorithm?</p>
<p>a.       Class Correct</p>
<p>b.       Bubble</p>
<p>c.       Insertion</p>
<p>d.       Selection</p>

<p>20.     Which of the following is not a feature of Small Basic?</p>
<p>a.       Accommodates the creation of complex software Correct</p>
<p>b.       Provides smooth transition to other programming languages</p>
<p>c.       Has built-in IDE</p>
<p>D.      Helps teach programming fundamentals</p>