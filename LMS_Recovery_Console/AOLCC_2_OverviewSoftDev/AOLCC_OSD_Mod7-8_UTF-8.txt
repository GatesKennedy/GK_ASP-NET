
MODULE~~7~~Writing Code
OBJECTIVES~~Learning Objectives: Course Overview~~7 - Course Overview~~Assign variables~~Perform math equations through coding~~Write and execute conditional statements~~Write and execute loops~~Utilize and customize the Graphics Window in Small Basics
SUBMODULE~~A~~Variables and Equations
LESSON~~VARIABLE~~These things the computer is keeping track of are usually called “variables”. This is because the VALUE part of it can change when you tell the computer to change it. The fact that the value can vary is why it’s called a “variable” – its value is not permanent or constant. <br> Usually the “=” symbol is used to set the VALUE of a variable. <br> When the “=” symbol is used to set the value of a variable, it is usually used like this: <br> [NAME of the variable] = [VALUE that is being assigned to that variable] <br> <example>: fabricColor = “blue”.<br> Here, there is a piece of data that the computer is keeping track of that has been given the name “fabricColor”.</example> By using the “=” symbol, we can set the value of the piece of data called “fabricColor”. In this case, we are setting that value to the series of letters “blue”.
LESSON~~CHALLENGE~~Write a program that contains the following elements: <br> -A background color, <br> -A foreground color, <br> -The TextWindow.Pause() operation, and <br> -The WriteLine operation. <br> Note: You are being asked to use the TextWindow.Pause() operation which is something you haven’t learned on this course. As we mentioned earlier, you will occasionally be tasked with performing actions you haven’t been taught yet. This is intentional and is a vital component of the learning process. Remember to research online for solutions and data as needed. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at:</p> <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~MORE VARIABLES~~Let’s make it so the program can store and print variables. <br> Write and execute the following code: <br> TextWindow.Write("What is your favorite food?: ") <br> food = TextWindow.Read() <br> TextWindow.WriteLine("Your favorite food is " + food + "! Yummy!") <br> TextWindow.Write("Which city would you most like to visit?: ") <br> city = TextWindow.Read() <br> TextWindow.WriteLine(city + " sounds like a great place to visit! Don’t forget to bring your computer with you!") <br> Read() in your above code is an operation that instructs the computer to stand by for the user to type something and then press the Enter/Return key. After the user types in data and hits Enter/Return, the computer takes what they typed and returns it to the program.
LESSON~~MORE VARIABLES~~As covered earlier, a variable is a place where values are stored for later use. In your code, food and city are variables. The text the user types in response to food and city are stored in variables. The variable “food” was used to store the user’s favorite food, while the variable “city” was used to store the city that the user wished to visit. <br> When naming a variable, it is recommended that you use a name that describes the variable. For example: user_address = TextWindow.Read() would be a good name for a variable that stores a user’s home address, whereas giraffe = TextWindow.Read() would not be a good name for storing user address data.
LESSON~~CHALLENGE~~Write a program that contains the following elements: <br> -The TextWindow.Write operation, <br> -The TextWindow.Read operation, and <br> -The CursorTop property (note: a property is an attribute of an object). <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~MATH AND NUMBERS~~You can also store and utilize numbers in variables and perform mathematical equations. <br> Write and execute the following code: <br> First_number = 5 <br> Second_number = 10 <br> Third_number = 15 <br> Fourth_number = 20 <br> Fifth_number = 50 <br> Sixth_number = 16 <br> TextWindow.WriteLine(Second_number + Third_number) <br> We just added 10 and 15 together. <br> The variable numbers have been assigned various values, as follows: <br> ●        You assigned the variable First_number the value 5 <br> ●        You assigned the variable Second_number the value 10 <br> ●        You assigned the variable Third_number the value 15 <br> ●        You assigned the variable Fourth_number the value 20 <br> ●        You assigned the variable Fifth_number the value 50 <br> ●        You assigned the variable Sixth_number the value 16 <br> When we used “text” as a parameter earlier, we were required to surround the text with quotation marks, but with numeric parameters, quotation marks are unnecessary.
LESSON~~SUBTRACTION~~You can also perform subtraction. Add the following code beneath your existing code and execute it: <br> TextWindow.WriteLine(25 - First_number)
LESSON~~MULTIPLICATION~~You can multiply numbers. Add the following code beneath your existing code and execute it: <br> TextWindow.WriteLine(20  Fourth_number)
LESSON~~DIVISION~~You can divide numbers as well. Add the following code beneath your existing code and execute it: <br> TextWindow.WriteLine(400 / Fifth_number)
LESSON~~<TITLE>~~We can also get the square root of a number. Add the following code beneath your existing code and execute it: <br> TextWindow.WriteLine(Math.SquareRoot (Sixth_number)) <br> To explain the code you just wrote: the "Math" code you used here is an example of a library. In computer programming, a "library" is a pre-made package of computer code. Libraries are useful in computer programming because it means the programmer doesn't have to write the code to do the functions that the library provides, he or she can just use the pre-made library. <br> “Math” is a library that’s built into Small Basic. SquareRoot is an operation available from the Math library.
LESSON~~<TITLE>~~Using the Math library, you can also round numbers. Add the following code beneath your existing code and execute it: <br> TextWindow.WriteLine(Math.Round(5.6)) <br> Feel free to play around with your variables and different math operations.
LESSON~~<TITLE>~~Another interesting thing you can do with Small Basic is convert temperature from Fahrenheit to Celsius. <br> The way you convert Fahrenheit to Celsius is: Fahrenheit temperature subtracted by 32, multiplied by 5/9ths. Or written as an equation: <br> T(°C) = (T(°F) - 32) × 5/9 <br> Add the following code beneath your existing code and execute it: <br> TextWindow.Write("What is temperature in Fahrenheit?: ") <br> Fahrenheit = TextWindow.ReadNumber() <br> Celsius = (Fahrenheit - 32)  5/9 <br> TextWindow.WriteLine("The temperature in Fahrenheit converted to Celsius is: " + Celsius)
LESSON~~<TITLE>~~We can also write a short program that randomly provides the user with a number. <br> Write and execute the following code: <br> TextWindow.WriteLine(Math.GetRandomNumber(100))
LESSON~~CHALLENGE~~Write a program that includes the following: <br> -The TextWindow.Title property, <br> -Assigning a value to a variable, <br> -The TextWindow.WriteLine operation, and <br> -The TextWindow.Top property. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com 
SUBMODULE~~B~~Writing Conditional Statements
LESSON~~CONDITIONAL STATEMENTS~~A condition is something that other things depend on. In math, a condition is something that is required for something else to be true. Conditions are points that are necessary to be present for other points to be present.  If you say something is “conditional”, that means it relies on the state of another thing. <br> <example> The statement “Electricity is allowed to flow through this part of the computer if you type 1” could be a condition.</example> Or say you have a word problem like this: “Come up with two digits that, when added together, equal six – but the digits 2 and 4 are never to be used to get the answer.” Here, the part that tells you that you can’t use the numbers 2 or 4 in your answer is a condition. <br> A conditional statement takes place when you tell the computer: depending upon ___, do ___. An “If Statement” is a type of conditional statement that means: if this, then that.
LESSON~~BRANCHES~~A branch is a point of decision. Branches are a fundamental element of how we make computers do useful work. A branch instruction tells the computer to go to somewhere other than the primary series of instructions and instead execute an alternate series of instructions; usually based on some decision the computer has to make. It is a statement written in the program’s code to make the computer shift from one area to another. <br> <example> If you are using a computer program to order food from a restaurant, and the restaurant has a different procedure for ordering if you want the food to be delivered instead of being set aside for you to pick up, there will be a branch in the computer program where the user will be prompted as to whether their order is for pickup or delivery. In this case, the computer will have two series of steps it will perform. The branch instruction in the computer program will execute one or the other of these series, depending on the user’s response.</example>
LESSON~~COMPARISON INSTRUCTIONS~~0 <br> In order to tell the computer how to analyze conditional statements, you'll make use of comparison instructions, such as the < and > symbols. <br> Write and execute the following code: <br> If (5 < 10) Then <br> TextWindow.WriteLine("Five is less than 10.") <br> EndIf <br> The EndIf statement tells the computer that we are done with that operation.
LESSON~~CHALLENGE~~Write and execute your own conditional statement. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~MORE CONDITIONAL STATEMENTS~~Now let’s try using an ElseIf Statement, which is basically a second If Statement and gives us another option to choose from. We will also use an Else Statement that tells the computer, “Otherwise, do ___.” You’ll get a better idea of this through trying it out. <br> Write and execute the following code: <br> start: <br> TextWindow.Write("Are you a vegan?: ") <br> Vegan = TextWindow.Read() <br> If Vegan = "Yes" Then <br> TextWindow.WriteLine("I know, you've told me already. Several times...") <br> ElseIf Vegan = "No" Then <br> TextWindow.WriteLine("Looks like meat is back on the menu!") <br> Else <br> TextWindow.WriteLine("Please enter Yes or No.") <br> Goto start <br> EndIf <br> We also added a couple new things to your code above: <br> 1.        Start:. This is called a label. It’s similar to a bookmark within your program. In this case, the start label defines the beginning of our code and gave us a place to return to in our program, and <br> 2.        Goto: This is an instruction which makes the program go to an exact place in the series of instructions that make up the program. “Goto” statements utilize labels and redirect the program to a label.
LESSON~~COMPARISON INSTRUCTIONS~~Here is another comparison instruction: <br> >= (greater-than sign followed by equal sign). This symbol is used to show that a comparison should be made. Specifically, this "greater-than or equal" symbol is basically an instruction to check whether the data on the left side of the symbol is more than or equal in amount or quantity than the data on the right side. The answer to this comparison is an answer of "true" or "false". <br> <example> 6 >= 6. This means “check whether 6 is greater than or equal to 6”. The answer is "true".</example>
LESSON~~TIME~~Now let’s create a program that can tell the difference between a.m. and p.m. Write and execute the following code: <br> If (Clock.Hour < 12) Then <br> TextWindow.WriteLine("It is a.m.") <br> ElseIf (Clock.Hour >= 12) Then <br> TextWindow.WriteLine("It is p.m.") <br> EndIf <br> Clock.Hour is a built-in instruction in SmallBasic that gives the time on your computer; we used that to check the time.
LESSON~~TIME~~There is also another way you can write your code: <br> Write and execute the following code: <br> If (Clock.Hour < 12) Then <br> TextWindow.WriteLine("It is a.m.") <br> Else <br> TextWindow.WriteLine("It is p.m.") <br> EndIf <br> As you can see, the code is sometimes automatically indented for you. This is so that the code is sectioned off and you can easily read through it. In Small Basic, this indentation isn’t necessary and the program will run whether or not the code is indented.
LESSON~~REMAINDER~~Now let’s use some of what we’ve learned so far (and learn some more) to build a program that will round numbers and tell us whether or not the numbers are odd or even. <br> In math, a “remainder” is the number left over after a division operation. Math.Remainder is an operation in Small Basic that divides the first number by the second and returns (gives back) the remainder. E.g. All even numbers will have a 0 remainder when divided by 2 (nothing left over – they divide evenly). <br> Write and execute the following code: <br> TextWindow.Write("Type a number that includes a decimal: ") <br> Number = TextWindow.ReadNumber() <br> TextWindow.Write("Now we will round your number! ...") <br> TextWindow.Write("Your rounded number is: " + Math.Round(Number) + ".") <br> Remainder = Math.Remainder(Math.Round(Number), 2) <br> If (Remainder = 0) Then <br> TextWindow.WriteLine(" This number is even!") <br> Else <br> TextWindow.WriteLine(" This is an odd number!") <br> EndIf
LESSON~~PROGRAM DELAY~~When running your last code, did you notice how the text all just blurted out? Let’s add a delay so that one sentence displays at a time. To do so we use the Program.Delay() operation. Within the parentheses after "Delay", you enter how many milliseconds you want to wait before the program continues. <br> Write and execute the following code: <br> TextWindow.Write("Type a number that includes a decimal: ") <br> Number = TextWindow.ReadNumber() <br> Program.Delay(1000) <br> TextWindow.Write("Now we will round your number! ...") <br> Program.Delay(1000) <br> TextWindow.Write("Your rounded number is: " + Math.Round(Number) + ".") <br> Program.Delay(1000) <br> Remainder = Math.Remainder(Math.Round(Number), 2) <br> If (Remainder = 0) Then <br> TextWindow.WriteLine(" This number is even!") <br> Program.Delay(1000) <br> Else <br> TextWindow.WriteLine(" This is an odd number!") <br> Program.Delay(1000) <br> EndIf <br> As a note: in our last program, the If Statement and the Else Statement are control statements while the code that is executed in response to those control statements are the branches. <br> In our last program, the first branch is: <br> TextWindow.WriteLine(" This number is even!") <br> Program.Delay(1000) <br> And the second branch is: <br> TextWindow.WriteLine(" This is an odd number!") <br> Program.Delay(1000)
LESSON~~CHALLENGE~~Write a program that includes the following: <br> -If statement, <br> -ElseIf statement, <br> -Else statement, <br> -Program.delay, <br> -Math.Remainder, and <br> -Math.Ceiling(number). <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
SUBMODULE~~C~~Creating Loops
LESSON~~LOOPS~~As we covered earlier, a loop is something that connects back to the beginning point. In computers, a loop is a sequence of instructions that are continually repeated until an exact condition is achieved. <br> Usually a loop will occur when a certain set of actions are performed by a computer program. The program would then check to see if it has reached the condition required for completion. If not, it starts over and repeats the set of actions. If so, it exits the loop and moves on to the next consecutive instruction in the computer program. <br> <example> You tell the computer to search through a list of paint colors until the color “red” is found. <br> The list that the computer will search is this: <br> Blue <br> Yellow <br> Red <br> Orange <br> White <br> A loop is written into the computer and looks something like this: <br> Step 1: Get next consecutive item in the list. <br> Step 2: Check whether the item equals "Red". <br> Step 3: If the item equals "Red", exit this loop. <br> Step 4: If the item is not equal to "Red", loop back to step 1. <br> When this loop is executed, it will go like this: <br> Step 1: Acquired "Blue" <br> Step 2: Checked if "Blue" equal to "Red" <br> Step 3: Item not equal to "Red". Did not exit the loop. <br> Step 4: Item not equal to "Red". Looped back to Step 1. <br> Step 1: Acquired "Yellow" <br> Step 2: Checked if "Yellow" equal to "Red" <br> Step 3: Item not equal to "Red". Did not exit the loop. <br> Step 4: Item not equal to "Red". Looped back to Step 1. <br> Step 1: Acquired "Red" <br> Step 2: Checked if "Red" equal to "Red" <br> Step 3: Item equal to "Red". Exited the loop.</example>
LESSON~~WHILE AND FOR LOOPS~~A couple of important types of loops are “While Loops” and “For Loops.” <br> A “While Loop” is basically a repeating “if statement.” Meaning, you are telling the computer to execute certain code repeatedly while a particular condition is present. E.g. While hungry, eat. <br> Write and execute the following code in the text Editor: <br> Amount = 1 <br> While (Amount < 1025) <br> TextWindow.WriteLine(Amount) <br> Amount = Amount  2 <br> EndWhile <br> In this program we are telling the program that “As long as the Amount is less than 1025, multiply the Amount by 2.”
LESSON~~ITERATIONS~~An important aspect of how loops work is the concept of an iteration. <br> To iterate means to say or do something again; to repeat something. An iteration is the act of repeating. Iteration means to go through a defined series of actions, repeating a certain number of times. Usually this defined series of actions is repeated a certain number of times, or until a condition is met. <br> <example> Computer programs are usually created in iterations: Coming up with a basic working version, reviewing the program for mistakes to correct and improvements to make, doing that work, and repeating. When the program works acceptably, this process starts.</example>
LESSON~~FOR LOOPS~~A “For Loop” is used to repeat a section of code a number of times. For Loops are used when the number of iterations are known. Here’s an example: for each student in the class (25), provide a grade. <br> Write and execute the following for loop: <br> For B = 1 To 10 <br> TextWindow.WriteLine(B) <br> EndFor <br> In our code, we assign the values 1 through 10 to the variable B, one at a time, as the loop is executed. An integer is a whole number (such as 3 or 5). An increment is a distinct increase in amount. Incrementing is to distinctly increase a number. “1 To 10” above was incrementing an integer. But since we assigned a variable (“B”), we were technically “incrementing a variable.” And so, we utilized a For Loop to increment a variable.
LESSON~~CLOSING YOUR LOOP~~If we create a loop and don’t close the loop, the code will continue on forever. Here’s an example: <br> Write and execute the following code: <br> Begin: <br> A = 50 <br> If A > 25 Then <br> TextWindow.WriteLine("50 is more than 25!") <br> Goto Begin <br> EndIf <br> You will see that when this program is executed, the computer just continues to print "50 is more than 25!" to the screen until you close the window. This is because the condition statement in your loop ("If A > 25") is always true, so the loop always returns to the beginning and does another iteration. This is called an "infinite loop"; under certain circumstances this can lock up a computer and require the shutdown and restart of the computer in order to stop the loop. <br> To close the loop in our example, you would simply get rid of the “Begin:" label and the “Goto" statement.
LESSON~~CHALLENGE~~Write a program that includes the following: <br> -A For Loop, and <br> -A While Loop. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
SUBMODULE~~D~~The Graphics Window
LESSON~~COUNTING EVEN NUMBERS~~Now, let’s make a program – using a For Loop – that counts out only even numbers up to 30. <br> Write and execute the following code: <br> For B = 2 To 30 Step 2 <br> TextWindow.WriteLine(B) <br> EndFor <br> “Step” in your code counts up or down depending on the values you assign.
LESSON~~COUNTING ODD NUMBERS~~So now, let’s reverse the countdown and use only odd numbers! <br> Write and execute the following code: <br> For B = 29 To 1 Step -2 <br> TextWindow.WriteLine(B) <br> EndFor
LESSON~~LOOPS AND CONDITIONAL STATEMENTS~~It’s interesting to note that every Loop can be translated into a Conditional Statement. For example, we can rewrite our last For Loop as follows: <br> Write and execute the following code: <br> B = 29 <br> Start: <br> TextWindow.WriteLine(B) <br> B = B - 2 <br> If (0 < B) Then <br> Goto Start <br> EndIf <br> Actually, fun fact: every time you write a While Loop in your code, the computer automatically converts it to an If Statement with one or more Goto Statements. This is done behind the scenes; you won't see the actual instructions you typed in the editor change.
LESSON~~COMPARING NUMBERS~~Let’s do another loop that will find out the larger of two numbers. <br> Write and execute the following code: <br> TextWindow.Write("Type in a number: ") <br> First_Number = TextWindow.ReadNumber() <br> TextWindow.Write("Type in another number: ") <br> Second_Number = TextWindow.ReadNumber() <br> If (First_Number > Second_Number) Then <br> Larger = First_Number <br> Else <br> Larger = Second_Number <br> EndIf <br> TextWindow.WriteLine("The larger number is: " + Larger)
LESSON~~CHALLENGE~~Write a program that includes the following: <br> -Create a loop that counts numbers backwards, one number at a time, starting at 100 down to 1, that also includes Program.Delay(100). <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~GRAPHICS WINDOW~~You can customize certain aspects of the Text Window and how it displays. We touched upon this earlier with foreground color and background color. <br> There is also a graphics window. Graphics are pictures displayed on a computer. Graphics are art created on a computer by a person. <br> Like the Text Window that displays text, Small Basic also has a Graphics Window for graphics. <br> Enter and execute the following code: <br> GraphicsWindow.Show() <br> <img src="cid:Image_0.png" /> <br> That’s what the window looks like.
LESSON~~CUSTOMIZING THE WINDOW~~Now, to customize the Graphics Window, there are some things you can do. <br> Write and execute the following code: <br> GraphicsWindow.Height = 500 <br> GraphicsWindow.Width = 700 <br> GraphicsWindow.BackgroundColor = "Silver" <br> GraphicsWindow.Title = "The Graphics Window!" <br> GraphicsWindow.Show()
LESSON~~DRAWING LINES~~One of the cool things about the Graphics Window is the ability to draw lines. <br> Write and execute the following code: <br> GraphicsWindow.DrawLine(10,10,200,10) <br> GraphicsWindow.DrawLine(10,10,10,200) <br> GraphicsWindow.DrawLine(10,200,200,200) <br> GraphicsWindow.DrawLine(200,10,200,200) <br> Each line of code drew one side of the square. The X Coordinate refers to how far left to right (horizontally) something extends on a grid or a map. The Y Coordinate refers to how far top to bottom (vertically) something extends. Here’s how each number in each line of code laid this out: <br> ●        The first number tells the computer how far left or right the line will be started (called the X Coordinate). <br> ●        The second number tells us where the line starts – up and down – (called the Y Coordinate). <br> ●        The third number tells the computer where the bottom of the line ends right to left. <br> ●        The fourth number tells the computer where the bottom of the line (up and down) ends up.
LESSON~~CHALLENGE~~Draw an X shape using GraphicsWindow.DrawLine. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~LINE THICKNESS~~We can also change the color and thickness of the line. Write and execute the following code: <br> GraphicsWindow.Height = 500</p>
LESSON~~LOOPS AND THE GRAPHICS WINDOW~~We can also utilize a Loop with the Graphics Window. <br> Write and execute the following code: <br> GraphicsWindow.Title = "Growing Lines!" <br> GraphicsWindow.Height = 500 <br> GraphicsWindow.Width = 500 <br> GraphicsWindow.PenColor = "Red" <br> GraphicsWindow.BackgroundColor = "Blue" <br> For A = 1 To 15 <br> GraphicsWindow.PenWidth = A <br> GraphicsWindow.DrawLine(20, A  20, 400, A  20) <br> EndFor <br> As you can see, we used a For Loop to gradually increase the thickness of the lines.
LESSON~~PIXELS~~We can also draw pixels in the Graphics Window. <br> Write and execute the following code: <br> GraphicsWindow.SetPixel(20, 20, "Black") <br> If you can see it, there’s a tiny black dot on the screen. The numbers give the X and Y coordinate for the pixel.
LESSON~~TEXT~~And in case you were wondering, we can also add text to the Graphics Window. <br> Write and execute the following code: <br> GraphicsWindow.DrawBoundText(70, 70, 150, "John") <br> GraphicsWindow.DrawBoundText(120, 70, 150, "Sally") <br> GraphicsWindow.DrawBoundText(180, 70, 150, "Bill") <br> GraphicsWindow.DrawBoundText(250, 70, 150, "Jessica") <br> GraphicsWindow.DrawBoundText(70, 120, 150, "John") <br> GraphicsWindow.DrawBoundText(120, 120, 150, "Sally") <br> GraphicsWindow.DrawBoundText(180, 120, 150, "Bill") <br> GraphicsWindow.DrawBoundText(250, 120, 150, "Jessica") <br> The first number gives the X Coordinate, the second number the Y Coordinate and the third number the size of the font.
LESSON~~CHALLENGE~~Write a program that includes the following: <br> -GraphicsWindow.Height, <br> -GraphicsWindow.Width, <br> -GraphicsWindow.DrawLine, <br> -GraphicsWindow.PenWidth, <br> -GraphicsWindow.PenColor, <br> -GraphicsWindow.SetPixel, <br> -GraphicsWindow.DrawBoundText with multiple font sizes, and <br> -GraphicsWindow.FontItalic. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com </p>
SUBMODULE~~Module 7 Quiz
QUESTION~~A ______________ is a construct used to store data that may change as the computer performs its tasks.~~Variable~~Constant~~Number~~Statement
QUESTION~~In Small Basic, the Read() operation instructs the computer to:~~Wait for a response from the user and use that data for something~~Read the entire program and make sure there are no typos~~Take the decimal provided and round down to the closest integer~~Turn the background of the text editor red.
QUESTION~~Which of the following symbols is not used in comparison instructions?~~*~~<~~>~~>=
QUESTION~~The __ Coordinate tells the computer how far left or right the line will be started. The ____ Coordinate tells the computer how far up or down the line will be started.~~X, Y~~Y, X~~T1, T2~~Left, Right
OBJECTIVES~~Transition List~~How to assign variables~~Performed math equations through coding~~Wrote and executed conditional statements~~Wrote and executed loops~~Utilized and customized the Graphics Window in Small Basic
MODULE~~8~~Creating Computer Programs
OBJECTIVES~~Learning Objectives~~Create subroutines~~Commenting code~~Write and execute for loops~~Create and run subprograms~~Develop arrays~~Write basic computer programs in Small Basic
SUBMODULE~~A~~Subroutines and Commenting Code
LESSON~~SHAPES~~We can also paint and create shapes in the Graphics Window. <br> Write and execute the following code: <br> GraphicsWindow.BrushColor = "Green" <br> GraphicsWindow.FillTriangle(300,150,150,300,450,300) <br> For a triangle we need six numbers. The first two indicate where the top of the triangle is placed (left to right, up to down). The second two indicate the left-hand corner and the third set indicates the right-hand corner.
LESSON~~OTHER SHAPES~~You can also draw and paint: squares, rectangles and ellipses (ovals). To draw a circle, you would use the eclipse operation. <br> Write and execute the following code: <br> GraphicsWindow.Width = 300 <br> GraphicsWindow.Height = 300 <br> GraphicsWindow.BackgroundColor = "Black" <br> GraphicsWindow.PenColor = "Yellow" <br> GraphicsWindow.PenWidth = 20 <br> GraphicsWindow.DrawEllipse(50, 50, 200, 200)
LESSON~~FILL THE CIRCLE~~If you want to fill in the circle so that it looks like a sun, simply change your code. <br> Write and execute the following code: <br> GraphicsWindow.Width = 300 <br> GraphicsWindow.Height = 300 <br> GraphicsWindow.BackgroundColor = "Black" <br> GraphicsWindow.BrushColor = "Yellow" <br> GraphicsWindow.FillEllipse(50, 50, 200, 200)
LESSON~~CREATING A CIRCLE WITH VARIABLES~~Now let’s make a circle using variables. <br> Write and execute the following code: <br> A = 20 <br> B = 50 <br> GraphicsWindow.FillEllipse(A, B, 350, 350)
LESSON~~MOVING SHAPES~~You can also animate shapes and move them around. <br> Write and execute the following code: <br> Triangle = Shapes.AddTriangle(50, 100, 100, 50, 150, 100) <br> Program.Delay(1000) <br> Shapes.Animate(Triangle, 200, 200, 1000) <br> The first thing we must include in the parentheses is the name of the shape, followed by x coordinate, y coordinate and then the speed of the move.
LESSON~~CHALLENGE~~Write a program that includes the following <br> -GraphicsWindow.BrushColor, <br> -GraphicsWindow.DrawEllipse, <br> -GraphicsWindow.FillEllipse, <br> -GraphicsWindow.FillTriangle, <br> -GraphicsWindow.FillRectangle, <br> -Shapes.AddTriangle, and <br> -Shapes.Animate. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~SUBROUTINES~~A subroutine is a set of computer instructions, to be used by a main computer program, that performs some task that you may want to do over and over again at various times. The main computer program could do some of its own actions in a specific sequence, then ask the subroutine to do its tasks, and then continue on where it was before it asked the subroutine to do its tasks. Another term for this is a subprogram (a term we discussed earlier in this course). <br> <example> Within a computer program used to operate a college, there could be a subprogram that checked to see if any new students had been enrolled since you last used the program. The main program could use that subprogram as it was starting up, get the data on any new students, and then continue on with its primary functions.</example> <br> To “call” means to demand or direct something. In normal English this could be used like, “This calls for celebration!” In computers, a call is a direction by a main computer program to execute the tasks of a subprogram. More specifically, when a “call” is made, a program temporarily transfers control of the computer to a subprogram. Once the subprogram is done executing, control of the computer is returned to the main program. A program could make many “calls” to multiple subprograms as the program does its sequence of tasks. <br> <example> If you were using a video game program, the video game program could call a “high score” subprogram after every game ended.</example>
LESSON~~SUBROUTINES~~In Small Basic, the name of a subroutine is preceded with the statement "Sub". The instructions that make up the subroutine end off with the statement "EndSub". <br> Write and execute the following code: <br> TextWindow.Write("What is your name?: ") <br> Name = TextWindow.Read() <br> TextWindow.Write("Hi there, " + Name + "! What time do you think it is? ") <br> Time = TextWindow.Read() <br> TextWindow.Write("Well " + Name + ", per your computer, the time now is actually: ") <br> PrintTime() <br> Sub PrintTime <br> TextWindow.WriteLine(Clock.Time) <br> EndSub <br> You execute a subroutine by calling the subroutine name followed by (). The parentheses tell the computer that the main program wants a subroutine executed.
LESSON~~COMMENTS~~In a larger program, subroutines become quite useful and save you from writing extra code because you can call the subroutine from anywhere in the program. <br> Subroutines can also be used to break apart larger problems into smaller problems. <br> An important thing to keep in mind in writing code is the readability of your code. I.e. If another developer takes over after you, they need to know the purpose of different sections of your code. To clarify our code, we use “comments.” For example: PrintTime() 'this is a subroutine that prints the current time <br> This is called “commenting your code.” <br> In Small Basic, comments are preceded with an apostrophe (‘). Comments are ignored by the computer and not executed.
LESSON~~COMMENTS~~To comment the code we wrote above, we would do the following: <br> TextWindow.Write("What is your name?: ") 'This allows the user to enter their name <br> Name = TextWindow.Read() 'This assigns what the user types to the variable Name <br> TextWindow.Write("Hi there, " + Name + "! What time do you think it is? ") 'This prints text and allows the user to guess the time <br> Time = TextWindow.Read() 'This assigns what the user types to the variable Time <br> TextWindow.Write("Well " + Name + ", per your computer, the time now is actually: ") 'This prints text <br> PrintTime() 'This names the subroutine <br> Sub PrintTime 'This starts the subroutine <br> TextWindow.WriteLine(Clock.Time) 'This accesses the computer's clock and returns the time <br> EndSub 'This ends the subroutine
LESSON~~CHALLENGE~~Write your own program that includes a subroutine, and comment your code. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
SUBMODULE~~B~~Loops, Subprograms and Arrays
LESSON~~TURTLES~~Write and execute the following code: <br> Turtle.Show() <br> We bet the name of this section makes sense now!
LESSON~~MOVING TURTLES~~You can move the turtle by entering in numbers inside parentheses (1 means that the Turtle moves 1 pixel; Turtle.Move(50) means that the turtle moves 50 pixels). <br> Write and execute the following code: <br> Turtle.Move(50) <br> Program.Delay(500) <br> Turtle.Move(25) <br> Program.Delay(500) <br> Turtle.Move(75) <br> Program.Delay(500) <br> Turtle.Move(35) <br> Program.Delay(500)
LESSON~~TURTLE TRIANGLE~~Now let’s have the turtle draw a triangle. <br> Write and execute the following code: <br> Turtle.Angle = 45 <br> Turtle.Move(150) <br> Turtle.Angle = 135 <br> Turtle.Move(150) <br> Turtle.Angle = 270
LESSON~~COLORFUL TURTLE~~We can also have him turn right or left and change the colors. We will now make a rectangle with the turtle. <br> Write and execute the following code: <br> GraphicsWindow.BackgroundColor = "LightYellow" <br> GraphicsWindow.PenColor = "Magenta" <br> Turtle.Move(100) <br> Turtle.TurnRight() <br> Turtle.Move(200) <br> Turtle.TurnRight() <br> Turtle.Move(100) <br> Turtle.TurnRight() <br> Turtle.Move(200)
LESSON~~TURTLE FOR LOOP~~We can also draw shapes using a for loop. Let’s do an octagon. <br> Write and execute the following code: <br> For X = 1 To 8 <br> Turtle.Move(75) <br> Turtle.Turn(45) <br> EndFor
LESSON~~RAINBOW TURTLE~~Let’s make a shape that’s virtually a circle. We will also use the X and Y Coordinates to place the turtle where we want it in the Graphics Window. And, to make it more fun, let’s randomize some colors! It’s about to get trippy… <br> Write and execute the following code: <br> Turtle.X = 20 <br> Turtle.Y = 200 <br> Sides = 200 <br> Angle = 360 / Sides <br> Size = 1000 / Sides <br> For A = 1 To Sides <br> GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor() <br> GraphicsWindow.BackgroundColor = GraphicsWindow.GetRandomColor() <br> Turtle.Move(Size) <br> Turtle.Turn(Angle) <br> EndFor
LESSON~~CHALLENGE~~Using what you learned so far, have the turtle make a square using a For Loop. Additionally, have a background color, a pen color and try to make the square as centered as you can. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~CHALLENGE~~Write a program that includes the following: <br> -Turtle.Show, <br> -Turtle.Move, <br> -Turtle.TurnRight, <br> -Turtle.Angle, <br> -Turtle.TurnLeft, and <br> -Turtle.MoveTo.
LESSON~~<TITLE>~~At this point in the course, we are going to take a short break from Small Basic to cover some additional software development concepts that relate to the code you’ve been writing and your future career as a software developer.
VIDEO~~How to Think Like a Developer~~https://drive.google.com/open?id=1PgKRUy734uigbHidgMA7V6evUAxkyZcl
QUESTION~~Knowledge Check #1~~The CPU can do _____ instructions at a time.~~One~~ Billion~~Five~~As many as necessary
VIDEO~~Using Flow Charts as a Developer~~https://ttamediaservices-uswe.streaming.media.azure.net/3d1ff6a5-d59a-44e7-89e7-595ad8c7cb6b/2018%20Flowcharts.mp4
QUESTION~~Knowledge Check #2~~_________ are diagrams used to represent algorithms, workflows, or processes.~~Flowcharts~~Data entry or display~~Event driven process chains~~Family trees~~Activity diagrams
VIDEO~~Troubleshooting~~https://drive.google.com/file/d/1Aga6YEJ_XhMfBcn6oRirtuV2VZtGKyXE/view?usp=sharing
QUESTION~~Knowledge Check #3~~TroubleShooting can be defined as ______.~~Identifying the problem in a system or program~~Deleting any code that you think is unimportant~~Uploading your code to the web~~Locating the person who originally wrote the code you are dealing with
VIDEO~~Breaking Down a Program~~https://drive.google.com/file/d/1jlJue1RYRHz2X7b-1snc-7KCfrdBS28c/view?usp=sharing
QUESTION~~Knowledge Check #4~~When creating a computer program, you should _______.~~Break the program up into “bite size” pieces and build one step at a time~~Build the whole program from start to finish in one sitting~~Start from the end and work your way backwards~~Not troubleshoot your code as you write it
VIDEO~~How to do Your Job as a Developer~~https://drive.google.com/file/d/18cXSkclJbeBjot6MR7B0-t_5I6NyetgG/view?usp=sharing
QUESTION~~Knowledge Check #5~~If you run into issues when building your program, which of these should you NOT use to find a solution?~~Facebook~~Dotnetpearls.com~~Stack Overflow~~Google
LESSON~~MORE SUBROUTINES~~We can also use subroutines to handle variables. <br> Write and execute the following code: <br> TextWindow.Write("Type a number: ") <br> Number_1 = TextWindow.ReadNumber() <br> TextWindow.Write("Type another number: ") <br> Number_2 = TextWindow.ReadNumber() <br> TextWindow.Write("Let's type another number: ") <br> Number_3 = TextWindow.ReadNumber() <br> TextWindow.Write("And one last number: ") <br> Number_4 = TextWindow.ReadNumber() <br> Largest_Number() <br> TextWindow.WriteLine("The largest number is: " + Largest_Number) <br> Sub Largest_Number <br> If Number_1 > (Number_2 + Number_3 + Number_4) Then <br> Largest_Number = Number_1 <br> ElseIf Number_2 > (Number_1 + Number_3 + Number_4) Then <br> Largest_Number = Number_2 <br> ElseIf Number_3 > (Number_1 + Number_2 + Number_4) Then <br> Largest_Number = Number_3 <br> Else <br> Largest_Number = Number_4 <br> EndIf <br> EndSub
LESSON~~SUBPROGRAM~~Now let’s try another subprogram that will be called three times. <br> Write and execute the following subprogram: <br> TextWindow.BackgroundColor = "DarkRed" <br> TextWindow.Write("This is a program that allows you to choose from various sounds you'd wish to hear. You'll get to choose three times! ") <br> Sound() <br> Sub Sound <br> Start: <br> TextWindow.Write("To hear a bell ring, type Bell. To hear a chime, type Chime. To hear a click sound, type Click: ") <br> Sound_Choice = TextWindow.Read() <br> If Sound_Choice = "Bell" Then <br> Sound.PlayBellRing() <br> ElseIf Sound_Choice = "Chime" Then <br> Sound.PlayChime() <br> ElseIf Sound_Choice = "Click" Then <br> Sound.PlayClick() <br> Else <br> TextWindow.Write("Please type Chime, Bell or Click.") <br> Goto Start <br> EndIf <br> EndSub <br> Sound() <br> Sound()
LESSON~~CHALLENGE~~Create a subroutine that includes variables. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~ARRAYS~~An array is a collection of data, arranged in rows and columns. In computers, an array is a group of related things that are stored together in a sequence. It is a way things can be organized in a computer in a logical way. Arrays can be quite simple, or quite complex. <br> <example> A simple array would be something like the numbers 7, 3 and 15. It would be written out like this: <br> [7,3,15] </example><br> These three pieces of data are called elements – they are the elements of the array. <br> A system is needed for identifying each element of an array. The simplest method for this is to start numbering them at zero starting at the left position and count up from there. <br> In the above example, the element "7" would be at position 0, "3" would be at position 1 and "15" would be at position 2. <br> Another word for the position of an element is the "index" of the element – for the above example of an array, index 0 is "7", index 1 is "3", etc. The plural form if "index" is "indices", pronounced "IN-dih-sees". <br> Each element, therefore, has two properties: its index and its value. <br> <example> You have three pictures of your cat and you could save them in an array: CatPic1, CatPic2 and CatPic3. Here, index 1 has a value of "CatPic2".</example> <br> In some computer languages, including SmallBasic, the index for an element in an array can be a unique text item, instead of a number. <br> <example> You could have an array with three elements: 4, 22, 8 <br> The indices for these elements could be: <br> "planes" <br> "trains" <br> "automobiles" <br> Here, the element in the array with the index "trains" would have a value of 22.</example>
SUBMODULE~~C~~Working with Data Structures
LESSON~~ARRAYS~~Write and execute the following code: <br> TextWindow.Write("Enter the name for User 1: ") <br> User_1_Name = TextWindow.Read() <br> TextWindow.Write("How old is User 1?: ") <br> User_1_Age = TextWindow.Read() <br> TextWindow.Write("Enter the name for User 2: ") <br> User_2_Name = TextWindow.Read() <br> TextWindow.Write("How old is User 2?: ") <br> User_2_Age = TextWindow.Read() <br> TextWindow.Write("Enter the name for User 3: ") <br> User_3_Name = TextWindow.Read() <br> TextWindow.Write("How old is User 3?: ") <br> User_3_Age = TextWindow.Read() <br> TextWindow.Write("Enter the name for User 4: ") <br> User_4_Name = TextWindow.Read() <br> TextWindow.Write("How old is User 4?: ") <br> User_4_Age = TextWindow.Read() <br> TextWindow.Write("Greetings Users! ") <br> TextWindow.Write(User_1_Name + ", you are " + User_1_Age + " years old! ") <br> TextWindow.Write(User_2_Name + ", you are " + User_2_Age + " years old! ") <br> TextWindow.Write(User_3_Name + ", you are " + User_3_Age + " years old! ") <br> TextWindow.Write(User_4_Name + ", you are " + User_4_Age + " years old! ") <br> We can utilize an array to replace having to create the variables User_1_Name, User_1_Age, User_2_Name, User_2_Age, User_3_Name, User_3_Age, User_4_Name and User_4_Age. Instead we can use an index to store the names and ages. <br> Each of these are indices for the array and are stored as one variable. Storing values in an array allows you to access arrays inside of loops.
LESSON~~ARRAYS~~Now, let’s change the code you just wrote into an array. <br> Write and execute the following code: <br> For A = 1 To 4 <br> TextWindow.WriteLine("Please enter the name for User " + A + ":") <br> Name[A] = TextWindow.Read() <br> EndFor <br> For B = 1 To 4 <br> TextWindow.WriteLine("What is User " + B + "'s age?:") <br> Age[B] = TextWindow.Read() <br> EndFor <br> TextWindow.Write("Hello ") <br> For A = 1 To 4 <br> TextWindow.Write(Name[A]) <br> If A < 3 Then <br> TextWindow.Write(", ") <br> ElseIf A < 4 Then <br> TextWindow.Write(" and ") <br> EndIf <br> EndFor <br> TextWindow.Write(". You are ") <br> For B = 1 To 4 <br> TextWindow.Write(Age[B]) <br> If B < 3 Then <br> TextWindow.Write(", ") <br> ElseIf B < 4 Then <br> TextWindow.Write(" and ") <br> Else <br> TextWindow.Write(" respectively.") <br> EndIf <br> EndFor <br> TextWindow.WriteLine("") <br> In the above code, “A” and “B” are referred to as the operators. Our indices are 1 to 4 and visually would look something like this: <br> <p>Indices</p><p>1</p><p>2</p><p>3</p><p>4</p><p>A</p><p>(Name)</p><p>Name entered by user</p><p>Name entered by user</p><p>Name entered by user</p><p>Name entered by user</p><p>B</p><p>(Age)</p><p>Age entered by user</p><p>Age</p><p>entered by user</p><p>Age</p><p>entered by user</p><p>Age</p><p>entered by user</p>
LESSON~~ARRAYS~~Let’s write another array. <br> Write and execute the following code: <br> TextWindow.Write("What is your name?: ") <br> Input["Name"] = TextWindow.Read() <br> TextWindow.Write("How tall are you?: ") <br> Input["Height"] = TextWindow.Read() <br> TextWindow.Write("What year were you born?: ") <br> Input["Birth_year"] = TextWindow.Read() <br> TextWindow.Write("What is your favorite color?: ") <br> Input["Color"] = TextWindow.Read() <br> TextWindow.Write("What country were you born in?: ") <br> Input["Country"] = TextWindow.Read() <br> TextWindow.Write("Please type one of the following to pull relevant data: Name, Height, Birth_year, Color or Country. ") <br> Index = TextWindow.Read() <br> TextWindow.WriteLine("The " + Index + " you entered is " + Input[Index] + "!")
LESSON~~DATA STRUCTURES~~To fully understand arrays, you must know what a “data structure” is. A data structure refers to the organization of related pieces of information. There are different data structures that each allow different operations to be performed on the data.  A data structure refers to how the data is organized in terms of implementation (use of the data; relation of the various parts of the data). It is a particular way to organize data in a computer so that it can be used efficiently. <br> Data structures are used as a means of organizing information in a computer so that the data can be utilized in an efficient manner. <br> <example> Consider two different areas of business: The shipping industry and the manufacturing industry. <br> The types of data the shipping industry may need to collect and organize will center around vehicles and their capacity, shipping rates, fuel costs, travel times between various geographical points, etc. <br> The types of data the manufacturing industry may need to collect and organize will center around raw materials, product manufacturing methods and times, inventory locations and amounts, shipping information, etc. </example><br> The structure of the data used by computers in these two industries may have similarities, but it’s certain that the data structures won’t be identical. <br> A linear data structure is simply a data structure where the data in the structure are organized one after the other – basically, a list. <br> <example> A list of the states in the U.S. Each element of the structure, conceptually, comes right before or after another element. <br> When speaking about arrays, “dimension” has a specific meaning. A one-dimensional array is a linear data structure. The last program we wrote was a one-dimensional array. <br> A two-dimensional array is basically an array of arrays. </example> Essentially, you could think of this as a grid of rows and columns, where each entry in the grid is itself an array. You will explore this in the next section.
LESSON~~CHALLENGE~~Create your own one-dimensional array. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        A <br> cademy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~TWO-DIMENSIONAL ARRAYS~~We will now write a two-dimensional array. <br> Write and execute the following code: <br> Animals["Princess"]["Color"] = "Black" <br> Animals["Princess"]["Species"] = "Dog <br> Animals["Ivy"]["Color"] = "Gray with dark spots and stripes" <br> Animals["Ivy"]["Species"] = "Cat" <br> Animals["Goldie"]["Color"] = "Gold" <br> Animals["Goldie"]["Species"] = "Fish" <br> Animals["Tweet"]["Color"] = "Green with yellow" <br> Animals["Tweet"]["Species"] = "Bird" <br> TextWindow.Write("What is the name?: ") <br> Name = TextWindow.Read() <br> TextWindow.WriteLine("Their color is: " + Animals[Name]["Color"]) <br> TextWindow.WriteLine("Their species is: " + Animals[Name]["Species"]) <br> When the program runs, it will ask you for the name of the pet. Enter one of the four names (Princess, Ivy, Goldie or Tweet). <br> Visually, this is what we created in our array: <br> <p>Name:</p><p>Princess</p><p>Ivy</p><p>Goldie</p><p>  Tweet</p><p>Color:</p><p>Black</p><p>  Gray with dark spots and stripes</p><p>Gold</p><p>   Green with yellow</p><p>Species:</p><p>Dog</p><p>Cat</p><p>Goldfish</p><p>Parakeet</p>
LESSON~~GRAPHICS AND ARRAYS~~Arrays can also be used with Graphics. <br> Write and execute the following code: <br> GraphicsWindow.BackgroundColor = "Black" <br> GraphicsWindow.Height = 600 <br> GraphicsWindow.Width = 605 <br> Rows = 10 <br> Columns = 10 <br> Sides = 50 <br> For A = 1 To Columns <br> For B = 1 To Rows <br> GraphicsWindow.BrushColor = "Blue" <br> Squares[A][B] = Shapes.AddRectangle(Sides, Sides) <br> Shapes.Move(Squares[A][B], A  Sides, B  Sides) <br> EndFor <br> EndFor
LESSON~~CHALLENGE~~Create your own two-dimensional array. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com 
SUBMODULE~~D~~Putting it all together
LESSON~~SOME BASIC PROGRAMS~~Now we will put together some of what you’ve learned so far to make some basic programs. Actually type out all code in the Editor – this is vital experience for you as a developer.
LESSON~~PROGRAM 1~~Write and execute the following code: <br> GraphicsWindow.BackgroundColor = "LightCyan" <br> GraphicsWindow.PenColor = "DarkSlateBlue" <br> GraphicsWindow.Width = 400 <br> GraphicsWindow.Height = 400 <br> For A = 1 To 200 Step 6 <br> GraphicsWindow.DrawRectangle(200 - A, 200 - A, A  2, A  2) <br> Program.Delay(100) <br> EndFor <br> For A = 1 To 200 Step 6 <br> GraphicsWindow.DrawEllipse(200 - A, 200 - A, A  2, A 2) <br> Program.Delay(100) <br> EndFor <br> Look over your code and try to see what each line does exactly.
LESSON~~PROGRAM 2~~Write and execute the following code: <br> GraphicsWindow.Width = 1000 <br> GraphicsWindow.Height = 650 <br> GraphicsWindow.BackgroundColor = "Black" <br> A = 1000 <br> B = 1000 <br> For C = 1 To 100000 <br> D = Math.GetRandomNumber(3) <br> E = 500 <br> Program.Delay(.1) <br> F = 30 <br> If (D = 1) then <br> E = 30 <br> Program.Delay(.1) <br> F = 1000 <br> EndIf <br> If (D = 2) Then <br> E = 1000 <br> F = 1000 <br> Program.Delay(.1) <br> EndIf <br> A = (A + E) / 2 <br> Program.Delay(.1) <br> B = (B + F) / 2 <br> Random_Color = GraphicsWindow.GetRandomColor() <br> GraphicsWindow.SetPixel(A, B, Random_Color) <br> EndFor <br> Look over your code and try to see what each line does exactly.
LESSON~~PROGRAM 3~~Write and execute the following code: <br> GraphicsWindow.Title = "America!" <br> GraphicsWindow.Width = 1000 <br> GraphicsWindow.Height = 600 <br> For A = 1 To 100000 <br> GraphicsWindow.BrushColor = "Red" <br> B = Math.GetRandomNumber(1000) <br> C = Math.GetRandomNumber(1000) <br> GraphicsWindow.FillEllipse(B, C, 4, 4) <br> EndFor <br> For D = 1 To 100000 <br> GraphicsWindow.BrushColor = "Blue" <br> B = Math.GetRandomNumber(500) <br> C = Math.GetRandomNumber(275) <br> GraphicsWindow.FillEllipse(B, C, 4, 4) <br> EndFor <br> Look over your code and try to see what each line does exactly.
LESSON~~PROGRAM 4~~Write and execute the following code: <br> GraphicsWindow.Width = 275 <br> Turtle.X = 130 <br> Turtle.Y = 400 <br> GraphicsWindow.PenColor = "Green" <br> Turtle.Move(150) <br> Turtle.X = 135 <br> Turtle.Y = 400 <br> GraphicsWindow.PenColor = "Green" <br> Turtle.Move(150) <br> Turtle.X = 100 <br> Turtle.Y = 200 <br> GraphicsWindow.PenColor = "MediumVioletRed" <br> Turns = 200 <br> Length = 300 /  Turns <br> Angle = 400 / Turns <br> Turtle.Speed = 10 <br> For A = 1 To 6 <br> For B = 1 To Turns <br> Turtle.Move(Length) <br> Turtle.Turn(Angle) <br> EndFor <br> Turtle.Turn(18) <br> EndFor <br> Turtle.X = 128.5 <br> Turtle.Y = 193 <br> Look over your code and try to see what each line does exactly.
LESSON~~PROGRAM 5~~Write and execute the following code: <br> GraphicsWindow.BackgroundColor = "DarkBlue" <br> GraphicsWindow.Height = 600 <br> GraphicsWindow.Width = 605 <br> Rows = 10 <br> Columns = 10 <br> Sides = 50 <br> For A = 1 To Columns <br> For B = 1 To Rows <br> GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor() <br> Squares[A][B] = Shapes.AddRectangle(Sides, Sides) <br> Shapes.Move(Squares[A][B], A  Sides, B  Sides) <br> EndFor <br> EndFor <br> For A = 1 To Columns <br> For B = 1 To Rows <br> Shapes.Animate(Squares[B][A], 300, 0, 1000) <br> Program.Delay(50) <br> EndFor <br> EndFor <br> For A = 1 To Columns <br> For B = 1 To Rows <br> Shapes.Animate(Squares[B][A], 288, 500, 1000) <br> Program.Delay(10) <br> EndFor <br> EndFor <br> For A = 1 To Columns <br> For B = 1 To Rows <br> Shapes.Animate(Squares[B][A], 275, 250, 1000) <br> Program.Delay(10) <br> EndFor <br> EndFor <br> Look over your code and try to see what each line does exactly.
LESSON~~EVENTS~~An event is an action or something that occurs that is detected by a computer program. There can be system events (events that occur as a result of operations the computer does automatically), or user events, like typing on the keyboard or clicking a mouse. <br> In Small Basic, an event is something that reacts to a user’s action and is when the computer tells you that something interesting has happened. For example, if you make a program that turns the screen blue when you click on the word “blue,” clicking on the word "blue" would be the event. <br> Events can make programs more interesting and interactive. <br> Interactive means that two things influence one another and create effects on each other. In computers, interactive refers to a computer that is able to be communicated with and gotten to perform activities by a human; these activities involve the person using the computer. An interactive computer is a computer that you can affect in some way (move a pointer on a screen and select something, etc.) and which will respond in some manner.  Most, if not all, computers you’ve handled have been interactive. <br> The computer game "Hangman" could be developed in Small Basic and would include events. In this game, the user makes choices and the program receives the user’s input using events. <br> There is such a thing as “event-driven programming.” This is programming where the flow of the program is controlled by events. An example would be a program in which the program flow is determined by the typing of keys and clicking the mouse.
LESSON~~FLICKR~~Flickr is a website where people can store and display images. <br> We will now use the MouseDown event in the following program (you will see what it does when you run the program). We can pull a picture from Flickr! <br> Write and execute the following code: <br> GraphicsWindow.Title = "It's raining cats and dogs!" <br> GraphicsWindow.Width = 700 <br> GraphicsWindow.Height = 700 <br> GraphicsWindow.MouseDown = Pics <br> Sub Pics <br> Picture = Flickr.GetRandomPicture("Cats, Dogs") <br> GraphicsWindow.DrawResizedImage(Picture, 0, 0, 700, 700) <br> EndSub
LESSON~~DISPLAYING PHOTOS~~We just used a new operation called “DrawResizedImage” which allows you to display photos. The first word in the parentheses names the picture, the next two numbers are the X and Y Coordinates in the Graphics Window and the last two specify the width and length of the photo (respectively). Let’s get a little tougher on events. <br> Write and execute the following code: <br> GraphicsWindow.DrawBoundText(250, 200, 100, "Click the screen!") <br> GraphicsWindow.MouseDown = Click <br> GraphicsWindow.BrushColor = "Yellow" <br> GraphicsWindow.BackgroundColor = "Black" <br> Sub Click <br> GraphicsWindow.ShowMessage("You clicked the mouse!", "NOTICE") <br> A = GraphicsWindow.MouseX - 5 <br> B = GraphicsWindow.MouseY - 5 <br> GraphicsWindow.FillTriangle(A, B, 30, 30, 40, 40) <br> EndSub <br> There are two chunks of text following ShowMessage. The first chunk is what will be displayed inside the window, and the second chunk is what is displayed at the top. <br> This program contains a subroutine as well. Every time the user clicks in the GraphicsWindow, the subroutine “Click” is called. The Click subroutine results in a couple events: 1. A message pops up and 2. A yellow ray expands out from the top left corner after you shut the message box. One of the unique things about events is that when an event occurs, the subroutine is called automatically. <br> In the above code, we assigned the subroutine name to the MouseDown event which is connected to the GraphicsWindow object. Even though the MouseDown looks like a property (attributes of an object), we are actually assigning the subroutine “Click” to it. If MouseDown were a property, we would be assigning it a value (as opposed to a subroutine).
LESSON~~PAINT~~Now that you are familiar with subroutines, events and other key coding concepts, we can create our very own “Paint” program that will allow you to draw using the mouse. You will be able to draw in rainbow-like colors with a thick brush. <br> In this next program, we will be using the MouseMove event, which gets the X and Y coordinates, in pixels, of the mouse cursor – based on where it is as compared to the top left of the desktop. <br> Write and execute the following code: <br> GraphicsWindow.MouseMove = A <br> GraphicsWindow.MouseDown = B <br> GraphicsWindow.BackgroundColor = "SkyBlue" <br> GraphicsWindow.PenWidth = (25) <br> Sub B <br> C = GraphicsWindow.MouseX <br> D = GraphicsWindow.MouseY <br> EndSub <br> Sub A <br> E = GraphicsWindow.MouseX <br> F = GraphicsWindow.MouseY <br> If (Mouse.IsLeftButtonDown) Then <br> GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor() <br> GraphicsWindow.DrawLine(C, D, E, F) <br> EndIf <br> C = E <br> D = F <br> EndSub <br> ‘Click and hold down mouse as you move it around.
LESSON~~CHALLENGE:~~Create a program that includes the following events: <br> -MouseUp, <br> -MouseDown, <br> -MouseMove, <br> -KeyDown, and <br> -KeyUp. <br> Email your code from this challenge to a Tech Academy Instructor. <br> NOTE: <br> You can use the message system within this LMS, or email an Instructor at: <br> •        Academy of Learning students:         academyoflearning@learncodinganywhere.com
LESSON~~CONGRATULATIONS!~~You have reached the end of the Overview of Software Development Course. You have written code and are now familiar with the basics of computer programming. The data you learned on this course, combined with the Computer and Technology Basics Course, will provide a firm tech foundation for your future. </p> <br> <p>You have two steps remaining on this course:</p> <br>  <br> The final essay <br>  <br> The final examination##EndBull
LESSON~~ASSIGNMENT~~What did you gain from writing code in Small Basic? <br>  <br> As a software developer, how can you handle barriers you run into while coding? <br>  <br> How can you utilize the data on this course in your future?##EndBull
SUBMODULE~~Module 8 Quiz
QUESTION~~In a flowchart, the parallelogram shape represents _______.~~Data entry or display~~Start/End~~Variables~~Operations
QUESTION~~What is the name of the troubleshooting approach explained in the previous video?~~The half-split approach~~The bottom-up approach~~The move-the-problem approach~~The follow-the-path approach
QUESTION~~Where can you find the official documentation for Microsoft technologies?~~Microsoft Developer Network~~Stack Overflow~~GitHub~~The Linux Documentation Project
OBJECTIVES~~Learning Objectives~~Learned how to create subroutines~~Learned how to comment code~~Wrote and executed for loops~~Created and ran subprograms~~Developed arrays
